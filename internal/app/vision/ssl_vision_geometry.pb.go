// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: ssl_vision_geometry.proto

package vision

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A 2D float vector.
type Vector2F struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
}

func (x *Vector2F) Reset() {
	*x = Vector2F{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_vision_geometry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector2F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2F) ProtoMessage() {}

func (x *Vector2F) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_vision_geometry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2F.ProtoReflect.Descriptor instead.
func (*Vector2F) Descriptor() ([]byte, []int) {
	return file_ssl_vision_geometry_proto_rawDescGZIP(), []int{0}
}

func (x *Vector2F) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vector2F) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

// Represents a field marking as a line segment represented by a start point p1,
// and end point p2, and a line thickness. The start and end points are along
// the center of the line, so the thickness of the line extends by thickness / 2
// on either side of the line.
type SSL_FieldLineSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of this field marking.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Start point of the line segment.
	P1 *Vector2F `protobuf:"bytes,2,req,name=p1" json:"p1,omitempty"`
	// End point of the line segment.
	P2 *Vector2F `protobuf:"bytes,3,req,name=p2" json:"p2,omitempty"`
	// Thickness of the line segment.
	Thickness *float32 `protobuf:"fixed32,4,req,name=thickness" json:"thickness,omitempty"`
}

func (x *SSL_FieldLineSegment) Reset() {
	*x = SSL_FieldLineSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_vision_geometry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSL_FieldLineSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_FieldLineSegment) ProtoMessage() {}

func (x *SSL_FieldLineSegment) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_vision_geometry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_FieldLineSegment.ProtoReflect.Descriptor instead.
func (*SSL_FieldLineSegment) Descriptor() ([]byte, []int) {
	return file_ssl_vision_geometry_proto_rawDescGZIP(), []int{1}
}

func (x *SSL_FieldLineSegment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SSL_FieldLineSegment) GetP1() *Vector2F {
	if x != nil {
		return x.P1
	}
	return nil
}

func (x *SSL_FieldLineSegment) GetP2() *Vector2F {
	if x != nil {
		return x.P2
	}
	return nil
}

func (x *SSL_FieldLineSegment) GetThickness() float32 {
	if x != nil && x.Thickness != nil {
		return *x.Thickness
	}
	return 0
}

// Represents a field marking as a circular arc segment represented by center point, a
// start angle, an end angle, and an arc thickness.
type SSL_FieldCicularArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of this field marking.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Center point of the circular arc.
	Center *Vector2F `protobuf:"bytes,2,req,name=center" json:"center,omitempty"`
	// Radius of the arc.
	Radius *float32 `protobuf:"fixed32,3,req,name=radius" json:"radius,omitempty"`
	// Start angle in counter-clockwise order.
	A1 *float32 `protobuf:"fixed32,4,req,name=a1" json:"a1,omitempty"`
	// End angle in counter-clockwise order.
	A2 *float32 `protobuf:"fixed32,5,req,name=a2" json:"a2,omitempty"`
	// Thickness of the arc.
	Thickness *float32 `protobuf:"fixed32,6,req,name=thickness" json:"thickness,omitempty"`
}

func (x *SSL_FieldCicularArc) Reset() {
	*x = SSL_FieldCicularArc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_vision_geometry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSL_FieldCicularArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_FieldCicularArc) ProtoMessage() {}

func (x *SSL_FieldCicularArc) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_vision_geometry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_FieldCicularArc.ProtoReflect.Descriptor instead.
func (*SSL_FieldCicularArc) Descriptor() ([]byte, []int) {
	return file_ssl_vision_geometry_proto_rawDescGZIP(), []int{2}
}

func (x *SSL_FieldCicularArc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SSL_FieldCicularArc) GetCenter() *Vector2F {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *SSL_FieldCicularArc) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *SSL_FieldCicularArc) GetA1() float32 {
	if x != nil && x.A1 != nil {
		return *x.A1
	}
	return 0
}

func (x *SSL_FieldCicularArc) GetA2() float32 {
	if x != nil && x.A2 != nil {
		return *x.A2
	}
	return 0
}

func (x *SSL_FieldCicularArc) GetThickness() float32 {
	if x != nil && x.Thickness != nil {
		return *x.Thickness
	}
	return 0
}

type SSL_GeometryFieldSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldLength   *int32                  `protobuf:"varint,1,req,name=field_length,json=fieldLength" json:"field_length,omitempty"`
	FieldWidth    *int32                  `protobuf:"varint,2,req,name=field_width,json=fieldWidth" json:"field_width,omitempty"`
	GoalWidth     *int32                  `protobuf:"varint,3,req,name=goal_width,json=goalWidth" json:"goal_width,omitempty"`
	GoalDepth     *int32                  `protobuf:"varint,4,req,name=goal_depth,json=goalDepth" json:"goal_depth,omitempty"`
	BoundaryWidth *int32                  `protobuf:"varint,5,req,name=boundary_width,json=boundaryWidth" json:"boundary_width,omitempty"`
	FieldLines    []*SSL_FieldLineSegment `protobuf:"bytes,6,rep,name=field_lines,json=fieldLines" json:"field_lines,omitempty"`
	FieldArcs     []*SSL_FieldCicularArc  `protobuf:"bytes,7,rep,name=field_arcs,json=fieldArcs" json:"field_arcs,omitempty"`
}

func (x *SSL_GeometryFieldSize) Reset() {
	*x = SSL_GeometryFieldSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_vision_geometry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSL_GeometryFieldSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryFieldSize) ProtoMessage() {}

func (x *SSL_GeometryFieldSize) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_vision_geometry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryFieldSize.ProtoReflect.Descriptor instead.
func (*SSL_GeometryFieldSize) Descriptor() ([]byte, []int) {
	return file_ssl_vision_geometry_proto_rawDescGZIP(), []int{3}
}

func (x *SSL_GeometryFieldSize) GetFieldLength() int32 {
	if x != nil && x.FieldLength != nil {
		return *x.FieldLength
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetFieldWidth() int32 {
	if x != nil && x.FieldWidth != nil {
		return *x.FieldWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetGoalWidth() int32 {
	if x != nil && x.GoalWidth != nil {
		return *x.GoalWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetGoalDepth() int32 {
	if x != nil && x.GoalDepth != nil {
		return *x.GoalDepth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetBoundaryWidth() int32 {
	if x != nil && x.BoundaryWidth != nil {
		return *x.BoundaryWidth
	}
	return 0
}

func (x *SSL_GeometryFieldSize) GetFieldLines() []*SSL_FieldLineSegment {
	if x != nil {
		return x.FieldLines
	}
	return nil
}

func (x *SSL_GeometryFieldSize) GetFieldArcs() []*SSL_FieldCicularArc {
	if x != nil {
		return x.FieldArcs
	}
	return nil
}

type SSL_GeometryCameraCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId             *uint32  `protobuf:"varint,1,req,name=camera_id,json=cameraId" json:"camera_id,omitempty"`
	FocalLength          *float32 `protobuf:"fixed32,2,req,name=focal_length,json=focalLength" json:"focal_length,omitempty"`
	PrincipalPointX      *float32 `protobuf:"fixed32,3,req,name=principal_point_x,json=principalPointX" json:"principal_point_x,omitempty"`
	PrincipalPointY      *float32 `protobuf:"fixed32,4,req,name=principal_point_y,json=principalPointY" json:"principal_point_y,omitempty"`
	Distortion           *float32 `protobuf:"fixed32,5,req,name=distortion" json:"distortion,omitempty"`
	Q0                   *float32 `protobuf:"fixed32,6,req,name=q0" json:"q0,omitempty"`
	Q1                   *float32 `protobuf:"fixed32,7,req,name=q1" json:"q1,omitempty"`
	Q2                   *float32 `protobuf:"fixed32,8,req,name=q2" json:"q2,omitempty"`
	Q3                   *float32 `protobuf:"fixed32,9,req,name=q3" json:"q3,omitempty"`
	Tx                   *float32 `protobuf:"fixed32,10,req,name=tx" json:"tx,omitempty"`
	Ty                   *float32 `protobuf:"fixed32,11,req,name=ty" json:"ty,omitempty"`
	Tz                   *float32 `protobuf:"fixed32,12,req,name=tz" json:"tz,omitempty"`
	DerivedCameraWorldTx *float32 `protobuf:"fixed32,13,opt,name=derived_camera_world_tx,json=derivedCameraWorldTx" json:"derived_camera_world_tx,omitempty"`
	DerivedCameraWorldTy *float32 `protobuf:"fixed32,14,opt,name=derived_camera_world_ty,json=derivedCameraWorldTy" json:"derived_camera_world_ty,omitempty"`
	DerivedCameraWorldTz *float32 `protobuf:"fixed32,15,opt,name=derived_camera_world_tz,json=derivedCameraWorldTz" json:"derived_camera_world_tz,omitempty"`
}

func (x *SSL_GeometryCameraCalibration) Reset() {
	*x = SSL_GeometryCameraCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_vision_geometry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSL_GeometryCameraCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryCameraCalibration) ProtoMessage() {}

func (x *SSL_GeometryCameraCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_vision_geometry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryCameraCalibration.ProtoReflect.Descriptor instead.
func (*SSL_GeometryCameraCalibration) Descriptor() ([]byte, []int) {
	return file_ssl_vision_geometry_proto_rawDescGZIP(), []int{4}
}

func (x *SSL_GeometryCameraCalibration) GetCameraId() uint32 {
	if x != nil && x.CameraId != nil {
		return *x.CameraId
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetFocalLength() float32 {
	if x != nil && x.FocalLength != nil {
		return *x.FocalLength
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetPrincipalPointX() float32 {
	if x != nil && x.PrincipalPointX != nil {
		return *x.PrincipalPointX
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetPrincipalPointY() float32 {
	if x != nil && x.PrincipalPointY != nil {
		return *x.PrincipalPointY
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDistortion() float32 {
	if x != nil && x.Distortion != nil {
		return *x.Distortion
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ0() float32 {
	if x != nil && x.Q0 != nil {
		return *x.Q0
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ1() float32 {
	if x != nil && x.Q1 != nil {
		return *x.Q1
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ2() float32 {
	if x != nil && x.Q2 != nil {
		return *x.Q2
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetQ3() float32 {
	if x != nil && x.Q3 != nil {
		return *x.Q3
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetTx() float32 {
	if x != nil && x.Tx != nil {
		return *x.Tx
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetTy() float32 {
	if x != nil && x.Ty != nil {
		return *x.Ty
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetTz() float32 {
	if x != nil && x.Tz != nil {
		return *x.Tz
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTx() float32 {
	if x != nil && x.DerivedCameraWorldTx != nil {
		return *x.DerivedCameraWorldTx
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTy() float32 {
	if x != nil && x.DerivedCameraWorldTy != nil {
		return *x.DerivedCameraWorldTy
	}
	return 0
}

func (x *SSL_GeometryCameraCalibration) GetDerivedCameraWorldTz() float32 {
	if x != nil && x.DerivedCameraWorldTz != nil {
		return *x.DerivedCameraWorldTz
	}
	return 0
}

type SSL_GeometryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *SSL_GeometryFieldSize           `protobuf:"bytes,1,req,name=field" json:"field,omitempty"`
	Calib []*SSL_GeometryCameraCalibration `protobuf:"bytes,2,rep,name=calib" json:"calib,omitempty"`
}

func (x *SSL_GeometryData) Reset() {
	*x = SSL_GeometryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_vision_geometry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSL_GeometryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSL_GeometryData) ProtoMessage() {}

func (x *SSL_GeometryData) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_vision_geometry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSL_GeometryData.ProtoReflect.Descriptor instead.
func (*SSL_GeometryData) Descriptor() ([]byte, []int) {
	return file_ssl_vision_geometry_proto_rawDescGZIP(), []int{5}
}

func (x *SSL_GeometryData) GetField() *SSL_GeometryFieldSize {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SSL_GeometryData) GetCalib() []*SSL_GeometryCameraCalibration {
	if x != nil {
		return x.Calib
	}
	return nil
}

var File_ssl_vision_geometry_proto protoreflect.FileDescriptor

var file_ssl_vision_geometry_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x08, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x22, 0x7e, 0x0a, 0x14, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x02, 0x70, 0x31, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x66, 0x52, 0x02, 0x70, 0x31, 0x12, 0x19, 0x0a, 0x02, 0x70, 0x32,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x66, 0x52, 0x02, 0x70, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x66, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x31,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02, 0x61, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x32,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02, 0x61, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x15, 0x53, 0x53, 0x4c,
	0x5f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x72, 0x63,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x63, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x73, 0x22, 0xec, 0x03, 0x0a, 0x1d, 0x53, 0x53, 0x4c,
	0x5f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0b, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x78, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x30, 0x18, 0x06, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x71, 0x30, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x31, 0x18, 0x07, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x71, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x32, 0x18, 0x08, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x71, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x33, 0x18, 0x09, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x71, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x02, 0x52, 0x02,
	0x74, 0x7a, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x78, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x79,
	0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x74, 0x7a, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x7a, 0x22, 0x76, 0x0a, 0x10, 0x53, 0x53, 0x4c, 0x5f, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x53, 0x4c,
	0x5f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x42,
	0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f,
	0x62, 0x6f, 0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x61,
	0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e,
}

var (
	file_ssl_vision_geometry_proto_rawDescOnce sync.Once
	file_ssl_vision_geometry_proto_rawDescData = file_ssl_vision_geometry_proto_rawDesc
)

func file_ssl_vision_geometry_proto_rawDescGZIP() []byte {
	file_ssl_vision_geometry_proto_rawDescOnce.Do(func() {
		file_ssl_vision_geometry_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_vision_geometry_proto_rawDescData)
	})
	return file_ssl_vision_geometry_proto_rawDescData
}

var file_ssl_vision_geometry_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ssl_vision_geometry_proto_goTypes = []interface{}{
	(*Vector2F)(nil),                      // 0: Vector2f
	(*SSL_FieldLineSegment)(nil),          // 1: SSL_FieldLineSegment
	(*SSL_FieldCicularArc)(nil),           // 2: SSL_FieldCicularArc
	(*SSL_GeometryFieldSize)(nil),         // 3: SSL_GeometryFieldSize
	(*SSL_GeometryCameraCalibration)(nil), // 4: SSL_GeometryCameraCalibration
	(*SSL_GeometryData)(nil),              // 5: SSL_GeometryData
}
var file_ssl_vision_geometry_proto_depIdxs = []int32{
	0, // 0: SSL_FieldLineSegment.p1:type_name -> Vector2f
	0, // 1: SSL_FieldLineSegment.p2:type_name -> Vector2f
	0, // 2: SSL_FieldCicularArc.center:type_name -> Vector2f
	1, // 3: SSL_GeometryFieldSize.field_lines:type_name -> SSL_FieldLineSegment
	2, // 4: SSL_GeometryFieldSize.field_arcs:type_name -> SSL_FieldCicularArc
	3, // 5: SSL_GeometryData.field:type_name -> SSL_GeometryFieldSize
	4, // 6: SSL_GeometryData.calib:type_name -> SSL_GeometryCameraCalibration
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ssl_vision_geometry_proto_init() }
func file_ssl_vision_geometry_proto_init() {
	if File_ssl_vision_geometry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssl_vision_geometry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector2F); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_vision_geometry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSL_FieldLineSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_vision_geometry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSL_FieldCicularArc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_vision_geometry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSL_GeometryFieldSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_vision_geometry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSL_GeometryCameraCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_vision_geometry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSL_GeometryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_vision_geometry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_vision_geometry_proto_goTypes,
		DependencyIndexes: file_ssl_vision_geometry_proto_depIdxs,
		MessageInfos:      file_ssl_vision_geometry_proto_msgTypes,
	}.Build()
	File_ssl_vision_geometry_proto = out.File
	file_ssl_vision_geometry_proto_rawDesc = nil
	file_ssl_vision_geometry_proto_goTypes = nil
	file_ssl_vision_geometry_proto_depIdxs = nil
}
