// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: ssl_gc_change.proto

package statemachine

import (
	geom "github.com/RoboCup-SSL/ssl-game-controller/internal/app/geom"
	state "github.com/RoboCup-SSL/ssl-game-controller/internal/app/state"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StatePre  *state.State         `protobuf:"bytes,2,opt,name=state_pre,json=statePre" json:"state_pre,omitempty"`
	State     *state.State         `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Change    *Change              `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *StateChange) Reset() {
	*x = StateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChange) ProtoMessage() {}

func (x *StateChange) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChange.ProtoReflect.Descriptor instead.
func (*StateChange) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{0}
}

func (x *StateChange) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StateChange) GetStatePre() *state.State {
	if x != nil {
		return x.StatePre
	}
	return nil
}

func (x *StateChange) GetState() *state.State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *StateChange) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *StateChange) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin     *string `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Revertible *bool   `protobuf:"varint,16,opt,name=revertible" json:"revertible,omitempty"`
	// Types that are assignable to Change:
	//	*Change_NewCommand
	//	*Change_ChangeStage
	//	*Change_SetBallPlacementPos
	//	*Change_AddYellowCard
	//	*Change_AddRedCard
	//	*Change_YellowCardOver
	//	*Change_AddGameEvent
	//	*Change_AddPassiveGameEvent
	//	*Change_AddProposal
	//	*Change_StartBallPlacement
	//	*Change_Continue
	//	*Change_UpdateConfig
	//	*Change_UpdateTeamState
	//	*Change_SwitchColors
	//	*Change_Revert
	//	*Change_NewGameState
	//	*Change_AcceptProposalGroup
	Change isChange_Change `protobuf_oneof:"change"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{1}
}

func (x *Change) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *Change) GetRevertible() bool {
	if x != nil && x.Revertible != nil {
		return *x.Revertible
	}
	return false
}

func (m *Change) GetChange() isChange_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *Change) GetNewCommand() *NewCommand {
	if x, ok := x.GetChange().(*Change_NewCommand); ok {
		return x.NewCommand
	}
	return nil
}

func (x *Change) GetChangeStage() *ChangeStage {
	if x, ok := x.GetChange().(*Change_ChangeStage); ok {
		return x.ChangeStage
	}
	return nil
}

func (x *Change) GetSetBallPlacementPos() *SetBallPlacementPos {
	if x, ok := x.GetChange().(*Change_SetBallPlacementPos); ok {
		return x.SetBallPlacementPos
	}
	return nil
}

func (x *Change) GetAddYellowCard() *AddYellowCard {
	if x, ok := x.GetChange().(*Change_AddYellowCard); ok {
		return x.AddYellowCard
	}
	return nil
}

func (x *Change) GetAddRedCard() *AddRedCard {
	if x, ok := x.GetChange().(*Change_AddRedCard); ok {
		return x.AddRedCard
	}
	return nil
}

func (x *Change) GetYellowCardOver() *YellowCardOver {
	if x, ok := x.GetChange().(*Change_YellowCardOver); ok {
		return x.YellowCardOver
	}
	return nil
}

func (x *Change) GetAddGameEvent() *AddGameEvent {
	if x, ok := x.GetChange().(*Change_AddGameEvent); ok {
		return x.AddGameEvent
	}
	return nil
}

func (x *Change) GetAddPassiveGameEvent() *AddPassiveGameEvent {
	if x, ok := x.GetChange().(*Change_AddPassiveGameEvent); ok {
		return x.AddPassiveGameEvent
	}
	return nil
}

func (x *Change) GetAddProposal() *AddProposal {
	if x, ok := x.GetChange().(*Change_AddProposal); ok {
		return x.AddProposal
	}
	return nil
}

func (x *Change) GetStartBallPlacement() *StartBallPlacement {
	if x, ok := x.GetChange().(*Change_StartBallPlacement); ok {
		return x.StartBallPlacement
	}
	return nil
}

func (x *Change) GetContinue() *Continue {
	if x, ok := x.GetChange().(*Change_Continue); ok {
		return x.Continue
	}
	return nil
}

func (x *Change) GetUpdateConfig() *UpdateConfig {
	if x, ok := x.GetChange().(*Change_UpdateConfig); ok {
		return x.UpdateConfig
	}
	return nil
}

func (x *Change) GetUpdateTeamState() *UpdateTeamState {
	if x, ok := x.GetChange().(*Change_UpdateTeamState); ok {
		return x.UpdateTeamState
	}
	return nil
}

func (x *Change) GetSwitchColors() *SwitchColors {
	if x, ok := x.GetChange().(*Change_SwitchColors); ok {
		return x.SwitchColors
	}
	return nil
}

func (x *Change) GetRevert() *Revert {
	if x, ok := x.GetChange().(*Change_Revert); ok {
		return x.Revert
	}
	return nil
}

func (x *Change) GetNewGameState() *NewGameState {
	if x, ok := x.GetChange().(*Change_NewGameState); ok {
		return x.NewGameState
	}
	return nil
}

func (x *Change) GetAcceptProposalGroup() *AcceptProposalGroup {
	if x, ok := x.GetChange().(*Change_AcceptProposalGroup); ok {
		return x.AcceptProposalGroup
	}
	return nil
}

type isChange_Change interface {
	isChange_Change()
}

type Change_NewCommand struct {
	NewCommand *NewCommand `protobuf:"bytes,2,opt,name=new_command,json=newCommand,oneof"`
}

type Change_ChangeStage struct {
	ChangeStage *ChangeStage `protobuf:"bytes,3,opt,name=change_stage,json=changeStage,oneof"`
}

type Change_SetBallPlacementPos struct {
	SetBallPlacementPos *SetBallPlacementPos `protobuf:"bytes,4,opt,name=set_ball_placement_pos,json=setBallPlacementPos,oneof"`
}

type Change_AddYellowCard struct {
	AddYellowCard *AddYellowCard `protobuf:"bytes,5,opt,name=add_yellow_card,json=addYellowCard,oneof"`
}

type Change_AddRedCard struct {
	AddRedCard *AddRedCard `protobuf:"bytes,6,opt,name=add_red_card,json=addRedCard,oneof"`
}

type Change_YellowCardOver struct {
	YellowCardOver *YellowCardOver `protobuf:"bytes,7,opt,name=yellow_card_over,json=yellowCardOver,oneof"`
}

type Change_AddGameEvent struct {
	AddGameEvent *AddGameEvent `protobuf:"bytes,8,opt,name=add_game_event,json=addGameEvent,oneof"`
}

type Change_AddPassiveGameEvent struct {
	AddPassiveGameEvent *AddPassiveGameEvent `protobuf:"bytes,19,opt,name=add_passive_game_event,json=addPassiveGameEvent,oneof"`
}

type Change_AddProposal struct {
	AddProposal *AddProposal `protobuf:"bytes,9,opt,name=add_proposal,json=addProposal,oneof"`
}

type Change_StartBallPlacement struct {
	StartBallPlacement *StartBallPlacement `protobuf:"bytes,10,opt,name=start_ball_placement,json=startBallPlacement,oneof"`
}

type Change_Continue struct {
	Continue *Continue `protobuf:"bytes,11,opt,name=continue,oneof"`
}

type Change_UpdateConfig struct {
	UpdateConfig *UpdateConfig `protobuf:"bytes,12,opt,name=update_config,json=updateConfig,oneof"`
}

type Change_UpdateTeamState struct {
	UpdateTeamState *UpdateTeamState `protobuf:"bytes,13,opt,name=update_team_state,json=updateTeamState,oneof"`
}

type Change_SwitchColors struct {
	SwitchColors *SwitchColors `protobuf:"bytes,14,opt,name=switch_colors,json=switchColors,oneof"`
}

type Change_Revert struct {
	Revert *Revert `protobuf:"bytes,15,opt,name=revert,oneof"`
}

type Change_NewGameState struct {
	NewGameState *NewGameState `protobuf:"bytes,17,opt,name=new_game_state,json=newGameState,oneof"`
}

type Change_AcceptProposalGroup struct {
	AcceptProposalGroup *AcceptProposalGroup `protobuf:"bytes,18,opt,name=accept_proposal_group,json=acceptProposalGroup,oneof"`
}

func (*Change_NewCommand) isChange_Change() {}

func (*Change_ChangeStage) isChange_Change() {}

func (*Change_SetBallPlacementPos) isChange_Change() {}

func (*Change_AddYellowCard) isChange_Change() {}

func (*Change_AddRedCard) isChange_Change() {}

func (*Change_YellowCardOver) isChange_Change() {}

func (*Change_AddGameEvent) isChange_Change() {}

func (*Change_AddPassiveGameEvent) isChange_Change() {}

func (*Change_AddProposal) isChange_Change() {}

func (*Change_StartBallPlacement) isChange_Change() {}

func (*Change_Continue) isChange_Change() {}

func (*Change_UpdateConfig) isChange_Change() {}

func (*Change_UpdateTeamState) isChange_Change() {}

func (*Change_SwitchColors) isChange_Change() {}

func (*Change_Revert) isChange_Change() {}

func (*Change_NewGameState) isChange_Change() {}

func (*Change_AcceptProposalGroup) isChange_Change() {}

type NewCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *state.Command `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (x *NewCommand) Reset() {
	*x = NewCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommand) ProtoMessage() {}

func (x *NewCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommand.ProtoReflect.Descriptor instead.
func (*NewCommand) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{2}
}

func (x *NewCommand) GetCommand() *state.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

type ChangeStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewStage *state.Referee_Stage `protobuf:"varint,1,opt,name=new_stage,json=newStage,enum=Referee_Stage" json:"new_stage,omitempty"`
}

func (x *ChangeStage) Reset() {
	*x = ChangeStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStage) ProtoMessage() {}

func (x *ChangeStage) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStage.ProtoReflect.Descriptor instead.
func (*ChangeStage) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeStage) GetNewStage() state.Referee_Stage {
	if x != nil && x.NewStage != nil {
		return *x.NewStage
	}
	return state.Referee_NORMAL_FIRST_HALF_PRE
}

type SetBallPlacementPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos *geom.Vector2 `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
}

func (x *SetBallPlacementPos) Reset() {
	*x = SetBallPlacementPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBallPlacementPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBallPlacementPos) ProtoMessage() {}

func (x *SetBallPlacementPos) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBallPlacementPos.ProtoReflect.Descriptor instead.
func (*SetBallPlacementPos) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{4}
}

func (x *SetBallPlacementPos) GetPos() *geom.Vector2 {
	if x != nil {
		return x.Pos
	}
	return nil
}

type AddYellowCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForTeam           *state.SSL_Team  `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=SSL_Team" json:"for_team,omitempty"`
	CausedByGameEvent *state.GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
}

func (x *AddYellowCard) Reset() {
	*x = AddYellowCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddYellowCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddYellowCard) ProtoMessage() {}

func (x *AddYellowCard) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddYellowCard.ProtoReflect.Descriptor instead.
func (*AddYellowCard) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{5}
}

func (x *AddYellowCard) GetForTeam() state.SSL_Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.SSL_Team_UNKNOWN
}

func (x *AddYellowCard) GetCausedByGameEvent() *state.GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

type AddRedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForTeam           *state.SSL_Team  `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=SSL_Team" json:"for_team,omitempty"`
	CausedByGameEvent *state.GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
}

func (x *AddRedCard) Reset() {
	*x = AddRedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRedCard) ProtoMessage() {}

func (x *AddRedCard) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRedCard.ProtoReflect.Descriptor instead.
func (*AddRedCard) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{6}
}

func (x *AddRedCard) GetForTeam() state.SSL_Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.SSL_Team_UNKNOWN
}

func (x *AddRedCard) GetCausedByGameEvent() *state.GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

type YellowCardOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForTeam *state.SSL_Team `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=SSL_Team" json:"for_team,omitempty"`
}

func (x *YellowCardOver) Reset() {
	*x = YellowCardOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YellowCardOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YellowCardOver) ProtoMessage() {}

func (x *YellowCardOver) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YellowCardOver.ProtoReflect.Descriptor instead.
func (*YellowCardOver) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{7}
}

func (x *YellowCardOver) GetForTeam() state.SSL_Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.SSL_Team_UNKNOWN
}

type AddGameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameEvent *state.GameEvent `protobuf:"bytes,1,opt,name=game_event,json=gameEvent" json:"game_event,omitempty"`
}

func (x *AddGameEvent) Reset() {
	*x = AddGameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameEvent) ProtoMessage() {}

func (x *AddGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameEvent.ProtoReflect.Descriptor instead.
func (*AddGameEvent) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{8}
}

func (x *AddGameEvent) GetGameEvent() *state.GameEvent {
	if x != nil {
		return x.GameEvent
	}
	return nil
}

type AddPassiveGameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameEvent *state.GameEvent `protobuf:"bytes,1,opt,name=game_event,json=gameEvent" json:"game_event,omitempty"`
}

func (x *AddPassiveGameEvent) Reset() {
	*x = AddPassiveGameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPassiveGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPassiveGameEvent) ProtoMessage() {}

func (x *AddPassiveGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPassiveGameEvent.ProtoReflect.Descriptor instead.
func (*AddPassiveGameEvent) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{9}
}

func (x *AddPassiveGameEvent) GetGameEvent() *state.GameEvent {
	if x != nil {
		return x.GameEvent
	}
	return nil
}

type AddProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *state.Proposal `protobuf:"bytes,1,opt,name=proposal" json:"proposal,omitempty"`
}

func (x *AddProposal) Reset() {
	*x = AddProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProposal) ProtoMessage() {}

func (x *AddProposal) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProposal.ProtoReflect.Descriptor instead.
func (*AddProposal) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{10}
}

func (x *AddProposal) GetProposal() *state.Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type AcceptProposalGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    *uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	AcceptedBy *string `protobuf:"bytes,2,opt,name=accepted_by,json=acceptedBy" json:"accepted_by,omitempty"`
}

func (x *AcceptProposalGroup) Reset() {
	*x = AcceptProposalGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptProposalGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptProposalGroup) ProtoMessage() {}

func (x *AcceptProposalGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptProposalGroup.ProtoReflect.Descriptor instead.
func (*AcceptProposalGroup) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{11}
}

func (x *AcceptProposalGroup) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *AcceptProposalGroup) GetAcceptedBy() string {
	if x != nil && x.AcceptedBy != nil {
		return *x.AcceptedBy
	}
	return ""
}

type StartBallPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartBallPlacement) Reset() {
	*x = StartBallPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBallPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBallPlacement) ProtoMessage() {}

func (x *StartBallPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBallPlacement.ProtoReflect.Descriptor instead.
func (*StartBallPlacement) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{12}
}

type Continue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Continue) Reset() {
	*x = Continue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Continue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Continue) ProtoMessage() {}

func (x *Continue) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Continue.ProtoReflect.Descriptor instead.
func (*Continue) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{13}
}

type UpdateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Division         *state.Division `protobuf:"varint,1,opt,name=division,enum=Division" json:"division,omitempty"`
	FirstKickoffTeam *state.SSL_Team `protobuf:"varint,2,opt,name=first_kickoff_team,json=firstKickoffTeam,enum=SSL_Team" json:"first_kickoff_team,omitempty"`
	AutoContinue     *bool           `protobuf:"varint,3,opt,name=auto_continue,json=autoContinue" json:"auto_continue,omitempty"`
}

func (x *UpdateConfig) Reset() {
	*x = UpdateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfig) ProtoMessage() {}

func (x *UpdateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfig.ProtoReflect.Descriptor instead.
func (*UpdateConfig) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateConfig) GetDivision() state.Division {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return state.Division_DIV_UNKNOWN
}

func (x *UpdateConfig) GetFirstKickoffTeam() state.SSL_Team {
	if x != nil && x.FirstKickoffTeam != nil {
		return *x.FirstKickoffTeam
	}
	return state.SSL_Team_UNKNOWN
}

func (x *UpdateConfig) GetAutoContinue() bool {
	if x != nil && x.AutoContinue != nil {
		return *x.AutoContinue
	}
	return false
}

type UpdateTeamState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForTeam                 *state.SSL_Team   `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=SSL_Team" json:"for_team,omitempty"`
	TeamName                *string           `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Goals                   *int32            `protobuf:"varint,3,opt,name=goals" json:"goals,omitempty"`
	Goalkeeper              *int32            `protobuf:"varint,4,opt,name=goalkeeper" json:"goalkeeper,omitempty"`
	TimeoutsLeft            *int32            `protobuf:"varint,5,opt,name=timeouts_left,json=timeoutsLeft" json:"timeouts_left,omitempty"`
	TimeoutTimeLeft         *string           `protobuf:"bytes,6,opt,name=timeout_time_left,json=timeoutTimeLeft" json:"timeout_time_left,omitempty"`
	OnPositiveHalf          *bool             `protobuf:"varint,7,opt,name=on_positive_half,json=onPositiveHalf" json:"on_positive_half,omitempty"`
	BallPlacementFailures   *int32            `protobuf:"varint,8,opt,name=ball_placement_failures,json=ballPlacementFailures" json:"ball_placement_failures,omitempty"`
	CanPlaceBall            *bool             `protobuf:"varint,9,opt,name=can_place_ball,json=canPlaceBall" json:"can_place_ball,omitempty"`
	ChallengeFlags          *int32            `protobuf:"varint,21,opt,name=challenge_flags,json=challengeFlags" json:"challenge_flags,omitempty"`
	RequestsBotSubstitution *bool             `protobuf:"varint,10,opt,name=requests_bot_substitution,json=requestsBotSubstitution" json:"requests_bot_substitution,omitempty"`
	RequestsTimeout         *bool             `protobuf:"varint,17,opt,name=requests_timeout,json=requestsTimeout" json:"requests_timeout,omitempty"`
	RequestsChallenge       *bool             `protobuf:"varint,18,opt,name=requests_challenge,json=requestsChallenge" json:"requests_challenge,omitempty"`
	RequestsEmergencyStop   *bool             `protobuf:"varint,19,opt,name=requests_emergency_stop,json=requestsEmergencyStop" json:"requests_emergency_stop,omitempty"`
	YellowCard              *state.YellowCard `protobuf:"bytes,20,opt,name=yellow_card,json=yellowCard" json:"yellow_card,omitempty"`
	RedCard                 *state.RedCard    `protobuf:"bytes,12,opt,name=red_card,json=redCard" json:"red_card,omitempty"`
	Foul                    *state.Foul       `protobuf:"bytes,13,opt,name=foul" json:"foul,omitempty"`
	RemoveYellowCard        *uint32           `protobuf:"varint,14,opt,name=remove_yellow_card,json=removeYellowCard" json:"remove_yellow_card,omitempty"`
	RemoveRedCard           *uint32           `protobuf:"varint,15,opt,name=remove_red_card,json=removeRedCard" json:"remove_red_card,omitempty"`
	RemoveFoul              *uint32           `protobuf:"varint,16,opt,name=remove_foul,json=removeFoul" json:"remove_foul,omitempty"`
}

func (x *UpdateTeamState) Reset() {
	*x = UpdateTeamState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamState) ProtoMessage() {}

func (x *UpdateTeamState) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamState.ProtoReflect.Descriptor instead.
func (*UpdateTeamState) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateTeamState) GetForTeam() state.SSL_Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.SSL_Team_UNKNOWN
}

func (x *UpdateTeamState) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *UpdateTeamState) GetGoals() int32 {
	if x != nil && x.Goals != nil {
		return *x.Goals
	}
	return 0
}

func (x *UpdateTeamState) GetGoalkeeper() int32 {
	if x != nil && x.Goalkeeper != nil {
		return *x.Goalkeeper
	}
	return 0
}

func (x *UpdateTeamState) GetTimeoutsLeft() int32 {
	if x != nil && x.TimeoutsLeft != nil {
		return *x.TimeoutsLeft
	}
	return 0
}

func (x *UpdateTeamState) GetTimeoutTimeLeft() string {
	if x != nil && x.TimeoutTimeLeft != nil {
		return *x.TimeoutTimeLeft
	}
	return ""
}

func (x *UpdateTeamState) GetOnPositiveHalf() bool {
	if x != nil && x.OnPositiveHalf != nil {
		return *x.OnPositiveHalf
	}
	return false
}

func (x *UpdateTeamState) GetBallPlacementFailures() int32 {
	if x != nil && x.BallPlacementFailures != nil {
		return *x.BallPlacementFailures
	}
	return 0
}

func (x *UpdateTeamState) GetCanPlaceBall() bool {
	if x != nil && x.CanPlaceBall != nil {
		return *x.CanPlaceBall
	}
	return false
}

func (x *UpdateTeamState) GetChallengeFlags() int32 {
	if x != nil && x.ChallengeFlags != nil {
		return *x.ChallengeFlags
	}
	return 0
}

func (x *UpdateTeamState) GetRequestsBotSubstitution() bool {
	if x != nil && x.RequestsBotSubstitution != nil {
		return *x.RequestsBotSubstitution
	}
	return false
}

func (x *UpdateTeamState) GetRequestsTimeout() bool {
	if x != nil && x.RequestsTimeout != nil {
		return *x.RequestsTimeout
	}
	return false
}

func (x *UpdateTeamState) GetRequestsChallenge() bool {
	if x != nil && x.RequestsChallenge != nil {
		return *x.RequestsChallenge
	}
	return false
}

func (x *UpdateTeamState) GetRequestsEmergencyStop() bool {
	if x != nil && x.RequestsEmergencyStop != nil {
		return *x.RequestsEmergencyStop
	}
	return false
}

func (x *UpdateTeamState) GetYellowCard() *state.YellowCard {
	if x != nil {
		return x.YellowCard
	}
	return nil
}

func (x *UpdateTeamState) GetRedCard() *state.RedCard {
	if x != nil {
		return x.RedCard
	}
	return nil
}

func (x *UpdateTeamState) GetFoul() *state.Foul {
	if x != nil {
		return x.Foul
	}
	return nil
}

func (x *UpdateTeamState) GetRemoveYellowCard() uint32 {
	if x != nil && x.RemoveYellowCard != nil {
		return *x.RemoveYellowCard
	}
	return 0
}

func (x *UpdateTeamState) GetRemoveRedCard() uint32 {
	if x != nil && x.RemoveRedCard != nil {
		return *x.RemoveRedCard
	}
	return 0
}

func (x *UpdateTeamState) GetRemoveFoul() uint32 {
	if x != nil && x.RemoveFoul != nil {
		return *x.RemoveFoul
	}
	return 0
}

type SwitchColors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchColors) Reset() {
	*x = SwitchColors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchColors) ProtoMessage() {}

func (x *SwitchColors) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchColors.ProtoReflect.Descriptor instead.
func (*SwitchColors) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{16}
}

type Revert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeId *int32 `protobuf:"varint,1,opt,name=change_id,json=changeId" json:"change_id,omitempty"`
}

func (x *Revert) Reset() {
	*x = Revert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Revert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revert) ProtoMessage() {}

func (x *Revert) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revert.ProtoReflect.Descriptor instead.
func (*Revert) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{17}
}

func (x *Revert) GetChangeId() int32 {
	if x != nil && x.ChangeId != nil {
		return *x.ChangeId
	}
	return 0
}

type NewGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameState *state.GameState `protobuf:"bytes,1,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
}

func (x *NewGameState) Reset() {
	*x = NewGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_change_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGameState) ProtoMessage() {}

func (x *NewGameState) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_change_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGameState.ProtoReflect.Descriptor instead.
func (*NewGameState) Descriptor() ([]byte, []int) {
	return file_ssl_gc_change_proto_rawDescGZIP(), []int{18}
}

func (x *NewGameState) GetGameState() *state.GameState {
	if x != nil {
		return x.GameState
	}
	return nil
}

var File_ssl_gc_change_proto protoreflect.FileDescriptor

var file_ssl_gc_change_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9d, 0x08, 0x0a, 0x06,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4b, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x38,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x64, 0x64, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x10, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x16, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x47, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12,
	0x34, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x35,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3a, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73,
	0x12, 0x1a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x72, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x6f, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x09, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x36, 0x0a, 0x0e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x39, 0x0a, 0x0c, 0x41, 0x64, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x51, 0x0a, 0x13,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x12, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x22, 0xbf, 0x06, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x53, 0x53, 0x4c, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x12,
	0x36, 0x0a, 0x17, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x66, 0x6f, 0x75, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x6f, 0x75, 0x6c, 0x52, 0x04, 0x66, 0x6f,
	0x75, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x66, 0x6f, 0x75, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x75, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x25, 0x0a, 0x06, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f, 0x43, 0x75,
	0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65,
}

var (
	file_ssl_gc_change_proto_rawDescOnce sync.Once
	file_ssl_gc_change_proto_rawDescData = file_ssl_gc_change_proto_rawDesc
)

func file_ssl_gc_change_proto_rawDescGZIP() []byte {
	file_ssl_gc_change_proto_rawDescOnce.Do(func() {
		file_ssl_gc_change_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_gc_change_proto_rawDescData)
	})
	return file_ssl_gc_change_proto_rawDescData
}

var file_ssl_gc_change_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ssl_gc_change_proto_goTypes = []interface{}{
	(*StateChange)(nil),         // 0: StateChange
	(*Change)(nil),              // 1: Change
	(*NewCommand)(nil),          // 2: NewCommand
	(*ChangeStage)(nil),         // 3: ChangeStage
	(*SetBallPlacementPos)(nil), // 4: SetBallPlacementPos
	(*AddYellowCard)(nil),       // 5: AddYellowCard
	(*AddRedCard)(nil),          // 6: AddRedCard
	(*YellowCardOver)(nil),      // 7: YellowCardOver
	(*AddGameEvent)(nil),        // 8: AddGameEvent
	(*AddPassiveGameEvent)(nil), // 9: AddPassiveGameEvent
	(*AddProposal)(nil),         // 10: AddProposal
	(*AcceptProposalGroup)(nil), // 11: AcceptProposalGroup
	(*StartBallPlacement)(nil),  // 12: StartBallPlacement
	(*Continue)(nil),            // 13: Continue
	(*UpdateConfig)(nil),        // 14: UpdateConfig
	(*UpdateTeamState)(nil),     // 15: UpdateTeamState
	(*SwitchColors)(nil),        // 16: SwitchColors
	(*Revert)(nil),              // 17: Revert
	(*NewGameState)(nil),        // 18: NewGameState
	(*state.State)(nil),         // 19: State
	(*timestamp.Timestamp)(nil), // 20: google.protobuf.Timestamp
	(*state.Command)(nil),       // 21: Command
	(state.Referee_Stage)(0),    // 22: Referee.Stage
	(*geom.Vector2)(nil),        // 23: Vector2
	(state.SSL_Team)(0),         // 24: SSL_Team
	(*state.GameEvent)(nil),     // 25: GameEvent
	(*state.Proposal)(nil),      // 26: Proposal
	(state.Division)(0),         // 27: Division
	(*state.YellowCard)(nil),    // 28: YellowCard
	(*state.RedCard)(nil),       // 29: RedCard
	(*state.Foul)(nil),          // 30: Foul
	(*state.GameState)(nil),     // 31: GameState
}
var file_ssl_gc_change_proto_depIdxs = []int32{
	19, // 0: StateChange.state_pre:type_name -> State
	19, // 1: StateChange.state:type_name -> State
	1,  // 2: StateChange.change:type_name -> Change
	20, // 3: StateChange.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 4: Change.new_command:type_name -> NewCommand
	3,  // 5: Change.change_stage:type_name -> ChangeStage
	4,  // 6: Change.set_ball_placement_pos:type_name -> SetBallPlacementPos
	5,  // 7: Change.add_yellow_card:type_name -> AddYellowCard
	6,  // 8: Change.add_red_card:type_name -> AddRedCard
	7,  // 9: Change.yellow_card_over:type_name -> YellowCardOver
	8,  // 10: Change.add_game_event:type_name -> AddGameEvent
	9,  // 11: Change.add_passive_game_event:type_name -> AddPassiveGameEvent
	10, // 12: Change.add_proposal:type_name -> AddProposal
	12, // 13: Change.start_ball_placement:type_name -> StartBallPlacement
	13, // 14: Change.continue:type_name -> Continue
	14, // 15: Change.update_config:type_name -> UpdateConfig
	15, // 16: Change.update_team_state:type_name -> UpdateTeamState
	16, // 17: Change.switch_colors:type_name -> SwitchColors
	17, // 18: Change.revert:type_name -> Revert
	18, // 19: Change.new_game_state:type_name -> NewGameState
	11, // 20: Change.accept_proposal_group:type_name -> AcceptProposalGroup
	21, // 21: NewCommand.command:type_name -> Command
	22, // 22: ChangeStage.new_stage:type_name -> Referee.Stage
	23, // 23: SetBallPlacementPos.pos:type_name -> Vector2
	24, // 24: AddYellowCard.for_team:type_name -> SSL_Team
	25, // 25: AddYellowCard.caused_by_game_event:type_name -> GameEvent
	24, // 26: AddRedCard.for_team:type_name -> SSL_Team
	25, // 27: AddRedCard.caused_by_game_event:type_name -> GameEvent
	24, // 28: YellowCardOver.for_team:type_name -> SSL_Team
	25, // 29: AddGameEvent.game_event:type_name -> GameEvent
	25, // 30: AddPassiveGameEvent.game_event:type_name -> GameEvent
	26, // 31: AddProposal.proposal:type_name -> Proposal
	27, // 32: UpdateConfig.division:type_name -> Division
	24, // 33: UpdateConfig.first_kickoff_team:type_name -> SSL_Team
	24, // 34: UpdateTeamState.for_team:type_name -> SSL_Team
	28, // 35: UpdateTeamState.yellow_card:type_name -> YellowCard
	29, // 36: UpdateTeamState.red_card:type_name -> RedCard
	30, // 37: UpdateTeamState.foul:type_name -> Foul
	31, // 38: NewGameState.game_state:type_name -> GameState
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_ssl_gc_change_proto_init() }
func file_ssl_gc_change_proto_init() {
	if File_ssl_gc_change_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssl_gc_change_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBallPlacementPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddYellowCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YellowCardOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPassiveGameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptProposalGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBallPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Continue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeamState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchColors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Revert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_change_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ssl_gc_change_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Change_NewCommand)(nil),
		(*Change_ChangeStage)(nil),
		(*Change_SetBallPlacementPos)(nil),
		(*Change_AddYellowCard)(nil),
		(*Change_AddRedCard)(nil),
		(*Change_YellowCardOver)(nil),
		(*Change_AddGameEvent)(nil),
		(*Change_AddPassiveGameEvent)(nil),
		(*Change_AddProposal)(nil),
		(*Change_StartBallPlacement)(nil),
		(*Change_Continue)(nil),
		(*Change_UpdateConfig)(nil),
		(*Change_UpdateTeamState)(nil),
		(*Change_SwitchColors)(nil),
		(*Change_Revert)(nil),
		(*Change_NewGameState)(nil),
		(*Change_AcceptProposalGroup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_gc_change_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_gc_change_proto_goTypes,
		DependencyIndexes: file_ssl_gc_change_proto_depIdxs,
		MessageInfos:      file_ssl_gc_change_proto_msgTypes,
	}.Build()
	File_ssl_gc_change_proto = out.File
	file_ssl_gc_change_proto_rawDesc = nil
	file_ssl_gc_change_proto_goTypes = nil
	file_ssl_gc_change_proto_depIdxs = nil
}
