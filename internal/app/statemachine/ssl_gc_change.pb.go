// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: statemachine/ssl_gc_change.proto

package statemachine

import (
	geom "github.com/RoboCup-SSL/ssl-game-controller/internal/app/geom"
	state "github.com/RoboCup-SSL/ssl-game-controller/internal/app/state"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A state change
type StateChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique increasing id
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The previous state
	StatePre *state.State `protobuf:"bytes,2,opt,name=state_pre,json=statePre" json:"state_pre,omitempty"`
	// The state after the change was applied
	State *state.State `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	// The change itself
	Change *Change `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
	// The timestamp when the change was triggered
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateChange) Reset() {
	*x = StateChange{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChange) ProtoMessage() {}

func (x *StateChange) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChange.ProtoReflect.Descriptor instead.
func (*StateChange) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{0}
}

func (x *StateChange) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StateChange) GetStatePre() *state.State {
	if x != nil {
		return x.StatePre
	}
	return nil
}

func (x *StateChange) GetState() *state.State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *StateChange) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *StateChange) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// A certain change
type Change struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier of the origin that triggered the change
	Origin *string `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	// Is this change revertible?
	Revertible *bool `protobuf:"varint,16,opt,name=revertible" json:"revertible,omitempty"`
	// Types that are valid to be assigned to Change:
	//
	//	*Change_NewCommandChange
	//	*Change_ChangeStageChange
	//	*Change_SetBallPlacementPosChange
	//	*Change_AddYellowCardChange
	//	*Change_AddRedCardChange
	//	*Change_YellowCardOverChange
	//	*Change_AddGameEventChange
	//	*Change_AddPassiveGameEventChange
	//	*Change_AddProposalChange
	//	*Change_UpdateConfigChange
	//	*Change_UpdateTeamStateChange
	//	*Change_SwitchColorsChange
	//	*Change_RevertChange
	//	*Change_NewGameStateChange
	//	*Change_AcceptProposalGroupChange
	//	*Change_SetStatusMessageChange
	Change        isChange_Change `protobuf_oneof:"change"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change) Reset() {
	*x = Change{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1}
}

func (x *Change) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *Change) GetRevertible() bool {
	if x != nil && x.Revertible != nil {
		return *x.Revertible
	}
	return false
}

func (x *Change) GetChange() isChange_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Change) GetNewCommandChange() *Change_NewCommand {
	if x != nil {
		if x, ok := x.Change.(*Change_NewCommandChange); ok {
			return x.NewCommandChange
		}
	}
	return nil
}

func (x *Change) GetChangeStageChange() *Change_ChangeStage {
	if x != nil {
		if x, ok := x.Change.(*Change_ChangeStageChange); ok {
			return x.ChangeStageChange
		}
	}
	return nil
}

func (x *Change) GetSetBallPlacementPosChange() *Change_SetBallPlacementPos {
	if x != nil {
		if x, ok := x.Change.(*Change_SetBallPlacementPosChange); ok {
			return x.SetBallPlacementPosChange
		}
	}
	return nil
}

func (x *Change) GetAddYellowCardChange() *Change_AddYellowCard {
	if x != nil {
		if x, ok := x.Change.(*Change_AddYellowCardChange); ok {
			return x.AddYellowCardChange
		}
	}
	return nil
}

func (x *Change) GetAddRedCardChange() *Change_AddRedCard {
	if x != nil {
		if x, ok := x.Change.(*Change_AddRedCardChange); ok {
			return x.AddRedCardChange
		}
	}
	return nil
}

func (x *Change) GetYellowCardOverChange() *Change_YellowCardOver {
	if x != nil {
		if x, ok := x.Change.(*Change_YellowCardOverChange); ok {
			return x.YellowCardOverChange
		}
	}
	return nil
}

func (x *Change) GetAddGameEventChange() *Change_AddGameEvent {
	if x != nil {
		if x, ok := x.Change.(*Change_AddGameEventChange); ok {
			return x.AddGameEventChange
		}
	}
	return nil
}

func (x *Change) GetAddPassiveGameEventChange() *Change_AddPassiveGameEvent {
	if x != nil {
		if x, ok := x.Change.(*Change_AddPassiveGameEventChange); ok {
			return x.AddPassiveGameEventChange
		}
	}
	return nil
}

func (x *Change) GetAddProposalChange() *Change_AddProposal {
	if x != nil {
		if x, ok := x.Change.(*Change_AddProposalChange); ok {
			return x.AddProposalChange
		}
	}
	return nil
}

func (x *Change) GetUpdateConfigChange() *Change_UpdateConfig {
	if x != nil {
		if x, ok := x.Change.(*Change_UpdateConfigChange); ok {
			return x.UpdateConfigChange
		}
	}
	return nil
}

func (x *Change) GetUpdateTeamStateChange() *Change_UpdateTeamState {
	if x != nil {
		if x, ok := x.Change.(*Change_UpdateTeamStateChange); ok {
			return x.UpdateTeamStateChange
		}
	}
	return nil
}

func (x *Change) GetSwitchColorsChange() *Change_SwitchColors {
	if x != nil {
		if x, ok := x.Change.(*Change_SwitchColorsChange); ok {
			return x.SwitchColorsChange
		}
	}
	return nil
}

func (x *Change) GetRevertChange() *Change_Revert {
	if x != nil {
		if x, ok := x.Change.(*Change_RevertChange); ok {
			return x.RevertChange
		}
	}
	return nil
}

func (x *Change) GetNewGameStateChange() *Change_NewGameState {
	if x != nil {
		if x, ok := x.Change.(*Change_NewGameStateChange); ok {
			return x.NewGameStateChange
		}
	}
	return nil
}

func (x *Change) GetAcceptProposalGroupChange() *Change_AcceptProposalGroup {
	if x != nil {
		if x, ok := x.Change.(*Change_AcceptProposalGroupChange); ok {
			return x.AcceptProposalGroupChange
		}
	}
	return nil
}

func (x *Change) GetSetStatusMessageChange() *Change_SetStatusMessage {
	if x != nil {
		if x, ok := x.Change.(*Change_SetStatusMessageChange); ok {
			return x.SetStatusMessageChange
		}
	}
	return nil
}

type isChange_Change interface {
	isChange_Change()
}

type Change_NewCommandChange struct {
	NewCommandChange *Change_NewCommand `protobuf:"bytes,2,opt,name=new_command_change,json=newCommandChange,oneof"`
}

type Change_ChangeStageChange struct {
	ChangeStageChange *Change_ChangeStage `protobuf:"bytes,3,opt,name=change_stage_change,json=changeStageChange,oneof"`
}

type Change_SetBallPlacementPosChange struct {
	SetBallPlacementPosChange *Change_SetBallPlacementPos `protobuf:"bytes,4,opt,name=set_ball_placement_pos_change,json=setBallPlacementPosChange,oneof"`
}

type Change_AddYellowCardChange struct {
	AddYellowCardChange *Change_AddYellowCard `protobuf:"bytes,5,opt,name=add_yellow_card_change,json=addYellowCardChange,oneof"`
}

type Change_AddRedCardChange struct {
	AddRedCardChange *Change_AddRedCard `protobuf:"bytes,6,opt,name=add_red_card_change,json=addRedCardChange,oneof"`
}

type Change_YellowCardOverChange struct {
	YellowCardOverChange *Change_YellowCardOver `protobuf:"bytes,7,opt,name=yellow_card_over_change,json=yellowCardOverChange,oneof"`
}

type Change_AddGameEventChange struct {
	AddGameEventChange *Change_AddGameEvent `protobuf:"bytes,8,opt,name=add_game_event_change,json=addGameEventChange,oneof"`
}

type Change_AddPassiveGameEventChange struct {
	AddPassiveGameEventChange *Change_AddPassiveGameEvent `protobuf:"bytes,19,opt,name=add_passive_game_event_change,json=addPassiveGameEventChange,oneof"`
}

type Change_AddProposalChange struct {
	AddProposalChange *Change_AddProposal `protobuf:"bytes,9,opt,name=add_proposal_change,json=addProposalChange,oneof"`
}

type Change_UpdateConfigChange struct {
	UpdateConfigChange *Change_UpdateConfig `protobuf:"bytes,12,opt,name=update_config_change,json=updateConfigChange,oneof"`
}

type Change_UpdateTeamStateChange struct {
	UpdateTeamStateChange *Change_UpdateTeamState `protobuf:"bytes,13,opt,name=update_team_state_change,json=updateTeamStateChange,oneof"`
}

type Change_SwitchColorsChange struct {
	SwitchColorsChange *Change_SwitchColors `protobuf:"bytes,14,opt,name=switch_colors_change,json=switchColorsChange,oneof"`
}

type Change_RevertChange struct {
	RevertChange *Change_Revert `protobuf:"bytes,15,opt,name=revert_change,json=revertChange,oneof"`
}

type Change_NewGameStateChange struct {
	NewGameStateChange *Change_NewGameState `protobuf:"bytes,17,opt,name=new_game_state_change,json=newGameStateChange,oneof"`
}

type Change_AcceptProposalGroupChange struct {
	AcceptProposalGroupChange *Change_AcceptProposalGroup `protobuf:"bytes,18,opt,name=accept_proposal_group_change,json=acceptProposalGroupChange,oneof"`
}

type Change_SetStatusMessageChange struct {
	SetStatusMessageChange *Change_SetStatusMessage `protobuf:"bytes,20,opt,name=set_status_message_change,json=setStatusMessageChange,oneof"`
}

func (*Change_NewCommandChange) isChange_Change() {}

func (*Change_ChangeStageChange) isChange_Change() {}

func (*Change_SetBallPlacementPosChange) isChange_Change() {}

func (*Change_AddYellowCardChange) isChange_Change() {}

func (*Change_AddRedCardChange) isChange_Change() {}

func (*Change_YellowCardOverChange) isChange_Change() {}

func (*Change_AddGameEventChange) isChange_Change() {}

func (*Change_AddPassiveGameEventChange) isChange_Change() {}

func (*Change_AddProposalChange) isChange_Change() {}

func (*Change_UpdateConfigChange) isChange_Change() {}

func (*Change_UpdateTeamStateChange) isChange_Change() {}

func (*Change_SwitchColorsChange) isChange_Change() {}

func (*Change_RevertChange) isChange_Change() {}

func (*Change_NewGameStateChange) isChange_Change() {}

func (*Change_AcceptProposalGroupChange) isChange_Change() {}

func (*Change_SetStatusMessageChange) isChange_Change() {}

// New referee command
type Change_NewCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The command
	Command       *state.Command `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_NewCommand) Reset() {
	*x = Change_NewCommand{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_NewCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_NewCommand) ProtoMessage() {}

func (x *Change_NewCommand) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_NewCommand.ProtoReflect.Descriptor instead.
func (*Change_NewCommand) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Change_NewCommand) GetCommand() *state.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

// Switch to a new stage
type Change_ChangeStage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The new stage
	NewStage      *state.Referee_Stage `protobuf:"varint,1,opt,name=new_stage,json=newStage,enum=Referee_Stage" json:"new_stage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_ChangeStage) Reset() {
	*x = Change_ChangeStage{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_ChangeStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_ChangeStage) ProtoMessage() {}

func (x *Change_ChangeStage) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_ChangeStage.ProtoReflect.Descriptor instead.
func (*Change_ChangeStage) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Change_ChangeStage) GetNewStage() state.Referee_Stage {
	if x != nil && x.NewStage != nil {
		return *x.NewStage
	}
	return state.Referee_Stage(0)
}

// Set the ball placement pos
type Change_SetBallPlacementPos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The position in [m]
	Pos           *geom.Vector2 `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_SetBallPlacementPos) Reset() {
	*x = Change_SetBallPlacementPos{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_SetBallPlacementPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_SetBallPlacementPos) ProtoMessage() {}

func (x *Change_SetBallPlacementPos) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_SetBallPlacementPos.ProtoReflect.Descriptor instead.
func (*Change_SetBallPlacementPos) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Change_SetBallPlacementPos) GetPos() *geom.Vector2 {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Add a new yellow card
type Change_AddYellowCard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The team that the card is for
	ForTeam *state.Team `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
	// The game event that caused the card
	CausedByGameEvent *state.GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Change_AddYellowCard) Reset() {
	*x = Change_AddYellowCard{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_AddYellowCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_AddYellowCard) ProtoMessage() {}

func (x *Change_AddYellowCard) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_AddYellowCard.ProtoReflect.Descriptor instead.
func (*Change_AddYellowCard) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Change_AddYellowCard) GetForTeam() state.Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.Team(0)
}

func (x *Change_AddYellowCard) GetCausedByGameEvent() *state.GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

// Add a new red card
type Change_AddRedCard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The team that the card is for
	ForTeam *state.Team `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
	// The game event that caused the card
	CausedByGameEvent *state.GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Change_AddRedCard) Reset() {
	*x = Change_AddRedCard{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_AddRedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_AddRedCard) ProtoMessage() {}

func (x *Change_AddRedCard) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_AddRedCard.ProtoReflect.Descriptor instead.
func (*Change_AddRedCard) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Change_AddRedCard) GetForTeam() state.Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.Team(0)
}

func (x *Change_AddRedCard) GetCausedByGameEvent() *state.GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

// Trigger when a yellow card timed out
type Change_YellowCardOver struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The team that the card was for
	ForTeam       *state.Team `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_YellowCardOver) Reset() {
	*x = Change_YellowCardOver{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_YellowCardOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_YellowCardOver) ProtoMessage() {}

func (x *Change_YellowCardOver) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_YellowCardOver.ProtoReflect.Descriptor instead.
func (*Change_YellowCardOver) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Change_YellowCardOver) GetForTeam() state.Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.Team(0)
}

// Add a new game event
type Change_AddGameEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The game event
	GameEvent     *state.GameEvent `protobuf:"bytes,1,opt,name=game_event,json=gameEvent" json:"game_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_AddGameEvent) Reset() {
	*x = Change_AddGameEvent{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_AddGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_AddGameEvent) ProtoMessage() {}

func (x *Change_AddGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_AddGameEvent.ProtoReflect.Descriptor instead.
func (*Change_AddGameEvent) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Change_AddGameEvent) GetGameEvent() *state.GameEvent {
	if x != nil {
		return x.GameEvent
	}
	return nil
}

// Add a new passive game event (that is only logged, but does not automatically trigger anything)
type Change_AddPassiveGameEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The game event
	GameEvent     *state.GameEvent `protobuf:"bytes,1,opt,name=game_event,json=gameEvent" json:"game_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_AddPassiveGameEvent) Reset() {
	*x = Change_AddPassiveGameEvent{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_AddPassiveGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_AddPassiveGameEvent) ProtoMessage() {}

func (x *Change_AddPassiveGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_AddPassiveGameEvent.ProtoReflect.Descriptor instead.
func (*Change_AddPassiveGameEvent) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Change_AddPassiveGameEvent) GetGameEvent() *state.GameEvent {
	if x != nil {
		return x.GameEvent
	}
	return nil
}

// Add a new proposal (i.e. from an auto referee for majority voting)
type Change_AddProposal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The proposal
	Proposal      *state.Proposal `protobuf:"bytes,1,opt,name=proposal" json:"proposal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_AddProposal) Reset() {
	*x = Change_AddProposal{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_AddProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_AddProposal) ProtoMessage() {}

func (x *Change_AddProposal) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_AddProposal.ProtoReflect.Descriptor instead.
func (*Change_AddProposal) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 8}
}

func (x *Change_AddProposal) GetProposal() *state.Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

// Accept a proposal group (that contain one or more proposals of the same type)
type Change_AcceptProposalGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the group
	GroupId *string `protobuf:"bytes,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// An identifier of the acceptor
	AcceptedBy    *string `protobuf:"bytes,2,opt,name=accepted_by,json=acceptedBy" json:"accepted_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_AcceptProposalGroup) Reset() {
	*x = Change_AcceptProposalGroup{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_AcceptProposalGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_AcceptProposalGroup) ProtoMessage() {}

func (x *Change_AcceptProposalGroup) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_AcceptProposalGroup.ProtoReflect.Descriptor instead.
func (*Change_AcceptProposalGroup) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 9}
}

func (x *Change_AcceptProposalGroup) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *Change_AcceptProposalGroup) GetAcceptedBy() string {
	if x != nil && x.AcceptedBy != nil {
		return *x.AcceptedBy
	}
	return ""
}

// Update some configuration
type Change_UpdateConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The division to play with
	Division *state.Division `protobuf:"varint,1,opt,name=division,enum=Division" json:"division,omitempty"`
	// the team that does/did the first kick off
	FirstKickoffTeam *state.Team `protobuf:"varint,2,opt,name=first_kickoff_team,json=firstKickoffTeam,enum=Team" json:"first_kickoff_team,omitempty"`
	// The match type
	MatchType *state.MatchType `protobuf:"varint,4,opt,name=match_type,json=matchType,enum=MatchType" json:"match_type,omitempty"`
	// The number of robots per team
	MaxRobotsPerTeam *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=max_robots_per_team,json=maxRobotsPerTeam" json:"max_robots_per_team,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Change_UpdateConfig) Reset() {
	*x = Change_UpdateConfig{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_UpdateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_UpdateConfig) ProtoMessage() {}

func (x *Change_UpdateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_UpdateConfig.ProtoReflect.Descriptor instead.
func (*Change_UpdateConfig) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 10}
}

func (x *Change_UpdateConfig) GetDivision() state.Division {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return state.Division(0)
}

func (x *Change_UpdateConfig) GetFirstKickoffTeam() state.Team {
	if x != nil && x.FirstKickoffTeam != nil {
		return *x.FirstKickoffTeam
	}
	return state.Team(0)
}

func (x *Change_UpdateConfig) GetMatchType() state.MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return state.MatchType(0)
}

func (x *Change_UpdateConfig) GetMaxRobotsPerTeam() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxRobotsPerTeam
	}
	return nil
}

// Update the current state of a team (all fields that should be updated are set)
type Change_UpdateTeamState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The team
	ForTeam *state.Team `protobuf:"varint,1,opt,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
	// Change the name of the team
	TeamName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	// Change the number of goals that the teams has at the moment
	Goals *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=goals" json:"goals,omitempty"`
	// The id of the goal keeper
	Goalkeeper *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=goalkeeper" json:"goalkeeper,omitempty"`
	// The number of timeouts that the team has left
	TimeoutsLeft *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=timeouts_left,json=timeoutsLeft" json:"timeouts_left,omitempty"`
	// The timeout time that the team has left
	TimeoutTimeLeft *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=timeout_time_left,json=timeoutTimeLeft" json:"timeout_time_left,omitempty"`
	// Does the team play on the positive or the negative half (in ssl-vision coordinates)?
	OnPositiveHalf *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=on_positive_half,json=onPositiveHalf" json:"on_positive_half,omitempty"`
	// The number of ball placement failures
	BallPlacementFailures *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=ball_placement_failures,json=ballPlacementFailures" json:"ball_placement_failures,omitempty"`
	// Can the team place the ball, or is ball placement for this team disabled and should be skipped?
	CanPlaceBall *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=can_place_ball,json=canPlaceBall" json:"can_place_ball,omitempty"`
	// The number of challenge flags that the team has left
	ChallengeFlagsLeft *wrapperspb.Int32Value `protobuf:"bytes,21,opt,name=challenge_flags_left,json=challengeFlagsLeft" json:"challenge_flags_left,omitempty"`
	// The number of bot substitutions left by the team in this halftime
	BotSubstitutionsLeft *wrapperspb.Int32Value `protobuf:"bytes,22,opt,name=bot_substitutions_left,json=botSubstitutionsLeft" json:"bot_substitutions_left,omitempty"`
	// Does the team want to substitute a robot in the next possible situation?
	RequestsBotSubstitution *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=requests_bot_substitution,json=requestsBotSubstitution" json:"requests_bot_substitution,omitempty"`
	// Does the team want to take a timeout in the next possible situation?
	RequestsTimeout *wrapperspb.BoolValue `protobuf:"bytes,17,opt,name=requests_timeout,json=requestsTimeout" json:"requests_timeout,omitempty"`
	// Does the team want to challenge a recent decision of the referee?
	RequestsChallenge *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=requests_challenge,json=requestsChallenge" json:"requests_challenge,omitempty"`
	// Does the team want to request an emergency stop?
	RequestsEmergencyStop *wrapperspb.BoolValue `protobuf:"bytes,19,opt,name=requests_emergency_stop,json=requestsEmergencyStop" json:"requests_emergency_stop,omitempty"`
	// Update a certain yellow card of the team
	YellowCard *state.YellowCard `protobuf:"bytes,20,opt,name=yellow_card,json=yellowCard" json:"yellow_card,omitempty"`
	// Update a certain red card of the team
	RedCard *state.RedCard `protobuf:"bytes,12,opt,name=red_card,json=redCard" json:"red_card,omitempty"`
	// Update a certain foul of the team
	Foul *state.Foul `protobuf:"bytes,13,opt,name=foul" json:"foul,omitempty"`
	// Remove the yellow card with this id
	RemoveYellowCard *wrapperspb.UInt32Value `protobuf:"bytes,14,opt,name=remove_yellow_card,json=removeYellowCard" json:"remove_yellow_card,omitempty"`
	// Remove the red card with this id
	RemoveRedCard *wrapperspb.UInt32Value `protobuf:"bytes,15,opt,name=remove_red_card,json=removeRedCard" json:"remove_red_card,omitempty"`
	// Remove the foul with this id
	RemoveFoul *wrapperspb.UInt32Value `protobuf:"bytes,16,opt,name=remove_foul,json=removeFoul" json:"remove_foul,omitempty"`
	// The color of the hull
	HullColor     *state.HullColor `protobuf:"varint,23,opt,name=hull_color,json=hullColor,enum=HullColor" json:"hull_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_UpdateTeamState) Reset() {
	*x = Change_UpdateTeamState{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_UpdateTeamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_UpdateTeamState) ProtoMessage() {}

func (x *Change_UpdateTeamState) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_UpdateTeamState.ProtoReflect.Descriptor instead.
func (*Change_UpdateTeamState) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 11}
}

func (x *Change_UpdateTeamState) GetForTeam() state.Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return state.Team(0)
}

func (x *Change_UpdateTeamState) GetTeamName() *wrapperspb.StringValue {
	if x != nil {
		return x.TeamName
	}
	return nil
}

func (x *Change_UpdateTeamState) GetGoals() *wrapperspb.Int32Value {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *Change_UpdateTeamState) GetGoalkeeper() *wrapperspb.Int32Value {
	if x != nil {
		return x.Goalkeeper
	}
	return nil
}

func (x *Change_UpdateTeamState) GetTimeoutsLeft() *wrapperspb.Int32Value {
	if x != nil {
		return x.TimeoutsLeft
	}
	return nil
}

func (x *Change_UpdateTeamState) GetTimeoutTimeLeft() *wrapperspb.StringValue {
	if x != nil {
		return x.TimeoutTimeLeft
	}
	return nil
}

func (x *Change_UpdateTeamState) GetOnPositiveHalf() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnPositiveHalf
	}
	return nil
}

func (x *Change_UpdateTeamState) GetBallPlacementFailures() *wrapperspb.Int32Value {
	if x != nil {
		return x.BallPlacementFailures
	}
	return nil
}

func (x *Change_UpdateTeamState) GetCanPlaceBall() *wrapperspb.BoolValue {
	if x != nil {
		return x.CanPlaceBall
	}
	return nil
}

func (x *Change_UpdateTeamState) GetChallengeFlagsLeft() *wrapperspb.Int32Value {
	if x != nil {
		return x.ChallengeFlagsLeft
	}
	return nil
}

func (x *Change_UpdateTeamState) GetBotSubstitutionsLeft() *wrapperspb.Int32Value {
	if x != nil {
		return x.BotSubstitutionsLeft
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRequestsBotSubstitution() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequestsBotSubstitution
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRequestsTimeout() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequestsTimeout
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRequestsChallenge() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequestsChallenge
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRequestsEmergencyStop() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequestsEmergencyStop
	}
	return nil
}

func (x *Change_UpdateTeamState) GetYellowCard() *state.YellowCard {
	if x != nil {
		return x.YellowCard
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRedCard() *state.RedCard {
	if x != nil {
		return x.RedCard
	}
	return nil
}

func (x *Change_UpdateTeamState) GetFoul() *state.Foul {
	if x != nil {
		return x.Foul
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRemoveYellowCard() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RemoveYellowCard
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRemoveRedCard() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RemoveRedCard
	}
	return nil
}

func (x *Change_UpdateTeamState) GetRemoveFoul() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RemoveFoul
	}
	return nil
}

func (x *Change_UpdateTeamState) GetHullColor() state.HullColor {
	if x != nil && x.HullColor != nil {
		return *x.HullColor
	}
	return state.HullColor(0)
}

// Switch the team colors
type Change_SwitchColors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_SwitchColors) Reset() {
	*x = Change_SwitchColors{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_SwitchColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_SwitchColors) ProtoMessage() {}

func (x *Change_SwitchColors) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_SwitchColors.ProtoReflect.Descriptor instead.
func (*Change_SwitchColors) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 12}
}

// Revert a certain change
type Change_Revert struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the change
	ChangeId      *int32 `protobuf:"varint,1,opt,name=change_id,json=changeId" json:"change_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_Revert) Reset() {
	*x = Change_Revert{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_Revert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_Revert) ProtoMessage() {}

func (x *Change_Revert) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_Revert.ProtoReflect.Descriptor instead.
func (*Change_Revert) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 13}
}

func (x *Change_Revert) GetChangeId() int32 {
	if x != nil && x.ChangeId != nil {
		return *x.ChangeId
	}
	return 0
}

// Change the current game state
type Change_NewGameState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The new game state
	GameState     *state.GameState `protobuf:"bytes,1,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_NewGameState) Reset() {
	*x = Change_NewGameState{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_NewGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_NewGameState) ProtoMessage() {}

func (x *Change_NewGameState) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_NewGameState.ProtoReflect.Descriptor instead.
func (*Change_NewGameState) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 14}
}

func (x *Change_NewGameState) GetGameState() *state.GameState {
	if x != nil {
		return x.GameState
	}
	return nil
}

type Change_SetStatusMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The new status message
	StatusMessage *string `protobuf:"bytes,1,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change_SetStatusMessage) Reset() {
	*x = Change_SetStatusMessage{}
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change_SetStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change_SetStatusMessage) ProtoMessage() {}

func (x *Change_SetStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_statemachine_ssl_gc_change_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change_SetStatusMessage.ProtoReflect.Descriptor instead.
func (*Change_SetStatusMessage) Descriptor() ([]byte, []int) {
	return file_statemachine_ssl_gc_change_proto_rawDescGZIP(), []int{1, 15}
}

func (x *Change_SetStatusMessage) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

var File_statemachine_ssl_gc_change_proto protoreflect.FileDescriptor

var file_statemachine_ssl_gc_change_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x73,
	0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x65, 0x6f, 0x6d, 0x2f, 0x73, 0x73,
	0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x91, 0x1e, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x13,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x5f, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x13, 0x61,
	0x64, 0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x17, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x61, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x61, 0x64, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x6e, 0x65,
	0x77, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x19, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x30, 0x0a, 0x0a,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x3a,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x31, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x12, 0x1a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x1a, 0x6e, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x6b, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3b, 0x0a,
	0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x32, 0x0a, 0x0e, 0x59, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x39,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x40, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x34, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x1a, 0x51, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x1a, 0xe7, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x12,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x91,
	0x0b, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x6f, 0x61,
	0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x6c,
	0x66, 0x12, 0x53, 0x0a, 0x17, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x66,
	0x6f, 0x75, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x6f, 0x75, 0x6c,
	0x52, 0x04, 0x66, 0x6f, 0x75, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x66, 0x6f, 0x75, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x6f, 0x75, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x68, 0x75, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x48, 0x75,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x68, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x1a, 0x25, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0c, 0x4e, 0x65, 0x77,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x5a, 0x42, 0x10, 0x53, 0x73, 0x6c,
	0x47, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f,
	0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x61, 0x6d, 0x65,
	0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65,
}

var (
	file_statemachine_ssl_gc_change_proto_rawDescOnce sync.Once
	file_statemachine_ssl_gc_change_proto_rawDescData = file_statemachine_ssl_gc_change_proto_rawDesc
)

func file_statemachine_ssl_gc_change_proto_rawDescGZIP() []byte {
	file_statemachine_ssl_gc_change_proto_rawDescOnce.Do(func() {
		file_statemachine_ssl_gc_change_proto_rawDescData = protoimpl.X.CompressGZIP(file_statemachine_ssl_gc_change_proto_rawDescData)
	})
	return file_statemachine_ssl_gc_change_proto_rawDescData
}

var file_statemachine_ssl_gc_change_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_statemachine_ssl_gc_change_proto_goTypes = []any{
	(*StateChange)(nil),                // 0: StateChange
	(*Change)(nil),                     // 1: Change
	(*Change_NewCommand)(nil),          // 2: Change.NewCommand
	(*Change_ChangeStage)(nil),         // 3: Change.ChangeStage
	(*Change_SetBallPlacementPos)(nil), // 4: Change.SetBallPlacementPos
	(*Change_AddYellowCard)(nil),       // 5: Change.AddYellowCard
	(*Change_AddRedCard)(nil),          // 6: Change.AddRedCard
	(*Change_YellowCardOver)(nil),      // 7: Change.YellowCardOver
	(*Change_AddGameEvent)(nil),        // 8: Change.AddGameEvent
	(*Change_AddPassiveGameEvent)(nil), // 9: Change.AddPassiveGameEvent
	(*Change_AddProposal)(nil),         // 10: Change.AddProposal
	(*Change_AcceptProposalGroup)(nil), // 11: Change.AcceptProposalGroup
	(*Change_UpdateConfig)(nil),        // 12: Change.UpdateConfig
	(*Change_UpdateTeamState)(nil),     // 13: Change.UpdateTeamState
	(*Change_SwitchColors)(nil),        // 14: Change.SwitchColors
	(*Change_Revert)(nil),              // 15: Change.Revert
	(*Change_NewGameState)(nil),        // 16: Change.NewGameState
	(*Change_SetStatusMessage)(nil),    // 17: Change.SetStatusMessage
	(*state.State)(nil),                // 18: State
	(*timestamppb.Timestamp)(nil),      // 19: google.protobuf.Timestamp
	(*state.Command)(nil),              // 20: Command
	(state.Referee_Stage)(0),           // 21: Referee.Stage
	(*geom.Vector2)(nil),               // 22: Vector2
	(state.Team)(0),                    // 23: Team
	(*state.GameEvent)(nil),            // 24: GameEvent
	(*state.Proposal)(nil),             // 25: Proposal
	(state.Division)(0),                // 26: Division
	(state.MatchType)(0),               // 27: MatchType
	(*wrapperspb.Int32Value)(nil),      // 28: google.protobuf.Int32Value
	(*wrapperspb.StringValue)(nil),     // 29: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),       // 30: google.protobuf.BoolValue
	(*state.YellowCard)(nil),           // 31: YellowCard
	(*state.RedCard)(nil),              // 32: RedCard
	(*state.Foul)(nil),                 // 33: Foul
	(*wrapperspb.UInt32Value)(nil),     // 34: google.protobuf.UInt32Value
	(state.HullColor)(0),               // 35: HullColor
	(*state.GameState)(nil),            // 36: GameState
}
var file_statemachine_ssl_gc_change_proto_depIdxs = []int32{
	18, // 0: StateChange.state_pre:type_name -> State
	18, // 1: StateChange.state:type_name -> State
	1,  // 2: StateChange.change:type_name -> Change
	19, // 3: StateChange.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 4: Change.new_command_change:type_name -> Change.NewCommand
	3,  // 5: Change.change_stage_change:type_name -> Change.ChangeStage
	4,  // 6: Change.set_ball_placement_pos_change:type_name -> Change.SetBallPlacementPos
	5,  // 7: Change.add_yellow_card_change:type_name -> Change.AddYellowCard
	6,  // 8: Change.add_red_card_change:type_name -> Change.AddRedCard
	7,  // 9: Change.yellow_card_over_change:type_name -> Change.YellowCardOver
	8,  // 10: Change.add_game_event_change:type_name -> Change.AddGameEvent
	9,  // 11: Change.add_passive_game_event_change:type_name -> Change.AddPassiveGameEvent
	10, // 12: Change.add_proposal_change:type_name -> Change.AddProposal
	12, // 13: Change.update_config_change:type_name -> Change.UpdateConfig
	13, // 14: Change.update_team_state_change:type_name -> Change.UpdateTeamState
	14, // 15: Change.switch_colors_change:type_name -> Change.SwitchColors
	15, // 16: Change.revert_change:type_name -> Change.Revert
	16, // 17: Change.new_game_state_change:type_name -> Change.NewGameState
	11, // 18: Change.accept_proposal_group_change:type_name -> Change.AcceptProposalGroup
	17, // 19: Change.set_status_message_change:type_name -> Change.SetStatusMessage
	20, // 20: Change.NewCommand.command:type_name -> Command
	21, // 21: Change.ChangeStage.new_stage:type_name -> Referee.Stage
	22, // 22: Change.SetBallPlacementPos.pos:type_name -> Vector2
	23, // 23: Change.AddYellowCard.for_team:type_name -> Team
	24, // 24: Change.AddYellowCard.caused_by_game_event:type_name -> GameEvent
	23, // 25: Change.AddRedCard.for_team:type_name -> Team
	24, // 26: Change.AddRedCard.caused_by_game_event:type_name -> GameEvent
	23, // 27: Change.YellowCardOver.for_team:type_name -> Team
	24, // 28: Change.AddGameEvent.game_event:type_name -> GameEvent
	24, // 29: Change.AddPassiveGameEvent.game_event:type_name -> GameEvent
	25, // 30: Change.AddProposal.proposal:type_name -> Proposal
	26, // 31: Change.UpdateConfig.division:type_name -> Division
	23, // 32: Change.UpdateConfig.first_kickoff_team:type_name -> Team
	27, // 33: Change.UpdateConfig.match_type:type_name -> MatchType
	28, // 34: Change.UpdateConfig.max_robots_per_team:type_name -> google.protobuf.Int32Value
	23, // 35: Change.UpdateTeamState.for_team:type_name -> Team
	29, // 36: Change.UpdateTeamState.team_name:type_name -> google.protobuf.StringValue
	28, // 37: Change.UpdateTeamState.goals:type_name -> google.protobuf.Int32Value
	28, // 38: Change.UpdateTeamState.goalkeeper:type_name -> google.protobuf.Int32Value
	28, // 39: Change.UpdateTeamState.timeouts_left:type_name -> google.protobuf.Int32Value
	29, // 40: Change.UpdateTeamState.timeout_time_left:type_name -> google.protobuf.StringValue
	30, // 41: Change.UpdateTeamState.on_positive_half:type_name -> google.protobuf.BoolValue
	28, // 42: Change.UpdateTeamState.ball_placement_failures:type_name -> google.protobuf.Int32Value
	30, // 43: Change.UpdateTeamState.can_place_ball:type_name -> google.protobuf.BoolValue
	28, // 44: Change.UpdateTeamState.challenge_flags_left:type_name -> google.protobuf.Int32Value
	28, // 45: Change.UpdateTeamState.bot_substitutions_left:type_name -> google.protobuf.Int32Value
	30, // 46: Change.UpdateTeamState.requests_bot_substitution:type_name -> google.protobuf.BoolValue
	30, // 47: Change.UpdateTeamState.requests_timeout:type_name -> google.protobuf.BoolValue
	30, // 48: Change.UpdateTeamState.requests_challenge:type_name -> google.protobuf.BoolValue
	30, // 49: Change.UpdateTeamState.requests_emergency_stop:type_name -> google.protobuf.BoolValue
	31, // 50: Change.UpdateTeamState.yellow_card:type_name -> YellowCard
	32, // 51: Change.UpdateTeamState.red_card:type_name -> RedCard
	33, // 52: Change.UpdateTeamState.foul:type_name -> Foul
	34, // 53: Change.UpdateTeamState.remove_yellow_card:type_name -> google.protobuf.UInt32Value
	34, // 54: Change.UpdateTeamState.remove_red_card:type_name -> google.protobuf.UInt32Value
	34, // 55: Change.UpdateTeamState.remove_foul:type_name -> google.protobuf.UInt32Value
	35, // 56: Change.UpdateTeamState.hull_color:type_name -> HullColor
	36, // 57: Change.NewGameState.game_state:type_name -> GameState
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_statemachine_ssl_gc_change_proto_init() }
func file_statemachine_ssl_gc_change_proto_init() {
	if File_statemachine_ssl_gc_change_proto != nil {
		return
	}
	file_statemachine_ssl_gc_change_proto_msgTypes[1].OneofWrappers = []any{
		(*Change_NewCommandChange)(nil),
		(*Change_ChangeStageChange)(nil),
		(*Change_SetBallPlacementPosChange)(nil),
		(*Change_AddYellowCardChange)(nil),
		(*Change_AddRedCardChange)(nil),
		(*Change_YellowCardOverChange)(nil),
		(*Change_AddGameEventChange)(nil),
		(*Change_AddPassiveGameEventChange)(nil),
		(*Change_AddProposalChange)(nil),
		(*Change_UpdateConfigChange)(nil),
		(*Change_UpdateTeamStateChange)(nil),
		(*Change_SwitchColorsChange)(nil),
		(*Change_RevertChange)(nil),
		(*Change_NewGameStateChange)(nil),
		(*Change_AcceptProposalGroupChange)(nil),
		(*Change_SetStatusMessageChange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_statemachine_ssl_gc_change_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_statemachine_ssl_gc_change_proto_goTypes,
		DependencyIndexes: file_statemachine_ssl_gc_change_proto_depIdxs,
		MessageInfos:      file_statemachine_ssl_gc_change_proto_msgTypes,
	}.Build()
	File_statemachine_ssl_gc_change_proto = out.File
	file_statemachine_ssl_gc_change_proto_rawDesc = nil
	file_statemachine_ssl_gc_change_proto_goTypes = nil
	file_statemachine_ssl_gc_change_proto_depIdxs = nil
}
