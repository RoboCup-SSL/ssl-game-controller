// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.22.3
// source: ssl_gc_game_event.proto

package state

import (
	geom "github.com/RoboCup-SSL/ssl-game-controller/internal/app/geom"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameEvent_Type int32

const (
	GameEvent_UNKNOWN_GAME_EVENT_TYPE               GameEvent_Type = 0
	GameEvent_BALL_LEFT_FIELD_TOUCH_LINE            GameEvent_Type = 6  // triggered by autoRef
	GameEvent_BALL_LEFT_FIELD_GOAL_LINE             GameEvent_Type = 7  // triggered by autoRef
	GameEvent_AIMLESS_KICK                          GameEvent_Type = 11 // triggered by autoRef
	GameEvent_ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA    GameEvent_Type = 19 // triggered by autoRef
	GameEvent_DEFENDER_IN_DEFENSE_AREA              GameEvent_Type = 31 // triggered by autoRef
	GameEvent_BOUNDARY_CROSSING                     GameEvent_Type = 41 // triggered by autoRef
	GameEvent_KEEPER_HELD_BALL                      GameEvent_Type = 13 // triggered by GC
	GameEvent_BOT_DRIBBLED_BALL_TOO_FAR             GameEvent_Type = 17 // triggered by autoRef
	GameEvent_BOT_PUSHED_BOT                        GameEvent_Type = 24 // triggered by human ref
	GameEvent_BOT_HELD_BALL_DELIBERATELY            GameEvent_Type = 26 // triggered by human ref
	GameEvent_BOT_TIPPED_OVER                       GameEvent_Type = 27 // triggered by human ref
	GameEvent_BOT_DROPPED_PARTS                     GameEvent_Type = 47 // triggered by human ref
	GameEvent_ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA GameEvent_Type = 15 // triggered by autoRef
	GameEvent_BOT_KICKED_BALL_TOO_FAST              GameEvent_Type = 18 // triggered by autoRef
	GameEvent_BOT_CRASH_UNIQUE                      GameEvent_Type = 22 // triggered by autoRef
	GameEvent_BOT_CRASH_DRAWN                       GameEvent_Type = 21 // triggered by autoRef
	GameEvent_DEFENDER_TOO_CLOSE_TO_KICK_POINT      GameEvent_Type = 29 // triggered by autoRef
	GameEvent_BOT_TOO_FAST_IN_STOP                  GameEvent_Type = 28 // triggered by autoRef
	GameEvent_BOT_INTERFERED_PLACEMENT              GameEvent_Type = 20 // triggered by autoRef
	GameEvent_EXCESSIVE_BOT_SUBSTITUTION            GameEvent_Type = 48 // triggered by GC
	GameEvent_POSSIBLE_GOAL                         GameEvent_Type = 39 // triggered by autoRef
	GameEvent_GOAL                                  GameEvent_Type = 8  // triggered by GC
	GameEvent_INVALID_GOAL                          GameEvent_Type = 42 // triggered by GC
	GameEvent_ATTACKER_DOUBLE_TOUCHED_BALL          GameEvent_Type = 14 // triggered by autoRef
	GameEvent_PLACEMENT_SUCCEEDED                   GameEvent_Type = 5  // triggered by autoRef
	GameEvent_PENALTY_KICK_FAILED                   GameEvent_Type = 43 // triggered by GC and autoRef
	GameEvent_NO_PROGRESS_IN_GAME                   GameEvent_Type = 2  // triggered by GC
	GameEvent_PLACEMENT_FAILED                      GameEvent_Type = 3  // triggered by GC
	GameEvent_MULTIPLE_CARDS                        GameEvent_Type = 32 // triggered by GC
	GameEvent_MULTIPLE_FOULS                        GameEvent_Type = 34 // triggered by GC
	GameEvent_BOT_SUBSTITUTION                      GameEvent_Type = 37 // triggered by GC
	GameEvent_TOO_MANY_ROBOTS                       GameEvent_Type = 38 // triggered by GC
	GameEvent_CHALLENGE_FLAG                        GameEvent_Type = 44 // triggered by GC
	GameEvent_CHALLENGE_FLAG_HANDLED                GameEvent_Type = 46 // triggered by GC
	GameEvent_EMERGENCY_STOP                        GameEvent_Type = 45 // triggered by GC
	GameEvent_UNSPORTING_BEHAVIOR_MINOR             GameEvent_Type = 35 // triggered by human ref
	GameEvent_UNSPORTING_BEHAVIOR_MAJOR             GameEvent_Type = 36 // triggered by human ref
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_PREPARED GameEvent_Type = 1
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_INDIRECT_GOAL GameEvent_Type = 9
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_CHIPPED_GOAL GameEvent_Type = 10
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_KICK_TIMEOUT GameEvent_Type = 12
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA GameEvent_Type = 16
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED GameEvent_Type = 40
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_BOT_CRASH_UNIQUE_SKIPPED GameEvent_Type = 23
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_BOT_PUSHED_BOT_SKIPPED GameEvent_Type = 25
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_DEFENDER_IN_DEFENSE_AREA_PARTIALLY GameEvent_Type = 30
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	GameEvent_MULTIPLE_PLACEMENT_FAILURES GameEvent_Type = 33
)

// Enum value maps for GameEvent_Type.
var (
	GameEvent_Type_name = map[int32]string{
		0:  "UNKNOWN_GAME_EVENT_TYPE",
		6:  "BALL_LEFT_FIELD_TOUCH_LINE",
		7:  "BALL_LEFT_FIELD_GOAL_LINE",
		11: "AIMLESS_KICK",
		19: "ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA",
		31: "DEFENDER_IN_DEFENSE_AREA",
		41: "BOUNDARY_CROSSING",
		13: "KEEPER_HELD_BALL",
		17: "BOT_DRIBBLED_BALL_TOO_FAR",
		24: "BOT_PUSHED_BOT",
		26: "BOT_HELD_BALL_DELIBERATELY",
		27: "BOT_TIPPED_OVER",
		47: "BOT_DROPPED_PARTS",
		15: "ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA",
		18: "BOT_KICKED_BALL_TOO_FAST",
		22: "BOT_CRASH_UNIQUE",
		21: "BOT_CRASH_DRAWN",
		29: "DEFENDER_TOO_CLOSE_TO_KICK_POINT",
		28: "BOT_TOO_FAST_IN_STOP",
		20: "BOT_INTERFERED_PLACEMENT",
		48: "EXCESSIVE_BOT_SUBSTITUTION",
		39: "POSSIBLE_GOAL",
		8:  "GOAL",
		42: "INVALID_GOAL",
		14: "ATTACKER_DOUBLE_TOUCHED_BALL",
		5:  "PLACEMENT_SUCCEEDED",
		43: "PENALTY_KICK_FAILED",
		2:  "NO_PROGRESS_IN_GAME",
		3:  "PLACEMENT_FAILED",
		32: "MULTIPLE_CARDS",
		34: "MULTIPLE_FOULS",
		37: "BOT_SUBSTITUTION",
		38: "TOO_MANY_ROBOTS",
		44: "CHALLENGE_FLAG",
		46: "CHALLENGE_FLAG_HANDLED",
		45: "EMERGENCY_STOP",
		35: "UNSPORTING_BEHAVIOR_MINOR",
		36: "UNSPORTING_BEHAVIOR_MAJOR",
		1:  "PREPARED",
		9:  "INDIRECT_GOAL",
		10: "CHIPPED_GOAL",
		12: "KICK_TIMEOUT",
		16: "ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA",
		40: "ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED",
		23: "BOT_CRASH_UNIQUE_SKIPPED",
		25: "BOT_PUSHED_BOT_SKIPPED",
		30: "DEFENDER_IN_DEFENSE_AREA_PARTIALLY",
		33: "MULTIPLE_PLACEMENT_FAILURES",
	}
	GameEvent_Type_value = map[string]int32{
		"UNKNOWN_GAME_EVENT_TYPE":                   0,
		"BALL_LEFT_FIELD_TOUCH_LINE":                6,
		"BALL_LEFT_FIELD_GOAL_LINE":                 7,
		"AIMLESS_KICK":                              11,
		"ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA":        19,
		"DEFENDER_IN_DEFENSE_AREA":                  31,
		"BOUNDARY_CROSSING":                         41,
		"KEEPER_HELD_BALL":                          13,
		"BOT_DRIBBLED_BALL_TOO_FAR":                 17,
		"BOT_PUSHED_BOT":                            24,
		"BOT_HELD_BALL_DELIBERATELY":                26,
		"BOT_TIPPED_OVER":                           27,
		"BOT_DROPPED_PARTS":                         47,
		"ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA":     15,
		"BOT_KICKED_BALL_TOO_FAST":                  18,
		"BOT_CRASH_UNIQUE":                          22,
		"BOT_CRASH_DRAWN":                           21,
		"DEFENDER_TOO_CLOSE_TO_KICK_POINT":          29,
		"BOT_TOO_FAST_IN_STOP":                      28,
		"BOT_INTERFERED_PLACEMENT":                  20,
		"EXCESSIVE_BOT_SUBSTITUTION":                48,
		"POSSIBLE_GOAL":                             39,
		"GOAL":                                      8,
		"INVALID_GOAL":                              42,
		"ATTACKER_DOUBLE_TOUCHED_BALL":              14,
		"PLACEMENT_SUCCEEDED":                       5,
		"PENALTY_KICK_FAILED":                       43,
		"NO_PROGRESS_IN_GAME":                       2,
		"PLACEMENT_FAILED":                          3,
		"MULTIPLE_CARDS":                            32,
		"MULTIPLE_FOULS":                            34,
		"BOT_SUBSTITUTION":                          37,
		"TOO_MANY_ROBOTS":                           38,
		"CHALLENGE_FLAG":                            44,
		"CHALLENGE_FLAG_HANDLED":                    46,
		"EMERGENCY_STOP":                            45,
		"UNSPORTING_BEHAVIOR_MINOR":                 35,
		"UNSPORTING_BEHAVIOR_MAJOR":                 36,
		"PREPARED":                                  1,
		"INDIRECT_GOAL":                             9,
		"CHIPPED_GOAL":                              10,
		"KICK_TIMEOUT":                              12,
		"ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA": 16,
		"ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED": 40,
		"BOT_CRASH_UNIQUE_SKIPPED":                          23,
		"BOT_PUSHED_BOT_SKIPPED":                            25,
		"DEFENDER_IN_DEFENSE_AREA_PARTIALLY":                30,
		"MULTIPLE_PLACEMENT_FAILURES":                       33,
	}
)

func (x GameEvent_Type) Enum() *GameEvent_Type {
	p := new(GameEvent_Type)
	*p = x
	return p
}

func (x GameEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_game_event_proto_enumTypes[0].Descriptor()
}

func (GameEvent_Type) Type() protoreflect.EnumType {
	return &file_ssl_gc_game_event_proto_enumTypes[0]
}

func (x GameEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GameEvent_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GameEvent_Type(num)
	return nil
}

// Deprecated: Use GameEvent_Type.Descriptor instead.
func (GameEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 0}
}

// GameEvent contains exactly one game event
// Each game event has optional and required fields. The required fields are mandatory to process the event.
// Some optional fields are only used for visualization, others are required to determine the ball placement position.
// If fields are missing that are required for the ball placement position, no ball placement command will be issued.
// Fields are marked optional to make testing and extending of the protocol easier.
// An autoRef should ideally set all fields, except if there are good reasons to not do so.
type GameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A globally unique id of the game event.
	Id *string `protobuf:"bytes,50,opt,name=id" json:"id,omitempty"`
	// The type of the game event.
	Type *GameEvent_Type `protobuf:"varint,40,opt,name=type,enum=GameEvent_Type" json:"type,omitempty"`
	// The origins of this game event.
	// Empty, if it originates from game controller.
	// Contains autoRef name(s), if it originates from one or more autoRefs.
	// Ignored if sent by autoRef to game controller.
	Origin []string `protobuf:"bytes,41,rep,name=origin" json:"origin,omitempty"`
	// Unix timestamp in microseconds when the event was created.
	CreatedTimestamp *uint64 `protobuf:"varint,49,opt,name=created_timestamp,json=createdTimestamp" json:"created_timestamp,omitempty"`
	// the event that occurred
	//
	// Types that are assignable to Event:
	//
	//	*GameEvent_BallLeftFieldTouchLine
	//	*GameEvent_BallLeftFieldGoalLine
	//	*GameEvent_AimlessKick_
	//	*GameEvent_AttackerTooCloseToDefenseArea_
	//	*GameEvent_DefenderInDefenseArea_
	//	*GameEvent_BoundaryCrossing_
	//	*GameEvent_KeeperHeldBall_
	//	*GameEvent_BotDribbledBallTooFar_
	//	*GameEvent_BotPushedBot_
	//	*GameEvent_BotHeldBallDeliberately_
	//	*GameEvent_BotTippedOver_
	//	*GameEvent_BotDroppedParts_
	//	*GameEvent_AttackerTouchedBallInDefenseArea_
	//	*GameEvent_BotKickedBallTooFast_
	//	*GameEvent_BotCrashUnique_
	//	*GameEvent_BotCrashDrawn_
	//	*GameEvent_DefenderTooCloseToKickPoint_
	//	*GameEvent_BotTooFastInStop_
	//	*GameEvent_BotInterferedPlacement_
	//	*GameEvent_PossibleGoal
	//	*GameEvent_Goal_
	//	*GameEvent_InvalidGoal
	//	*GameEvent_AttackerDoubleTouchedBall_
	//	*GameEvent_PlacementSucceeded_
	//	*GameEvent_PenaltyKickFailed_
	//	*GameEvent_NoProgressInGame_
	//	*GameEvent_PlacementFailed_
	//	*GameEvent_MultipleCards_
	//	*GameEvent_MultipleFouls_
	//	*GameEvent_BotSubstitution_
	//	*GameEvent_ExcessiveBotSubstitution_
	//	*GameEvent_TooManyRobots_
	//	*GameEvent_ChallengeFlag_
	//	*GameEvent_ChallengeFlagHandled_
	//	*GameEvent_EmergencyStop_
	//	*GameEvent_UnsportingBehaviorMinor_
	//	*GameEvent_UnsportingBehaviorMajor_
	//	*GameEvent_Prepared_
	//	*GameEvent_IndirectGoal_
	//	*GameEvent_ChippedGoal_
	//	*GameEvent_KickTimeout_
	//	*GameEvent_AttackerTouchedOpponentInDefenseArea_
	//	*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped
	//	*GameEvent_BotCrashUniqueSkipped
	//	*GameEvent_BotPushedBotSkipped
	//	*GameEvent_DefenderInDefenseAreaPartially_
	//	*GameEvent_MultiplePlacementFailures_
	Event isGameEvent_Event `protobuf_oneof:"event"`
}

func (x *GameEvent) Reset() {
	*x = GameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent) ProtoMessage() {}

func (x *GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent.ProtoReflect.Descriptor instead.
func (*GameEvent) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0}
}

func (x *GameEvent) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GameEvent) GetType() GameEvent_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GameEvent_UNKNOWN_GAME_EVENT_TYPE
}

func (x *GameEvent) GetOrigin() []string {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *GameEvent) GetCreatedTimestamp() uint64 {
	if x != nil && x.CreatedTimestamp != nil {
		return *x.CreatedTimestamp
	}
	return 0
}

func (m *GameEvent) GetEvent() isGameEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GameEvent) GetBallLeftFieldTouchLine() *GameEvent_BallLeftField {
	if x, ok := x.GetEvent().(*GameEvent_BallLeftFieldTouchLine); ok {
		return x.BallLeftFieldTouchLine
	}
	return nil
}

func (x *GameEvent) GetBallLeftFieldGoalLine() *GameEvent_BallLeftField {
	if x, ok := x.GetEvent().(*GameEvent_BallLeftFieldGoalLine); ok {
		return x.BallLeftFieldGoalLine
	}
	return nil
}

func (x *GameEvent) GetAimlessKick() *GameEvent_AimlessKick {
	if x, ok := x.GetEvent().(*GameEvent_AimlessKick_); ok {
		return x.AimlessKick
	}
	return nil
}

func (x *GameEvent) GetAttackerTooCloseToDefenseArea() *GameEvent_AttackerTooCloseToDefenseArea {
	if x, ok := x.GetEvent().(*GameEvent_AttackerTooCloseToDefenseArea_); ok {
		return x.AttackerTooCloseToDefenseArea
	}
	return nil
}

func (x *GameEvent) GetDefenderInDefenseArea() *GameEvent_DefenderInDefenseArea {
	if x, ok := x.GetEvent().(*GameEvent_DefenderInDefenseArea_); ok {
		return x.DefenderInDefenseArea
	}
	return nil
}

func (x *GameEvent) GetBoundaryCrossing() *GameEvent_BoundaryCrossing {
	if x, ok := x.GetEvent().(*GameEvent_BoundaryCrossing_); ok {
		return x.BoundaryCrossing
	}
	return nil
}

func (x *GameEvent) GetKeeperHeldBall() *GameEvent_KeeperHeldBall {
	if x, ok := x.GetEvent().(*GameEvent_KeeperHeldBall_); ok {
		return x.KeeperHeldBall
	}
	return nil
}

func (x *GameEvent) GetBotDribbledBallTooFar() *GameEvent_BotDribbledBallTooFar {
	if x, ok := x.GetEvent().(*GameEvent_BotDribbledBallTooFar_); ok {
		return x.BotDribbledBallTooFar
	}
	return nil
}

func (x *GameEvent) GetBotPushedBot() *GameEvent_BotPushedBot {
	if x, ok := x.GetEvent().(*GameEvent_BotPushedBot_); ok {
		return x.BotPushedBot
	}
	return nil
}

func (x *GameEvent) GetBotHeldBallDeliberately() *GameEvent_BotHeldBallDeliberately {
	if x, ok := x.GetEvent().(*GameEvent_BotHeldBallDeliberately_); ok {
		return x.BotHeldBallDeliberately
	}
	return nil
}

func (x *GameEvent) GetBotTippedOver() *GameEvent_BotTippedOver {
	if x, ok := x.GetEvent().(*GameEvent_BotTippedOver_); ok {
		return x.BotTippedOver
	}
	return nil
}

func (x *GameEvent) GetBotDroppedParts() *GameEvent_BotDroppedParts {
	if x, ok := x.GetEvent().(*GameEvent_BotDroppedParts_); ok {
		return x.BotDroppedParts
	}
	return nil
}

func (x *GameEvent) GetAttackerTouchedBallInDefenseArea() *GameEvent_AttackerTouchedBallInDefenseArea {
	if x, ok := x.GetEvent().(*GameEvent_AttackerTouchedBallInDefenseArea_); ok {
		return x.AttackerTouchedBallInDefenseArea
	}
	return nil
}

func (x *GameEvent) GetBotKickedBallTooFast() *GameEvent_BotKickedBallTooFast {
	if x, ok := x.GetEvent().(*GameEvent_BotKickedBallTooFast_); ok {
		return x.BotKickedBallTooFast
	}
	return nil
}

func (x *GameEvent) GetBotCrashUnique() *GameEvent_BotCrashUnique {
	if x, ok := x.GetEvent().(*GameEvent_BotCrashUnique_); ok {
		return x.BotCrashUnique
	}
	return nil
}

func (x *GameEvent) GetBotCrashDrawn() *GameEvent_BotCrashDrawn {
	if x, ok := x.GetEvent().(*GameEvent_BotCrashDrawn_); ok {
		return x.BotCrashDrawn
	}
	return nil
}

func (x *GameEvent) GetDefenderTooCloseToKickPoint() *GameEvent_DefenderTooCloseToKickPoint {
	if x, ok := x.GetEvent().(*GameEvent_DefenderTooCloseToKickPoint_); ok {
		return x.DefenderTooCloseToKickPoint
	}
	return nil
}

func (x *GameEvent) GetBotTooFastInStop() *GameEvent_BotTooFastInStop {
	if x, ok := x.GetEvent().(*GameEvent_BotTooFastInStop_); ok {
		return x.BotTooFastInStop
	}
	return nil
}

func (x *GameEvent) GetBotInterferedPlacement() *GameEvent_BotInterferedPlacement {
	if x, ok := x.GetEvent().(*GameEvent_BotInterferedPlacement_); ok {
		return x.BotInterferedPlacement
	}
	return nil
}

func (x *GameEvent) GetPossibleGoal() *GameEvent_Goal {
	if x, ok := x.GetEvent().(*GameEvent_PossibleGoal); ok {
		return x.PossibleGoal
	}
	return nil
}

func (x *GameEvent) GetGoal() *GameEvent_Goal {
	if x, ok := x.GetEvent().(*GameEvent_Goal_); ok {
		return x.Goal
	}
	return nil
}

func (x *GameEvent) GetInvalidGoal() *GameEvent_Goal {
	if x, ok := x.GetEvent().(*GameEvent_InvalidGoal); ok {
		return x.InvalidGoal
	}
	return nil
}

func (x *GameEvent) GetAttackerDoubleTouchedBall() *GameEvent_AttackerDoubleTouchedBall {
	if x, ok := x.GetEvent().(*GameEvent_AttackerDoubleTouchedBall_); ok {
		return x.AttackerDoubleTouchedBall
	}
	return nil
}

func (x *GameEvent) GetPlacementSucceeded() *GameEvent_PlacementSucceeded {
	if x, ok := x.GetEvent().(*GameEvent_PlacementSucceeded_); ok {
		return x.PlacementSucceeded
	}
	return nil
}

func (x *GameEvent) GetPenaltyKickFailed() *GameEvent_PenaltyKickFailed {
	if x, ok := x.GetEvent().(*GameEvent_PenaltyKickFailed_); ok {
		return x.PenaltyKickFailed
	}
	return nil
}

func (x *GameEvent) GetNoProgressInGame() *GameEvent_NoProgressInGame {
	if x, ok := x.GetEvent().(*GameEvent_NoProgressInGame_); ok {
		return x.NoProgressInGame
	}
	return nil
}

func (x *GameEvent) GetPlacementFailed() *GameEvent_PlacementFailed {
	if x, ok := x.GetEvent().(*GameEvent_PlacementFailed_); ok {
		return x.PlacementFailed
	}
	return nil
}

func (x *GameEvent) GetMultipleCards() *GameEvent_MultipleCards {
	if x, ok := x.GetEvent().(*GameEvent_MultipleCards_); ok {
		return x.MultipleCards
	}
	return nil
}

func (x *GameEvent) GetMultipleFouls() *GameEvent_MultipleFouls {
	if x, ok := x.GetEvent().(*GameEvent_MultipleFouls_); ok {
		return x.MultipleFouls
	}
	return nil
}

func (x *GameEvent) GetBotSubstitution() *GameEvent_BotSubstitution {
	if x, ok := x.GetEvent().(*GameEvent_BotSubstitution_); ok {
		return x.BotSubstitution
	}
	return nil
}

func (x *GameEvent) GetExcessiveBotSubstitution() *GameEvent_ExcessiveBotSubstitution {
	if x, ok := x.GetEvent().(*GameEvent_ExcessiveBotSubstitution_); ok {
		return x.ExcessiveBotSubstitution
	}
	return nil
}

func (x *GameEvent) GetTooManyRobots() *GameEvent_TooManyRobots {
	if x, ok := x.GetEvent().(*GameEvent_TooManyRobots_); ok {
		return x.TooManyRobots
	}
	return nil
}

func (x *GameEvent) GetChallengeFlag() *GameEvent_ChallengeFlag {
	if x, ok := x.GetEvent().(*GameEvent_ChallengeFlag_); ok {
		return x.ChallengeFlag
	}
	return nil
}

func (x *GameEvent) GetChallengeFlagHandled() *GameEvent_ChallengeFlagHandled {
	if x, ok := x.GetEvent().(*GameEvent_ChallengeFlagHandled_); ok {
		return x.ChallengeFlagHandled
	}
	return nil
}

func (x *GameEvent) GetEmergencyStop() *GameEvent_EmergencyStop {
	if x, ok := x.GetEvent().(*GameEvent_EmergencyStop_); ok {
		return x.EmergencyStop
	}
	return nil
}

func (x *GameEvent) GetUnsportingBehaviorMinor() *GameEvent_UnsportingBehaviorMinor {
	if x, ok := x.GetEvent().(*GameEvent_UnsportingBehaviorMinor_); ok {
		return x.UnsportingBehaviorMinor
	}
	return nil
}

func (x *GameEvent) GetUnsportingBehaviorMajor() *GameEvent_UnsportingBehaviorMajor {
	if x, ok := x.GetEvent().(*GameEvent_UnsportingBehaviorMajor_); ok {
		return x.UnsportingBehaviorMajor
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetPrepared() *GameEvent_Prepared {
	if x, ok := x.GetEvent().(*GameEvent_Prepared_); ok {
		return x.Prepared
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetIndirectGoal() *GameEvent_IndirectGoal {
	if x, ok := x.GetEvent().(*GameEvent_IndirectGoal_); ok {
		return x.IndirectGoal
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetChippedGoal() *GameEvent_ChippedGoal {
	if x, ok := x.GetEvent().(*GameEvent_ChippedGoal_); ok {
		return x.ChippedGoal
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetKickTimeout() *GameEvent_KickTimeout {
	if x, ok := x.GetEvent().(*GameEvent_KickTimeout_); ok {
		return x.KickTimeout
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetAttackerTouchedOpponentInDefenseArea() *GameEvent_AttackerTouchedOpponentInDefenseArea {
	if x, ok := x.GetEvent().(*GameEvent_AttackerTouchedOpponentInDefenseArea_); ok {
		return x.AttackerTouchedOpponentInDefenseArea
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetAttackerTouchedOpponentInDefenseAreaSkipped() *GameEvent_AttackerTouchedOpponentInDefenseArea {
	if x, ok := x.GetEvent().(*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped); ok {
		return x.AttackerTouchedOpponentInDefenseAreaSkipped
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetBotCrashUniqueSkipped() *GameEvent_BotCrashUnique {
	if x, ok := x.GetEvent().(*GameEvent_BotCrashUniqueSkipped); ok {
		return x.BotCrashUniqueSkipped
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetBotPushedBotSkipped() *GameEvent_BotPushedBot {
	if x, ok := x.GetEvent().(*GameEvent_BotPushedBotSkipped); ok {
		return x.BotPushedBotSkipped
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetDefenderInDefenseAreaPartially() *GameEvent_DefenderInDefenseAreaPartially {
	if x, ok := x.GetEvent().(*GameEvent_DefenderInDefenseAreaPartially_); ok {
		return x.DefenderInDefenseAreaPartially
	}
	return nil
}

// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
func (x *GameEvent) GetMultiplePlacementFailures() *GameEvent_MultiplePlacementFailures {
	if x, ok := x.GetEvent().(*GameEvent_MultiplePlacementFailures_); ok {
		return x.MultiplePlacementFailures
	}
	return nil
}

type isGameEvent_Event interface {
	isGameEvent_Event()
}

type GameEvent_BallLeftFieldTouchLine struct {
	BallLeftFieldTouchLine *GameEvent_BallLeftField `protobuf:"bytes,6,opt,name=ball_left_field_touch_line,json=ballLeftFieldTouchLine,oneof"`
}

type GameEvent_BallLeftFieldGoalLine struct {
	BallLeftFieldGoalLine *GameEvent_BallLeftField `protobuf:"bytes,7,opt,name=ball_left_field_goal_line,json=ballLeftFieldGoalLine,oneof"`
}

type GameEvent_AimlessKick_ struct {
	AimlessKick *GameEvent_AimlessKick `protobuf:"bytes,11,opt,name=aimless_kick,json=aimlessKick,oneof"`
}

type GameEvent_AttackerTooCloseToDefenseArea_ struct {
	AttackerTooCloseToDefenseArea *GameEvent_AttackerTooCloseToDefenseArea `protobuf:"bytes,19,opt,name=attacker_too_close_to_defense_area,json=attackerTooCloseToDefenseArea,oneof"`
}

type GameEvent_DefenderInDefenseArea_ struct {
	DefenderInDefenseArea *GameEvent_DefenderInDefenseArea `protobuf:"bytes,31,opt,name=defender_in_defense_area,json=defenderInDefenseArea,oneof"`
}

type GameEvent_BoundaryCrossing_ struct {
	BoundaryCrossing *GameEvent_BoundaryCrossing `protobuf:"bytes,43,opt,name=boundary_crossing,json=boundaryCrossing,oneof"`
}

type GameEvent_KeeperHeldBall_ struct {
	KeeperHeldBall *GameEvent_KeeperHeldBall `protobuf:"bytes,13,opt,name=keeper_held_ball,json=keeperHeldBall,oneof"`
}

type GameEvent_BotDribbledBallTooFar_ struct {
	BotDribbledBallTooFar *GameEvent_BotDribbledBallTooFar `protobuf:"bytes,17,opt,name=bot_dribbled_ball_too_far,json=botDribbledBallTooFar,oneof"`
}

type GameEvent_BotPushedBot_ struct {
	BotPushedBot *GameEvent_BotPushedBot `protobuf:"bytes,24,opt,name=bot_pushed_bot,json=botPushedBot,oneof"`
}

type GameEvent_BotHeldBallDeliberately_ struct {
	BotHeldBallDeliberately *GameEvent_BotHeldBallDeliberately `protobuf:"bytes,26,opt,name=bot_held_ball_deliberately,json=botHeldBallDeliberately,oneof"`
}

type GameEvent_BotTippedOver_ struct {
	BotTippedOver *GameEvent_BotTippedOver `protobuf:"bytes,27,opt,name=bot_tipped_over,json=botTippedOver,oneof"`
}

type GameEvent_BotDroppedParts_ struct {
	BotDroppedParts *GameEvent_BotDroppedParts `protobuf:"bytes,51,opt,name=bot_dropped_parts,json=botDroppedParts,oneof"`
}

type GameEvent_AttackerTouchedBallInDefenseArea_ struct {
	AttackerTouchedBallInDefenseArea *GameEvent_AttackerTouchedBallInDefenseArea `protobuf:"bytes,15,opt,name=attacker_touched_ball_in_defense_area,json=attackerTouchedBallInDefenseArea,oneof"`
}

type GameEvent_BotKickedBallTooFast_ struct {
	BotKickedBallTooFast *GameEvent_BotKickedBallTooFast `protobuf:"bytes,18,opt,name=bot_kicked_ball_too_fast,json=botKickedBallTooFast,oneof"`
}

type GameEvent_BotCrashUnique_ struct {
	BotCrashUnique *GameEvent_BotCrashUnique `protobuf:"bytes,22,opt,name=bot_crash_unique,json=botCrashUnique,oneof"`
}

type GameEvent_BotCrashDrawn_ struct {
	BotCrashDrawn *GameEvent_BotCrashDrawn `protobuf:"bytes,21,opt,name=bot_crash_drawn,json=botCrashDrawn,oneof"`
}

type GameEvent_DefenderTooCloseToKickPoint_ struct {
	DefenderTooCloseToKickPoint *GameEvent_DefenderTooCloseToKickPoint `protobuf:"bytes,29,opt,name=defender_too_close_to_kick_point,json=defenderTooCloseToKickPoint,oneof"`
}

type GameEvent_BotTooFastInStop_ struct {
	BotTooFastInStop *GameEvent_BotTooFastInStop `protobuf:"bytes,28,opt,name=bot_too_fast_in_stop,json=botTooFastInStop,oneof"`
}

type GameEvent_BotInterferedPlacement_ struct {
	BotInterferedPlacement *GameEvent_BotInterferedPlacement `protobuf:"bytes,20,opt,name=bot_interfered_placement,json=botInterferedPlacement,oneof"`
}

type GameEvent_PossibleGoal struct {
	PossibleGoal *GameEvent_Goal `protobuf:"bytes,39,opt,name=possible_goal,json=possibleGoal,oneof"`
}

type GameEvent_Goal_ struct {
	Goal *GameEvent_Goal `protobuf:"bytes,8,opt,name=goal,oneof"`
}

type GameEvent_InvalidGoal struct {
	InvalidGoal *GameEvent_Goal `protobuf:"bytes,44,opt,name=invalid_goal,json=invalidGoal,oneof"`
}

type GameEvent_AttackerDoubleTouchedBall_ struct {
	AttackerDoubleTouchedBall *GameEvent_AttackerDoubleTouchedBall `protobuf:"bytes,14,opt,name=attacker_double_touched_ball,json=attackerDoubleTouchedBall,oneof"`
}

type GameEvent_PlacementSucceeded_ struct {
	PlacementSucceeded *GameEvent_PlacementSucceeded `protobuf:"bytes,5,opt,name=placement_succeeded,json=placementSucceeded,oneof"`
}

type GameEvent_PenaltyKickFailed_ struct {
	PenaltyKickFailed *GameEvent_PenaltyKickFailed `protobuf:"bytes,45,opt,name=penalty_kick_failed,json=penaltyKickFailed,oneof"`
}

type GameEvent_NoProgressInGame_ struct {
	NoProgressInGame *GameEvent_NoProgressInGame `protobuf:"bytes,2,opt,name=no_progress_in_game,json=noProgressInGame,oneof"`
}

type GameEvent_PlacementFailed_ struct {
	PlacementFailed *GameEvent_PlacementFailed `protobuf:"bytes,3,opt,name=placement_failed,json=placementFailed,oneof"`
}

type GameEvent_MultipleCards_ struct {
	MultipleCards *GameEvent_MultipleCards `protobuf:"bytes,32,opt,name=multiple_cards,json=multipleCards,oneof"`
}

type GameEvent_MultipleFouls_ struct {
	MultipleFouls *GameEvent_MultipleFouls `protobuf:"bytes,34,opt,name=multiple_fouls,json=multipleFouls,oneof"`
}

type GameEvent_BotSubstitution_ struct {
	BotSubstitution *GameEvent_BotSubstitution `protobuf:"bytes,37,opt,name=bot_substitution,json=botSubstitution,oneof"`
}

type GameEvent_ExcessiveBotSubstitution_ struct {
	ExcessiveBotSubstitution *GameEvent_ExcessiveBotSubstitution `protobuf:"bytes,52,opt,name=excessive_bot_substitution,json=excessiveBotSubstitution,oneof"`
}

type GameEvent_TooManyRobots_ struct {
	TooManyRobots *GameEvent_TooManyRobots `protobuf:"bytes,38,opt,name=too_many_robots,json=tooManyRobots,oneof"`
}

type GameEvent_ChallengeFlag_ struct {
	ChallengeFlag *GameEvent_ChallengeFlag `protobuf:"bytes,46,opt,name=challenge_flag,json=challengeFlag,oneof"`
}

type GameEvent_ChallengeFlagHandled_ struct {
	ChallengeFlagHandled *GameEvent_ChallengeFlagHandled `protobuf:"bytes,48,opt,name=challenge_flag_handled,json=challengeFlagHandled,oneof"`
}

type GameEvent_EmergencyStop_ struct {
	EmergencyStop *GameEvent_EmergencyStop `protobuf:"bytes,47,opt,name=emergency_stop,json=emergencyStop,oneof"`
}

type GameEvent_UnsportingBehaviorMinor_ struct {
	UnsportingBehaviorMinor *GameEvent_UnsportingBehaviorMinor `protobuf:"bytes,35,opt,name=unsporting_behavior_minor,json=unsportingBehaviorMinor,oneof"`
}

type GameEvent_UnsportingBehaviorMajor_ struct {
	UnsportingBehaviorMajor *GameEvent_UnsportingBehaviorMajor `protobuf:"bytes,36,opt,name=unsporting_behavior_major,json=unsportingBehaviorMajor,oneof"`
}

type GameEvent_Prepared_ struct {
	// replaced by ready_to_continue flag
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	Prepared *GameEvent_Prepared `protobuf:"bytes,1,opt,name=prepared,oneof"`
}

type GameEvent_IndirectGoal_ struct {
	// obsolete
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	IndirectGoal *GameEvent_IndirectGoal `protobuf:"bytes,9,opt,name=indirect_goal,json=indirectGoal,oneof"`
}

type GameEvent_ChippedGoal_ struct {
	// replaced by the meta-information in the possible_goal event
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	ChippedGoal *GameEvent_ChippedGoal `protobuf:"bytes,10,opt,name=chipped_goal,json=chippedGoal,oneof"`
}

type GameEvent_KickTimeout_ struct {
	// obsolete
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	KickTimeout *GameEvent_KickTimeout `protobuf:"bytes,12,opt,name=kick_timeout,json=kickTimeout,oneof"`
}

type GameEvent_AttackerTouchedOpponentInDefenseArea_ struct {
	// rule removed
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	AttackerTouchedOpponentInDefenseArea *GameEvent_AttackerTouchedOpponentInDefenseArea `protobuf:"bytes,16,opt,name=attacker_touched_opponent_in_defense_area,json=attackerTouchedOpponentInDefenseArea,oneof"`
}

type GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped struct {
	// obsolete
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	AttackerTouchedOpponentInDefenseAreaSkipped *GameEvent_AttackerTouchedOpponentInDefenseArea `protobuf:"bytes,42,opt,name=attacker_touched_opponent_in_defense_area_skipped,json=attackerTouchedOpponentInDefenseAreaSkipped,oneof"`
}

type GameEvent_BotCrashUniqueSkipped struct {
	// obsolete
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	BotCrashUniqueSkipped *GameEvent_BotCrashUnique `protobuf:"bytes,23,opt,name=bot_crash_unique_skipped,json=botCrashUniqueSkipped,oneof"`
}

type GameEvent_BotPushedBotSkipped struct {
	// can not be used as long as autoRefs do not judge pushing
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	BotPushedBotSkipped *GameEvent_BotPushedBot `protobuf:"bytes,25,opt,name=bot_pushed_bot_skipped,json=botPushedBotSkipped,oneof"`
}

type GameEvent_DefenderInDefenseAreaPartially_ struct {
	// rule removed
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	DefenderInDefenseAreaPartially *GameEvent_DefenderInDefenseAreaPartially `protobuf:"bytes,30,opt,name=defender_in_defense_area_partially,json=defenderInDefenseAreaPartially,oneof"`
}

type GameEvent_MultiplePlacementFailures_ struct {
	// the referee msg already indicates this
	//
	// Deprecated: Marked as deprecated in ssl_gc_game_event.proto.
	MultiplePlacementFailures *GameEvent_MultiplePlacementFailures `protobuf:"bytes,33,opt,name=multiple_placement_failures,json=multiplePlacementFailures,oneof"`
}

func (*GameEvent_BallLeftFieldTouchLine) isGameEvent_Event() {}

func (*GameEvent_BallLeftFieldGoalLine) isGameEvent_Event() {}

func (*GameEvent_AimlessKick_) isGameEvent_Event() {}

func (*GameEvent_AttackerTooCloseToDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_DefenderInDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_BoundaryCrossing_) isGameEvent_Event() {}

func (*GameEvent_KeeperHeldBall_) isGameEvent_Event() {}

func (*GameEvent_BotDribbledBallTooFar_) isGameEvent_Event() {}

func (*GameEvent_BotPushedBot_) isGameEvent_Event() {}

func (*GameEvent_BotHeldBallDeliberately_) isGameEvent_Event() {}

func (*GameEvent_BotTippedOver_) isGameEvent_Event() {}

func (*GameEvent_BotDroppedParts_) isGameEvent_Event() {}

func (*GameEvent_AttackerTouchedBallInDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_BotKickedBallTooFast_) isGameEvent_Event() {}

func (*GameEvent_BotCrashUnique_) isGameEvent_Event() {}

func (*GameEvent_BotCrashDrawn_) isGameEvent_Event() {}

func (*GameEvent_DefenderTooCloseToKickPoint_) isGameEvent_Event() {}

func (*GameEvent_BotTooFastInStop_) isGameEvent_Event() {}

func (*GameEvent_BotInterferedPlacement_) isGameEvent_Event() {}

func (*GameEvent_PossibleGoal) isGameEvent_Event() {}

func (*GameEvent_Goal_) isGameEvent_Event() {}

func (*GameEvent_InvalidGoal) isGameEvent_Event() {}

func (*GameEvent_AttackerDoubleTouchedBall_) isGameEvent_Event() {}

func (*GameEvent_PlacementSucceeded_) isGameEvent_Event() {}

func (*GameEvent_PenaltyKickFailed_) isGameEvent_Event() {}

func (*GameEvent_NoProgressInGame_) isGameEvent_Event() {}

func (*GameEvent_PlacementFailed_) isGameEvent_Event() {}

func (*GameEvent_MultipleCards_) isGameEvent_Event() {}

func (*GameEvent_MultipleFouls_) isGameEvent_Event() {}

func (*GameEvent_BotSubstitution_) isGameEvent_Event() {}

func (*GameEvent_ExcessiveBotSubstitution_) isGameEvent_Event() {}

func (*GameEvent_TooManyRobots_) isGameEvent_Event() {}

func (*GameEvent_ChallengeFlag_) isGameEvent_Event() {}

func (*GameEvent_ChallengeFlagHandled_) isGameEvent_Event() {}

func (*GameEvent_EmergencyStop_) isGameEvent_Event() {}

func (*GameEvent_UnsportingBehaviorMinor_) isGameEvent_Event() {}

func (*GameEvent_UnsportingBehaviorMajor_) isGameEvent_Event() {}

func (*GameEvent_Prepared_) isGameEvent_Event() {}

func (*GameEvent_IndirectGoal_) isGameEvent_Event() {}

func (*GameEvent_ChippedGoal_) isGameEvent_Event() {}

func (*GameEvent_KickTimeout_) isGameEvent_Event() {}

func (*GameEvent_AttackerTouchedOpponentInDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped) isGameEvent_Event() {}

func (*GameEvent_BotCrashUniqueSkipped) isGameEvent_Event() {}

func (*GameEvent_BotPushedBotSkipped) isGameEvent_Event() {}

func (*GameEvent_DefenderInDefenseAreaPartially_) isGameEvent_Event() {}

func (*GameEvent_MultiplePlacementFailures_) isGameEvent_Event() {}

// the ball left the field normally
type GameEvent_BallLeftField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that last touched the ball
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that last touched the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball left the field [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (x *GameEvent_BallLeftField) Reset() {
	*x = GameEvent_BallLeftField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BallLeftField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BallLeftField) ProtoMessage() {}

func (x *GameEvent_BallLeftField) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BallLeftField.ProtoReflect.Descriptor instead.
func (*GameEvent_BallLeftField) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GameEvent_BallLeftField) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BallLeftField) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BallLeftField) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

// the ball left the field via goal line and a team committed an aimless kick
type GameEvent_AimlessKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that last touched the ball
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that last touched the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball left the field [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was last touched [m]
	KickLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
}

func (x *GameEvent_AimlessKick) Reset() {
	*x = GameEvent_AimlessKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_AimlessKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_AimlessKick) ProtoMessage() {}

func (x *GameEvent_AimlessKick) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_AimlessKick.ProtoReflect.Descriptor instead.
func (*GameEvent_AimlessKick) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GameEvent_AimlessKick) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_AimlessKick) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_AimlessKick) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_AimlessKick) GetKickLocation() *geom.Vector2 {
	if x != nil {
		return x.KickLocation
	}
	return nil
}

// a team shot a goal
type GameEvent_Goal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that scored the goal
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the team that shot the goal (different from by_team for own goals)
	KickingTeam *Team `protobuf:"varint,6,opt,name=kicking_team,json=kickingTeam,enum=Team" json:"kicking_team,omitempty"`
	// the bot that shot the goal
	KickingBot *uint32 `protobuf:"varint,2,opt,name=kicking_bot,json=kickingBot" json:"kicking_bot,omitempty"`
	// the location where the ball entered the goal [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was kicked (for deciding if this was a valid goal) [m]
	KickLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
	// the maximum height the ball reached during the goal kick (for deciding if this was a valid goal) [m]
	MaxBallHeight *float32 `protobuf:"fixed32,5,opt,name=max_ball_height,json=maxBallHeight" json:"max_ball_height,omitempty"`
	// number of robots of scoring team when the ball entered the goal (for deciding if this was a valid goal)
	NumRobotsByTeam *uint32 `protobuf:"varint,7,opt,name=num_robots_by_team,json=numRobotsByTeam" json:"num_robots_by_team,omitempty"`
	// The UNIX timestamp [μs] when the scoring team last touched the ball
	LastTouchByTeam *uint64 `protobuf:"varint,8,opt,name=last_touch_by_team,json=lastTouchByTeam" json:"last_touch_by_team,omitempty"`
	// An additional message with e.g. a reason for invalid goals
	Message *string `protobuf:"bytes,9,opt,name=message" json:"message,omitempty"`
}

func (x *GameEvent_Goal) Reset() {
	*x = GameEvent_Goal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_Goal) ProtoMessage() {}

func (x *GameEvent_Goal) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_Goal.ProtoReflect.Descriptor instead.
func (*GameEvent_Goal) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 2}
}

func (x *GameEvent_Goal) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_Goal) GetKickingTeam() Team {
	if x != nil && x.KickingTeam != nil {
		return *x.KickingTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_Goal) GetKickingBot() uint32 {
	if x != nil && x.KickingBot != nil {
		return *x.KickingBot
	}
	return 0
}

func (x *GameEvent_Goal) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_Goal) GetKickLocation() *geom.Vector2 {
	if x != nil {
		return x.KickLocation
	}
	return nil
}

func (x *GameEvent_Goal) GetMaxBallHeight() float32 {
	if x != nil && x.MaxBallHeight != nil {
		return *x.MaxBallHeight
	}
	return 0
}

func (x *GameEvent_Goal) GetNumRobotsByTeam() uint32 {
	if x != nil && x.NumRobotsByTeam != nil {
		return *x.NumRobotsByTeam
	}
	return 0
}

func (x *GameEvent_Goal) GetLastTouchByTeam() uint64 {
	if x != nil && x.LastTouchByTeam != nil {
		return *x.LastTouchByTeam
	}
	return 0
}

func (x *GameEvent_Goal) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// the ball entered the goal directly during an indirect free kick
type GameEvent_IndirectGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that tried to shoot the goal
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that kicked the ball - at least the team must be set
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball entered the goal [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was kicked [m]
	KickLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
}

func (x *GameEvent_IndirectGoal) Reset() {
	*x = GameEvent_IndirectGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_IndirectGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_IndirectGoal) ProtoMessage() {}

func (x *GameEvent_IndirectGoal) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_IndirectGoal.ProtoReflect.Descriptor instead.
func (*GameEvent_IndirectGoal) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 3}
}

func (x *GameEvent_IndirectGoal) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_IndirectGoal) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_IndirectGoal) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_IndirectGoal) GetKickLocation() *geom.Vector2 {
	if x != nil {
		return x.KickLocation
	}
	return nil
}

// the ball entered the goal, but was initially chipped
type GameEvent_ChippedGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that tried to shoot the goal
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that kicked the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball entered the goal [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was kicked [m]
	KickLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
	// the maximum height [m] of the ball, before it entered the goal and since the last kick [m]
	MaxBallHeight *float32 `protobuf:"fixed32,5,opt,name=max_ball_height,json=maxBallHeight" json:"max_ball_height,omitempty"`
}

func (x *GameEvent_ChippedGoal) Reset() {
	*x = GameEvent_ChippedGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_ChippedGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_ChippedGoal) ProtoMessage() {}

func (x *GameEvent_ChippedGoal) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_ChippedGoal.ProtoReflect.Descriptor instead.
func (*GameEvent_ChippedGoal) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 4}
}

func (x *GameEvent_ChippedGoal) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_ChippedGoal) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_ChippedGoal) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_ChippedGoal) GetKickLocation() *geom.Vector2 {
	if x != nil {
		return x.KickLocation
	}
	return nil
}

func (x *GameEvent_ChippedGoal) GetMaxBallHeight() float32 {
	if x != nil && x.MaxBallHeight != nil {
		return *x.MaxBallHeight
	}
	return 0
}

// a bot moved too fast while the game was stopped
type GameEvent_BotTooFastInStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that was too fast
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the bot speed [m/s]
	Speed *float32 `protobuf:"fixed32,4,opt,name=speed" json:"speed,omitempty"`
}

func (x *GameEvent_BotTooFastInStop) Reset() {
	*x = GameEvent_BotTooFastInStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotTooFastInStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotTooFastInStop) ProtoMessage() {}

func (x *GameEvent_BotTooFastInStop) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotTooFastInStop.ProtoReflect.Descriptor instead.
func (*GameEvent_BotTooFastInStop) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 5}
}

func (x *GameEvent_BotTooFastInStop) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotTooFastInStop) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotTooFastInStop) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotTooFastInStop) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

// a bot of the defending team got too close to the kick point during a free kick
type GameEvent_DefenderTooCloseToKickPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that was found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that violates the distance to the kick point
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] from bot to the kick point (including the minimum radius)
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
}

func (x *GameEvent_DefenderTooCloseToKickPoint) Reset() {
	*x = GameEvent_DefenderTooCloseToKickPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_DefenderTooCloseToKickPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_DefenderTooCloseToKickPoint) ProtoMessage() {}

func (x *GameEvent_DefenderTooCloseToKickPoint) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_DefenderTooCloseToKickPoint.ProtoReflect.Descriptor instead.
func (*GameEvent_DefenderTooCloseToKickPoint) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 6}
}

func (x *GameEvent_DefenderTooCloseToKickPoint) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_DefenderTooCloseToKickPoint) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_DefenderTooCloseToKickPoint) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_DefenderTooCloseToKickPoint) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// two robots crashed into each other with similar speeds
type GameEvent_BotCrashDrawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the bot of the yellow team
	BotYellow *uint32 `protobuf:"varint,1,opt,name=bot_yellow,json=botYellow" json:"bot_yellow,omitempty"`
	// the bot of the blue team
	BotBlue *uint32 `protobuf:"varint,2,opt,name=bot_blue,json=botBlue" json:"bot_blue,omitempty"`
	// the location of the crash (center between both bots) [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the calculated crash speed [m/s] of the two bots
	CrashSpeed *float32 `protobuf:"fixed32,4,opt,name=crash_speed,json=crashSpeed" json:"crash_speed,omitempty"`
	// the difference [m/s] of the velocity of the two bots
	SpeedDiff *float32 `protobuf:"fixed32,5,opt,name=speed_diff,json=speedDiff" json:"speed_diff,omitempty"`
	// the angle [rad] in the range [0, π] of the bot velocity vectors
	// an angle of 0 rad (  0°) means, the bots barely touched each other
	// an angle of π rad (180°) means, the bots crashed frontal into each other
	CrashAngle *float32 `protobuf:"fixed32,6,opt,name=crash_angle,json=crashAngle" json:"crash_angle,omitempty"`
}

func (x *GameEvent_BotCrashDrawn) Reset() {
	*x = GameEvent_BotCrashDrawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotCrashDrawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotCrashDrawn) ProtoMessage() {}

func (x *GameEvent_BotCrashDrawn) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotCrashDrawn.ProtoReflect.Descriptor instead.
func (*GameEvent_BotCrashDrawn) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 7}
}

func (x *GameEvent_BotCrashDrawn) GetBotYellow() uint32 {
	if x != nil && x.BotYellow != nil {
		return *x.BotYellow
	}
	return 0
}

func (x *GameEvent_BotCrashDrawn) GetBotBlue() uint32 {
	if x != nil && x.BotBlue != nil {
		return *x.BotBlue
	}
	return 0
}

func (x *GameEvent_BotCrashDrawn) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotCrashDrawn) GetCrashSpeed() float32 {
	if x != nil && x.CrashSpeed != nil {
		return *x.CrashSpeed
	}
	return 0
}

func (x *GameEvent_BotCrashDrawn) GetSpeedDiff() float32 {
	if x != nil && x.SpeedDiff != nil {
		return *x.SpeedDiff
	}
	return 0
}

func (x *GameEvent_BotCrashDrawn) GetCrashAngle() float32 {
	if x != nil && x.CrashAngle != nil {
		return *x.CrashAngle
	}
	return 0
}

// two robots crashed into each other and one team was found guilty to due significant speed difference
type GameEvent_BotCrashUnique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that caused the crash
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that caused the crash
	Violator *uint32 `protobuf:"varint,2,opt,name=violator" json:"violator,omitempty"`
	// the bot of the opposite team that was involved in the crash
	Victim *uint32 `protobuf:"varint,3,opt,name=victim" json:"victim,omitempty"`
	// the location of the crash (center between both bots) [m]
	Location *geom.Vector2 `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	// the calculated crash speed vector [m/s] of the two bots
	CrashSpeed *float32 `protobuf:"fixed32,5,opt,name=crash_speed,json=crashSpeed" json:"crash_speed,omitempty"`
	// the difference [m/s] of the velocity of the two bots
	SpeedDiff *float32 `protobuf:"fixed32,6,opt,name=speed_diff,json=speedDiff" json:"speed_diff,omitempty"`
	// the angle [rad] in the range [0, π] of the bot velocity vectors
	// an angle of 0 rad (  0°) means, the bots barely touched each other
	// an angle of π rad (180°) means, the bots crashed frontal into each other
	CrashAngle *float32 `protobuf:"fixed32,7,opt,name=crash_angle,json=crashAngle" json:"crash_angle,omitempty"`
}

func (x *GameEvent_BotCrashUnique) Reset() {
	*x = GameEvent_BotCrashUnique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotCrashUnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotCrashUnique) ProtoMessage() {}

func (x *GameEvent_BotCrashUnique) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotCrashUnique.ProtoReflect.Descriptor instead.
func (*GameEvent_BotCrashUnique) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 8}
}

func (x *GameEvent_BotCrashUnique) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotCrashUnique) GetViolator() uint32 {
	if x != nil && x.Violator != nil {
		return *x.Violator
	}
	return 0
}

func (x *GameEvent_BotCrashUnique) GetVictim() uint32 {
	if x != nil && x.Victim != nil {
		return *x.Victim
	}
	return 0
}

func (x *GameEvent_BotCrashUnique) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotCrashUnique) GetCrashSpeed() float32 {
	if x != nil && x.CrashSpeed != nil {
		return *x.CrashSpeed
	}
	return 0
}

func (x *GameEvent_BotCrashUnique) GetSpeedDiff() float32 {
	if x != nil && x.SpeedDiff != nil {
		return *x.SpeedDiff
	}
	return 0
}

func (x *GameEvent_BotCrashUnique) GetCrashAngle() float32 {
	if x != nil && x.CrashAngle != nil {
		return *x.CrashAngle
	}
	return 0
}

// a bot pushed another bot over a significant distance
type GameEvent_BotPushedBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that pushed the other team
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that pushed the other bot
	Violator *uint32 `protobuf:"varint,2,opt,name=violator" json:"violator,omitempty"`
	// the bot of the opposite team that was pushed
	Victim *uint32 `protobuf:"varint,3,opt,name=victim" json:"victim,omitempty"`
	// the location of the push (center between both bots) [m]
	Location *geom.Vector2 `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	// the pushed distance [m]
	PushedDistance *float32 `protobuf:"fixed32,5,opt,name=pushed_distance,json=pushedDistance" json:"pushed_distance,omitempty"`
}

func (x *GameEvent_BotPushedBot) Reset() {
	*x = GameEvent_BotPushedBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotPushedBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotPushedBot) ProtoMessage() {}

func (x *GameEvent_BotPushedBot) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotPushedBot.ProtoReflect.Descriptor instead.
func (*GameEvent_BotPushedBot) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 9}
}

func (x *GameEvent_BotPushedBot) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotPushedBot) GetViolator() uint32 {
	if x != nil && x.Violator != nil {
		return *x.Violator
	}
	return 0
}

func (x *GameEvent_BotPushedBot) GetVictim() uint32 {
	if x != nil && x.Victim != nil {
		return *x.Victim
	}
	return 0
}

func (x *GameEvent_BotPushedBot) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotPushedBot) GetPushedDistance() float32 {
	if x != nil && x.PushedDistance != nil {
		return *x.PushedDistance
	}
	return 0
}

// a bot tipped over
type GameEvent_BotTippedOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that tipped over
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location of the ball at the moment when this foul occurred [m]
	BallLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
}

func (x *GameEvent_BotTippedOver) Reset() {
	*x = GameEvent_BotTippedOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotTippedOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotTippedOver) ProtoMessage() {}

func (x *GameEvent_BotTippedOver) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotTippedOver.ProtoReflect.Descriptor instead.
func (*GameEvent_BotTippedOver) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 10}
}

func (x *GameEvent_BotTippedOver) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotTippedOver) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotTippedOver) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotTippedOver) GetBallLocation() *geom.Vector2 {
	if x != nil {
		return x.BallLocation
	}
	return nil
}

// a bot dropped parts
type GameEvent_BotDroppedParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that dropped the parts
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the parts were dropped [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location of the ball at the moment when this foul occurred [m]
	BallLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
}

func (x *GameEvent_BotDroppedParts) Reset() {
	*x = GameEvent_BotDroppedParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotDroppedParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotDroppedParts) ProtoMessage() {}

func (x *GameEvent_BotDroppedParts) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotDroppedParts.ProtoReflect.Descriptor instead.
func (*GameEvent_BotDroppedParts) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 11}
}

func (x *GameEvent_BotDroppedParts) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotDroppedParts) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotDroppedParts) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotDroppedParts) GetBallLocation() *geom.Vector2 {
	if x != nil {
		return x.BallLocation
	}
	return nil
}

// a defender other than the keeper was fully located inside its own defense and touched the ball
type GameEvent_DefenderInDefenseArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is inside the penalty area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] from bot case to the nearest point outside the defense area
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
}

func (x *GameEvent_DefenderInDefenseArea) Reset() {
	*x = GameEvent_DefenderInDefenseArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_DefenderInDefenseArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_DefenderInDefenseArea) ProtoMessage() {}

func (x *GameEvent_DefenderInDefenseArea) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_DefenderInDefenseArea.ProtoReflect.Descriptor instead.
func (*GameEvent_DefenderInDefenseArea) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 12}
}

func (x *GameEvent_DefenderInDefenseArea) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_DefenderInDefenseArea) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_DefenderInDefenseArea) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_DefenderInDefenseArea) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// a defender other than the keeper was partially located inside its own defense area and touched the ball
type GameEvent_DefenderInDefenseAreaPartially struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is partially inside the penalty area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] that the bot is inside the penalty area
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	// the location of the ball at the moment when this foul occurred [m]
	BallLocation *geom.Vector2 `protobuf:"bytes,5,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
}

func (x *GameEvent_DefenderInDefenseAreaPartially) Reset() {
	*x = GameEvent_DefenderInDefenseAreaPartially{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_DefenderInDefenseAreaPartially) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_DefenderInDefenseAreaPartially) ProtoMessage() {}

func (x *GameEvent_DefenderInDefenseAreaPartially) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_DefenderInDefenseAreaPartially.ProtoReflect.Descriptor instead.
func (*GameEvent_DefenderInDefenseAreaPartially) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 13}
}

func (x *GameEvent_DefenderInDefenseAreaPartially) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_DefenderInDefenseAreaPartially) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_DefenderInDefenseAreaPartially) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_DefenderInDefenseAreaPartially) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *GameEvent_DefenderInDefenseAreaPartially) GetBallLocation() *geom.Vector2 {
	if x != nil {
		return x.BallLocation
	}
	return nil
}

// an attacker touched the ball inside the opponent defense area
type GameEvent_AttackerTouchedBallInDefenseArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is inside the penalty area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] that the bot is inside the penalty area
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) Reset() {
	*x = GameEvent_AttackerTouchedBallInDefenseArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_AttackerTouchedBallInDefenseArea) ProtoMessage() {}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_AttackerTouchedBallInDefenseArea.ProtoReflect.Descriptor instead.
func (*GameEvent_AttackerTouchedBallInDefenseArea) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 14}
}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_AttackerTouchedBallInDefenseArea) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// a bot kicked the ball too fast
type GameEvent_BotKickedBallTooFast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that kicked too fast
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the ball at the time of the highest speed [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the absolute initial ball speed (kick speed) [m/s]
	InitialBallSpeed *float32 `protobuf:"fixed32,4,opt,name=initial_ball_speed,json=initialBallSpeed" json:"initial_ball_speed,omitempty"`
	// was the ball chipped?
	Chipped *bool `protobuf:"varint,5,opt,name=chipped" json:"chipped,omitempty"`
}

func (x *GameEvent_BotKickedBallTooFast) Reset() {
	*x = GameEvent_BotKickedBallTooFast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotKickedBallTooFast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotKickedBallTooFast) ProtoMessage() {}

func (x *GameEvent_BotKickedBallTooFast) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotKickedBallTooFast.ProtoReflect.Descriptor instead.
func (*GameEvent_BotKickedBallTooFast) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 15}
}

func (x *GameEvent_BotKickedBallTooFast) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotKickedBallTooFast) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotKickedBallTooFast) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotKickedBallTooFast) GetInitialBallSpeed() float32 {
	if x != nil && x.InitialBallSpeed != nil {
		return *x.InitialBallSpeed
	}
	return 0
}

func (x *GameEvent_BotKickedBallTooFast) GetChipped() bool {
	if x != nil && x.Chipped != nil {
		return *x.Chipped
	}
	return false
}

// a bot dribbled to ball too far
type GameEvent_BotDribbledBallTooFar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that dribbled too far
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the dribbling started [m]
	Start *geom.Vector2 `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// the location where the maximum dribbling distance was reached [m]
	End *geom.Vector2 `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
}

func (x *GameEvent_BotDribbledBallTooFar) Reset() {
	*x = GameEvent_BotDribbledBallTooFar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotDribbledBallTooFar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotDribbledBallTooFar) ProtoMessage() {}

func (x *GameEvent_BotDribbledBallTooFar) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotDribbledBallTooFar.ProtoReflect.Descriptor instead.
func (*GameEvent_BotDribbledBallTooFar) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 16}
}

func (x *GameEvent_BotDribbledBallTooFar) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotDribbledBallTooFar) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotDribbledBallTooFar) GetStart() *geom.Vector2 {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GameEvent_BotDribbledBallTooFar) GetEnd() *geom.Vector2 {
	if x != nil {
		return x.End
	}
	return nil
}

// an attacker touched the opponent robot inside defense area
type GameEvent_AttackerTouchedOpponentInDefenseArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that touched the opponent robot
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the bot of the opposite team that was touched
	Victim *uint32 `protobuf:"varint,4,opt,name=victim" json:"victim,omitempty"`
	// the location of the contact point between both bots [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) Reset() {
	*x = GameEvent_AttackerTouchedOpponentInDefenseArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_AttackerTouchedOpponentInDefenseArea) ProtoMessage() {}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_AttackerTouchedOpponentInDefenseArea.ProtoReflect.Descriptor instead.
func (*GameEvent_AttackerTouchedOpponentInDefenseArea) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 17}
}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) GetVictim() uint32 {
	if x != nil && x.Victim != nil {
		return *x.Victim
	}
	return 0
}

func (x *GameEvent_AttackerTouchedOpponentInDefenseArea) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

// an attacker touched the ball multiple times when it was not allowed to
type GameEvent_AttackerDoubleTouchedBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that touched the ball twice
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the ball when it was first touched [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (x *GameEvent_AttackerDoubleTouchedBall) Reset() {
	*x = GameEvent_AttackerDoubleTouchedBall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_AttackerDoubleTouchedBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_AttackerDoubleTouchedBall) ProtoMessage() {}

func (x *GameEvent_AttackerDoubleTouchedBall) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_AttackerDoubleTouchedBall.ProtoReflect.Descriptor instead.
func (*GameEvent_AttackerDoubleTouchedBall) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 18}
}

func (x *GameEvent_AttackerDoubleTouchedBall) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_AttackerDoubleTouchedBall) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_AttackerDoubleTouchedBall) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

// an attacker was located too near to the opponent defense area during stop or free kick
type GameEvent_AttackerTooCloseToDefenseArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is too close to the defense area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] of the bot to the penalty area
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	// the location of the ball at the moment when this foul occurred [m]
	BallLocation *geom.Vector2 `protobuf:"bytes,5,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) Reset() {
	*x = GameEvent_AttackerTooCloseToDefenseArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_AttackerTooCloseToDefenseArea) ProtoMessage() {}

func (x *GameEvent_AttackerTooCloseToDefenseArea) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_AttackerTooCloseToDefenseArea.ProtoReflect.Descriptor instead.
func (*GameEvent_AttackerTooCloseToDefenseArea) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 19}
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *GameEvent_AttackerTooCloseToDefenseArea) GetBallLocation() *geom.Vector2 {
	if x != nil {
		return x.BallLocation
	}
	return nil
}

// a bot held the ball for too long
type GameEvent_BotHeldBallDeliberately struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that holds the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the ball [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the duration [s] that the bot hold the ball
	Duration *float32 `protobuf:"fixed32,4,opt,name=duration" json:"duration,omitempty"`
}

func (x *GameEvent_BotHeldBallDeliberately) Reset() {
	*x = GameEvent_BotHeldBallDeliberately{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotHeldBallDeliberately) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotHeldBallDeliberately) ProtoMessage() {}

func (x *GameEvent_BotHeldBallDeliberately) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotHeldBallDeliberately.ProtoReflect.Descriptor instead.
func (*GameEvent_BotHeldBallDeliberately) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 20}
}

func (x *GameEvent_BotHeldBallDeliberately) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotHeldBallDeliberately) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotHeldBallDeliberately) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_BotHeldBallDeliberately) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

// a bot interfered the ball placement of the other team
type GameEvent_BotInterferedPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that interfered the placement
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot [m]
	Location *geom.Vector2 `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (x *GameEvent_BotInterferedPlacement) Reset() {
	*x = GameEvent_BotInterferedPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotInterferedPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotInterferedPlacement) ProtoMessage() {}

func (x *GameEvent_BotInterferedPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotInterferedPlacement.ProtoReflect.Descriptor instead.
func (*GameEvent_BotInterferedPlacement) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 21}
}

func (x *GameEvent_BotInterferedPlacement) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BotInterferedPlacement) GetByBot() uint32 {
	if x != nil && x.ByBot != nil {
		return *x.ByBot
	}
	return 0
}

func (x *GameEvent_BotInterferedPlacement) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

// a team collected multiple yellow cards
type GameEvent_MultipleCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that received multiple yellow cards
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
}

func (x *GameEvent_MultipleCards) Reset() {
	*x = GameEvent_MultipleCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_MultipleCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_MultipleCards) ProtoMessage() {}

func (x *GameEvent_MultipleCards) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_MultipleCards.ProtoReflect.Descriptor instead.
func (*GameEvent_MultipleCards) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 22}
}

func (x *GameEvent_MultipleCards) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

// a team collected multiple fouls, which results in a yellow card
type GameEvent_MultipleFouls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that collected multiple fouls
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the list of game events that caused the multiple fouls
	CausedGameEvents []*GameEvent `protobuf:"bytes,2,rep,name=caused_game_events,json=causedGameEvents" json:"caused_game_events,omitempty"`
}

func (x *GameEvent_MultipleFouls) Reset() {
	*x = GameEvent_MultipleFouls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_MultipleFouls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_MultipleFouls) ProtoMessage() {}

func (x *GameEvent_MultipleFouls) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_MultipleFouls.ProtoReflect.Descriptor instead.
func (*GameEvent_MultipleFouls) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 23}
}

func (x *GameEvent_MultipleFouls) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_MultipleFouls) GetCausedGameEvents() []*GameEvent {
	if x != nil {
		return x.CausedGameEvents
	}
	return nil
}

// a team failed to place the ball multiple times in a row
type GameEvent_MultiplePlacementFailures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that failed multiple times
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
}

func (x *GameEvent_MultiplePlacementFailures) Reset() {
	*x = GameEvent_MultiplePlacementFailures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_MultiplePlacementFailures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_MultiplePlacementFailures) ProtoMessage() {}

func (x *GameEvent_MultiplePlacementFailures) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_MultiplePlacementFailures.ProtoReflect.Descriptor instead.
func (*GameEvent_MultiplePlacementFailures) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 24}
}

func (x *GameEvent_MultiplePlacementFailures) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

// timeout waiting for the attacking team to perform the free kick
type GameEvent_KickTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that that should have kicked
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball [m]
	Location *geom.Vector2 `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// the time [s] that was waited
	Time *float32 `protobuf:"fixed32,3,opt,name=time" json:"time,omitempty"`
}

func (x *GameEvent_KickTimeout) Reset() {
	*x = GameEvent_KickTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_KickTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_KickTimeout) ProtoMessage() {}

func (x *GameEvent_KickTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_KickTimeout.ProtoReflect.Descriptor instead.
func (*GameEvent_KickTimeout) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 25}
}

func (x *GameEvent_KickTimeout) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_KickTimeout) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_KickTimeout) GetTime() float32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

// game was stuck
type GameEvent_NoProgressInGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the location of the ball
	Location *geom.Vector2 `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// the time [s] that was waited
	Time *float32 `protobuf:"fixed32,2,opt,name=time" json:"time,omitempty"`
}

func (x *GameEvent_NoProgressInGame) Reset() {
	*x = GameEvent_NoProgressInGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_NoProgressInGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_NoProgressInGame) ProtoMessage() {}

func (x *GameEvent_NoProgressInGame) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_NoProgressInGame.ProtoReflect.Descriptor instead.
func (*GameEvent_NoProgressInGame) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 26}
}

func (x *GameEvent_NoProgressInGame) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_NoProgressInGame) GetTime() float32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

// ball placement failed
type GameEvent_PlacementFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that failed
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the remaining distance [m] from ball to placement position
	RemainingDistance *float32 `protobuf:"fixed32,2,opt,name=remaining_distance,json=remainingDistance" json:"remaining_distance,omitempty"`
	// the distance [m] of the nearest own robot to the ball
	NearestOwnBotDistance *float32 `protobuf:"fixed32,3,opt,name=nearest_own_bot_distance,json=nearestOwnBotDistance" json:"nearest_own_bot_distance,omitempty"`
}

func (x *GameEvent_PlacementFailed) Reset() {
	*x = GameEvent_PlacementFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_PlacementFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_PlacementFailed) ProtoMessage() {}

func (x *GameEvent_PlacementFailed) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_PlacementFailed.ProtoReflect.Descriptor instead.
func (*GameEvent_PlacementFailed) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 27}
}

func (x *GameEvent_PlacementFailed) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_PlacementFailed) GetRemainingDistance() float32 {
	if x != nil && x.RemainingDistance != nil {
		return *x.RemainingDistance
	}
	return 0
}

func (x *GameEvent_PlacementFailed) GetNearestOwnBotDistance() float32 {
	if x != nil && x.NearestOwnBotDistance != nil {
		return *x.NearestOwnBotDistance
	}
	return 0
}

// a team was found guilty for minor unsporting behavior
type GameEvent_UnsportingBehaviorMinor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// an explanation of the situation and decision
	Reason *string `protobuf:"bytes,2,req,name=reason" json:"reason,omitempty"`
}

func (x *GameEvent_UnsportingBehaviorMinor) Reset() {
	*x = GameEvent_UnsportingBehaviorMinor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_UnsportingBehaviorMinor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_UnsportingBehaviorMinor) ProtoMessage() {}

func (x *GameEvent_UnsportingBehaviorMinor) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_UnsportingBehaviorMinor.ProtoReflect.Descriptor instead.
func (*GameEvent_UnsportingBehaviorMinor) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 28}
}

func (x *GameEvent_UnsportingBehaviorMinor) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_UnsportingBehaviorMinor) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// a team was found guilty for major unsporting behavior
type GameEvent_UnsportingBehaviorMajor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// an explanation of the situation and decision
	Reason *string `protobuf:"bytes,2,req,name=reason" json:"reason,omitempty"`
}

func (x *GameEvent_UnsportingBehaviorMajor) Reset() {
	*x = GameEvent_UnsportingBehaviorMajor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_UnsportingBehaviorMajor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_UnsportingBehaviorMajor) ProtoMessage() {}

func (x *GameEvent_UnsportingBehaviorMajor) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_UnsportingBehaviorMajor.ProtoReflect.Descriptor instead.
func (*GameEvent_UnsportingBehaviorMajor) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 29}
}

func (x *GameEvent_UnsportingBehaviorMajor) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_UnsportingBehaviorMajor) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// a keeper held the ball in its defense area for too long
type GameEvent_KeeperHeldBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball [m]
	Location *geom.Vector2 `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// the duration [s] that the keeper hold the ball
	Duration *float32 `protobuf:"fixed32,3,opt,name=duration" json:"duration,omitempty"`
}

func (x *GameEvent_KeeperHeldBall) Reset() {
	*x = GameEvent_KeeperHeldBall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_KeeperHeldBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_KeeperHeldBall) ProtoMessage() {}

func (x *GameEvent_KeeperHeldBall) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_KeeperHeldBall.ProtoReflect.Descriptor instead.
func (*GameEvent_KeeperHeldBall) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 30}
}

func (x *GameEvent_KeeperHeldBall) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_KeeperHeldBall) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_KeeperHeldBall) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

// a team successfully placed the ball
type GameEvent_PlacementSucceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that did the placement
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the time [s] taken for placing the ball
	TimeTaken *float32 `protobuf:"fixed32,2,opt,name=time_taken,json=timeTaken" json:"time_taken,omitempty"`
	// the distance [m] between placement location and actual ball position
	Precision *float32 `protobuf:"fixed32,3,opt,name=precision" json:"precision,omitempty"`
	// the distance [m] between the initial ball location and the placement position
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
}

func (x *GameEvent_PlacementSucceeded) Reset() {
	*x = GameEvent_PlacementSucceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_PlacementSucceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_PlacementSucceeded) ProtoMessage() {}

func (x *GameEvent_PlacementSucceeded) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_PlacementSucceeded.ProtoReflect.Descriptor instead.
func (*GameEvent_PlacementSucceeded) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 31}
}

func (x *GameEvent_PlacementSucceeded) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_PlacementSucceeded) GetTimeTaken() float32 {
	if x != nil && x.TimeTaken != nil {
		return *x.TimeTaken
	}
	return 0
}

func (x *GameEvent_PlacementSucceeded) GetPrecision() float32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *GameEvent_PlacementSucceeded) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// both teams are prepared - all conditions are met to continue (with kickoff or penalty kick)
type GameEvent_Prepared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the time [s] taken for preparing
	TimeTaken *float32 `protobuf:"fixed32,1,opt,name=time_taken,json=timeTaken" json:"time_taken,omitempty"`
}

func (x *GameEvent_Prepared) Reset() {
	*x = GameEvent_Prepared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_Prepared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_Prepared) ProtoMessage() {}

func (x *GameEvent_Prepared) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_Prepared.ProtoReflect.Descriptor instead.
func (*GameEvent_Prepared) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 32}
}

func (x *GameEvent_Prepared) GetTimeTaken() float32 {
	if x != nil && x.TimeTaken != nil {
		return *x.TimeTaken
	}
	return 0
}

// bots are being substituted by a team
type GameEvent_BotSubstitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that substitutes robots
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
}

func (x *GameEvent_BotSubstitution) Reset() {
	*x = GameEvent_BotSubstitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BotSubstitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BotSubstitution) ProtoMessage() {}

func (x *GameEvent_BotSubstitution) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BotSubstitution.ProtoReflect.Descriptor instead.
func (*GameEvent_BotSubstitution) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 33}
}

func (x *GameEvent_BotSubstitution) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

// A foul for excessive bot substitutions
type GameEvent_ExcessiveBotSubstitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that substitutes robots
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
}

func (x *GameEvent_ExcessiveBotSubstitution) Reset() {
	*x = GameEvent_ExcessiveBotSubstitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_ExcessiveBotSubstitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_ExcessiveBotSubstitution) ProtoMessage() {}

func (x *GameEvent_ExcessiveBotSubstitution) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_ExcessiveBotSubstitution.ProtoReflect.Descriptor instead.
func (*GameEvent_ExcessiveBotSubstitution) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 34}
}

func (x *GameEvent_ExcessiveBotSubstitution) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

// A challenge flag, requested by a team previously, is flagged
type GameEvent_ChallengeFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that requested the challenge flag
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
}

func (x *GameEvent_ChallengeFlag) Reset() {
	*x = GameEvent_ChallengeFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_ChallengeFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_ChallengeFlag) ProtoMessage() {}

func (x *GameEvent_ChallengeFlag) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_ChallengeFlag.ProtoReflect.Descriptor instead.
func (*GameEvent_ChallengeFlag) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 35}
}

func (x *GameEvent_ChallengeFlag) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

// A challenge, flagged recently, has been handled by the referee
type GameEvent_ChallengeFlagHandled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that requested the challenge flag
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the challenge was accepted by the referee
	Accepted *bool `protobuf:"varint,2,req,name=accepted" json:"accepted,omitempty"`
}

func (x *GameEvent_ChallengeFlagHandled) Reset() {
	*x = GameEvent_ChallengeFlagHandled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_ChallengeFlagHandled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_ChallengeFlagHandled) ProtoMessage() {}

func (x *GameEvent_ChallengeFlagHandled) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_ChallengeFlagHandled.ProtoReflect.Descriptor instead.
func (*GameEvent_ChallengeFlagHandled) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 36}
}

func (x *GameEvent_ChallengeFlagHandled) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_ChallengeFlagHandled) GetAccepted() bool {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return false
}

// An emergency stop, requested by team previously, occurred
type GameEvent_EmergencyStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that substitutes robots
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
}

func (x *GameEvent_EmergencyStop) Reset() {
	*x = GameEvent_EmergencyStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_EmergencyStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_EmergencyStop) ProtoMessage() {}

func (x *GameEvent_EmergencyStop) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_EmergencyStop.ProtoReflect.Descriptor instead.
func (*GameEvent_EmergencyStop) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 37}
}

func (x *GameEvent_EmergencyStop) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

// a team has too many robots on the field
type GameEvent_TooManyRobots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that has too many robots
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// number of robots allowed at the moment
	NumRobotsAllowed *int32 `protobuf:"varint,2,opt,name=num_robots_allowed,json=numRobotsAllowed" json:"num_robots_allowed,omitempty"`
	// number of robots currently on the field
	NumRobotsOnField *int32 `protobuf:"varint,3,opt,name=num_robots_on_field,json=numRobotsOnField" json:"num_robots_on_field,omitempty"`
	// the location of the ball at the moment when this foul occurred [m]
	BallLocation *geom.Vector2 `protobuf:"bytes,4,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
}

func (x *GameEvent_TooManyRobots) Reset() {
	*x = GameEvent_TooManyRobots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_TooManyRobots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_TooManyRobots) ProtoMessage() {}

func (x *GameEvent_TooManyRobots) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_TooManyRobots.ProtoReflect.Descriptor instead.
func (*GameEvent_TooManyRobots) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 38}
}

func (x *GameEvent_TooManyRobots) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_TooManyRobots) GetNumRobotsAllowed() int32 {
	if x != nil && x.NumRobotsAllowed != nil {
		return *x.NumRobotsAllowed
	}
	return 0
}

func (x *GameEvent_TooManyRobots) GetNumRobotsOnField() int32 {
	if x != nil && x.NumRobotsOnField != nil {
		return *x.NumRobotsOnField
	}
	return 0
}

func (x *GameEvent_TooManyRobots) GetBallLocation() *geom.Vector2 {
	if x != nil {
		return x.BallLocation
	}
	return nil
}

// a robot chipped the ball over the field boundary out of the playing surface
type GameEvent_BoundaryCrossing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that has too many robots
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball [m]
	Location *geom.Vector2 `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (x *GameEvent_BoundaryCrossing) Reset() {
	*x = GameEvent_BoundaryCrossing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_BoundaryCrossing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_BoundaryCrossing) ProtoMessage() {}

func (x *GameEvent_BoundaryCrossing) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_BoundaryCrossing.ProtoReflect.Descriptor instead.
func (*GameEvent_BoundaryCrossing) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 39}
}

func (x *GameEvent_BoundaryCrossing) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_BoundaryCrossing) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

// the penalty kick failed (by time or by keeper)
type GameEvent_PenaltyKickFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the team that last touched the ball
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball at the moment of this event [m]
	Location *geom.Vector2 `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// an explanation of the failure
	Reason *string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (x *GameEvent_PenaltyKickFailed) Reset() {
	*x = GameEvent_PenaltyKickFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_game_event_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent_PenaltyKickFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent_PenaltyKickFailed) ProtoMessage() {}

func (x *GameEvent_PenaltyKickFailed) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_game_event_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent_PenaltyKickFailed.ProtoReflect.Descriptor instead.
func (*GameEvent_PenaltyKickFailed) Descriptor() ([]byte, []int) {
	return file_ssl_gc_game_event_proto_rawDescGZIP(), []int{0, 40}
}

func (x *GameEvent_PenaltyKickFailed) GetByTeam() Team {
	if x != nil && x.ByTeam != nil {
		return *x.ByTeam
	}
	return Team_UNKNOWN
}

func (x *GameEvent_PenaltyKickFailed) GetLocation() *geom.Vector2 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GameEvent_PenaltyKickFailed) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

var File_ssl_gc_game_event_proto protoreflect.FileDescriptor

var file_ssl_gc_game_event_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x55, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x56, 0x0a,
	0x1a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61,
	0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x16, 0x62,
	0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x15, 0x62, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x69, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x69,
	0x6d, 0x6c, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x69, 0x6d,
	0x6c, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x75, 0x0a, 0x22, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x48, 0x00,
	0x52, 0x1d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x5b, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x4a, 0x0a, 0x11,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0e, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x12,
	0x5c, 0x0a, 0x19, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x6f, 0x74, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x6f, 0x46, 0x61, 0x72, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x44, 0x72, 0x69, 0x62, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x72, 0x12, 0x3f, 0x0a,
	0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6f, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x12, 0x61,
	0x0a, 0x1a, 0x62, 0x6f, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x6f, 0x74, 0x48, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x62, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x17, 0x62, 0x6f, 0x74, 0x48, 0x65, 0x6c,
	0x64, 0x42, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x54, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x54, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f,
	0x62, 0x6f, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12,
	0x7e, 0x0a, 0x25, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x48, 0x00, 0x52, 0x20, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x59, 0x0a, 0x18, 0x62, 0x6f, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f,
	0x74, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f, 0x46, 0x61,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x62, 0x6f,
	0x74, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x64,
	0x72, 0x61, 0x77, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44,
	0x72, 0x61, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x44, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x6f, 0x0a, 0x20, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6b,
	0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x4b, 0x69,
	0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x4b, 0x69, 0x63,
	0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f,
	0x6f, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6f, 0x74, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x6f,
	0x70, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6f, 0x74, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x5d, 0x0a, 0x18, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x62, 0x6f,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x67,
	0x6f, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x1c, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x41,
	0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x75, 0x6c, 0x73,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x75, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x75, 0x6c,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1a, 0x65, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x57, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x60, 0x0a, 0x19, 0x75, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x75, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x19, 0x75, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x75,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a,
	0x0d, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x47, 0x6f,
	0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x29, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x24,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x4f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x9d, 0x01, 0x0a, 0x31, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x2b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x18, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x73,
	0x68, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73,
	0x68, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x52,
	0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x13, 0x62,
	0x6f, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x7b, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x1e, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x12,
	0x6a, 0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0d, 0x42,
	0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x07,
	0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79,
	0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x99, 0x01, 0x0a, 0x0b, 0x41, 0x69,
	0x6d, 0x6c, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f,
	0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74,
	0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe2, 0x02, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28,
	0x0a, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0b, 0x6b, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6c, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x42, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x42, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x07, 0x62,
	0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42,
	0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc1, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x85, 0x01, 0x0a, 0x10,
	0x42, 0x6f, 0x74, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x1a, 0x96, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x6f, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xd0, 0x01, 0x0a,
	0x0d, 0x42, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x6f, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x1a,
	0xeb, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x1a, 0xb1, 0x01,
	0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x12, 0x1e,
	0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6d, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x54, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x9d, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x90, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f,
	0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74,
	0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0xc8, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52,
	0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9b, 0x01,
	0x0a, 0x20, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xbb, 0x01, 0x0a, 0x14,
	0x42, 0x6f, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f,
	0x46, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x1a, 0x8a, 0x01, 0x0a, 0x15, 0x42, 0x6f,
	0x74, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6f,
	0x46, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x9b, 0x01, 0x0a, 0x24, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x12, 0x24,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x78, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x6c, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc7,
	0x01, 0x0a, 0x1d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x92, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x74,
	0x48, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x75, 0x0a,
	0x16, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x62, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x69, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x46, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x12, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x3b, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x67, 0x0a,
	0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x07,
	0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x4c, 0x0a, 0x10, 0x4e, 0x6f, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x61, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6e, 0x65, 0x61, 0x72, 0x65,
	0x73, 0x74, 0x4f, 0x77, 0x6e, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x51, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x62,
	0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x72, 0x0a, 0x0e, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x48, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8d, 0x01, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x29, 0x0a, 0x08, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x1a, 0x31, 0x0a, 0x0f, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x3a, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x1a, 0x2f, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x52, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x07, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x2f, 0x0a, 0x0d, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0xbb, 0x01, 0x0a, 0x0d, 0x54,
	0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x07,
	0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x73, 0x4f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x58, 0x0a, 0x10, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x07,
	0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x71, 0x0a, 0x11, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x06, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb5, 0x0a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54,
	0x4f, 0x55, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47,
	0x4f, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x49,
	0x4d, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x43,
	0x52, 0x4f, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x45,
	0x50, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x0d, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x42, 0x42, 0x4c, 0x45, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x41, 0x52, 0x10, 0x11, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x4f, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x54,
	0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4f, 0x54, 0x5f, 0x48, 0x45, 0x4c, 0x44, 0x5f, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x59,
	0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x54, 0x5f, 0x54, 0x49, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x54, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x10, 0x2f, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48,
	0x45, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x53, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x54,
	0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f, 0x54, 0x5f, 0x43,
	0x52, 0x41, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x16, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x4e,
	0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4b, 0x49, 0x43, 0x4b,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x54, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x14,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x30,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x47, 0x4f, 0x41,
	0x4c, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x2a, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10,
	0x0e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x45,
	0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x53, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x4c, 0x53, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x4f, 0x42,
	0x4f, 0x54, 0x53, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x44, 0x10, 0x2e, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x2d, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x24, 0x12, 0x10, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x0d, 0x49, 0x4e, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x14, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x10, 0x0a, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x31, 0x0a, 0x29,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x44,
	0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x46,
	0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x10, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x39, 0x0a, 0x31, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x55, 0x43,
	0x48, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x4b, 0x49,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x28, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x18, 0x42, 0x4f,
	0x54, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x53,
	0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x16,
	0x42, 0x4f, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x53,
	0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x19, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x22,
	0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45,
	0x4e, 0x53, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x4c, 0x59, 0x10, 0x1e, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x53, 0x10, 0x21, 0x1a, 0x02, 0x08, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f, 0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c,
	0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
}

var (
	file_ssl_gc_game_event_proto_rawDescOnce sync.Once
	file_ssl_gc_game_event_proto_rawDescData = file_ssl_gc_game_event_proto_rawDesc
)

func file_ssl_gc_game_event_proto_rawDescGZIP() []byte {
	file_ssl_gc_game_event_proto_rawDescOnce.Do(func() {
		file_ssl_gc_game_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_gc_game_event_proto_rawDescData)
	})
	return file_ssl_gc_game_event_proto_rawDescData
}

var file_ssl_gc_game_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ssl_gc_game_event_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_ssl_gc_game_event_proto_goTypes = []interface{}{
	(GameEvent_Type)(0),                                    // 0: GameEvent.Type
	(*GameEvent)(nil),                                      // 1: GameEvent
	(*GameEvent_BallLeftField)(nil),                        // 2: GameEvent.BallLeftField
	(*GameEvent_AimlessKick)(nil),                          // 3: GameEvent.AimlessKick
	(*GameEvent_Goal)(nil),                                 // 4: GameEvent.Goal
	(*GameEvent_IndirectGoal)(nil),                         // 5: GameEvent.IndirectGoal
	(*GameEvent_ChippedGoal)(nil),                          // 6: GameEvent.ChippedGoal
	(*GameEvent_BotTooFastInStop)(nil),                     // 7: GameEvent.BotTooFastInStop
	(*GameEvent_DefenderTooCloseToKickPoint)(nil),          // 8: GameEvent.DefenderTooCloseToKickPoint
	(*GameEvent_BotCrashDrawn)(nil),                        // 9: GameEvent.BotCrashDrawn
	(*GameEvent_BotCrashUnique)(nil),                       // 10: GameEvent.BotCrashUnique
	(*GameEvent_BotPushedBot)(nil),                         // 11: GameEvent.BotPushedBot
	(*GameEvent_BotTippedOver)(nil),                        // 12: GameEvent.BotTippedOver
	(*GameEvent_BotDroppedParts)(nil),                      // 13: GameEvent.BotDroppedParts
	(*GameEvent_DefenderInDefenseArea)(nil),                // 14: GameEvent.DefenderInDefenseArea
	(*GameEvent_DefenderInDefenseAreaPartially)(nil),       // 15: GameEvent.DefenderInDefenseAreaPartially
	(*GameEvent_AttackerTouchedBallInDefenseArea)(nil),     // 16: GameEvent.AttackerTouchedBallInDefenseArea
	(*GameEvent_BotKickedBallTooFast)(nil),                 // 17: GameEvent.BotKickedBallTooFast
	(*GameEvent_BotDribbledBallTooFar)(nil),                // 18: GameEvent.BotDribbledBallTooFar
	(*GameEvent_AttackerTouchedOpponentInDefenseArea)(nil), // 19: GameEvent.AttackerTouchedOpponentInDefenseArea
	(*GameEvent_AttackerDoubleTouchedBall)(nil),            // 20: GameEvent.AttackerDoubleTouchedBall
	(*GameEvent_AttackerTooCloseToDefenseArea)(nil),        // 21: GameEvent.AttackerTooCloseToDefenseArea
	(*GameEvent_BotHeldBallDeliberately)(nil),              // 22: GameEvent.BotHeldBallDeliberately
	(*GameEvent_BotInterferedPlacement)(nil),               // 23: GameEvent.BotInterferedPlacement
	(*GameEvent_MultipleCards)(nil),                        // 24: GameEvent.MultipleCards
	(*GameEvent_MultipleFouls)(nil),                        // 25: GameEvent.MultipleFouls
	(*GameEvent_MultiplePlacementFailures)(nil),            // 26: GameEvent.MultiplePlacementFailures
	(*GameEvent_KickTimeout)(nil),                          // 27: GameEvent.KickTimeout
	(*GameEvent_NoProgressInGame)(nil),                     // 28: GameEvent.NoProgressInGame
	(*GameEvent_PlacementFailed)(nil),                      // 29: GameEvent.PlacementFailed
	(*GameEvent_UnsportingBehaviorMinor)(nil),              // 30: GameEvent.UnsportingBehaviorMinor
	(*GameEvent_UnsportingBehaviorMajor)(nil),              // 31: GameEvent.UnsportingBehaviorMajor
	(*GameEvent_KeeperHeldBall)(nil),                       // 32: GameEvent.KeeperHeldBall
	(*GameEvent_PlacementSucceeded)(nil),                   // 33: GameEvent.PlacementSucceeded
	(*GameEvent_Prepared)(nil),                             // 34: GameEvent.Prepared
	(*GameEvent_BotSubstitution)(nil),                      // 35: GameEvent.BotSubstitution
	(*GameEvent_ExcessiveBotSubstitution)(nil),             // 36: GameEvent.ExcessiveBotSubstitution
	(*GameEvent_ChallengeFlag)(nil),                        // 37: GameEvent.ChallengeFlag
	(*GameEvent_ChallengeFlagHandled)(nil),                 // 38: GameEvent.ChallengeFlagHandled
	(*GameEvent_EmergencyStop)(nil),                        // 39: GameEvent.EmergencyStop
	(*GameEvent_TooManyRobots)(nil),                        // 40: GameEvent.TooManyRobots
	(*GameEvent_BoundaryCrossing)(nil),                     // 41: GameEvent.BoundaryCrossing
	(*GameEvent_PenaltyKickFailed)(nil),                    // 42: GameEvent.PenaltyKickFailed
	(Team)(0),                                              // 43: Team
	(*geom.Vector2)(nil),                                   // 44: Vector2
}
var file_ssl_gc_game_event_proto_depIdxs = []int32{
	0,   // 0: GameEvent.type:type_name -> GameEvent.Type
	2,   // 1: GameEvent.ball_left_field_touch_line:type_name -> GameEvent.BallLeftField
	2,   // 2: GameEvent.ball_left_field_goal_line:type_name -> GameEvent.BallLeftField
	3,   // 3: GameEvent.aimless_kick:type_name -> GameEvent.AimlessKick
	21,  // 4: GameEvent.attacker_too_close_to_defense_area:type_name -> GameEvent.AttackerTooCloseToDefenseArea
	14,  // 5: GameEvent.defender_in_defense_area:type_name -> GameEvent.DefenderInDefenseArea
	41,  // 6: GameEvent.boundary_crossing:type_name -> GameEvent.BoundaryCrossing
	32,  // 7: GameEvent.keeper_held_ball:type_name -> GameEvent.KeeperHeldBall
	18,  // 8: GameEvent.bot_dribbled_ball_too_far:type_name -> GameEvent.BotDribbledBallTooFar
	11,  // 9: GameEvent.bot_pushed_bot:type_name -> GameEvent.BotPushedBot
	22,  // 10: GameEvent.bot_held_ball_deliberately:type_name -> GameEvent.BotHeldBallDeliberately
	12,  // 11: GameEvent.bot_tipped_over:type_name -> GameEvent.BotTippedOver
	13,  // 12: GameEvent.bot_dropped_parts:type_name -> GameEvent.BotDroppedParts
	16,  // 13: GameEvent.attacker_touched_ball_in_defense_area:type_name -> GameEvent.AttackerTouchedBallInDefenseArea
	17,  // 14: GameEvent.bot_kicked_ball_too_fast:type_name -> GameEvent.BotKickedBallTooFast
	10,  // 15: GameEvent.bot_crash_unique:type_name -> GameEvent.BotCrashUnique
	9,   // 16: GameEvent.bot_crash_drawn:type_name -> GameEvent.BotCrashDrawn
	8,   // 17: GameEvent.defender_too_close_to_kick_point:type_name -> GameEvent.DefenderTooCloseToKickPoint
	7,   // 18: GameEvent.bot_too_fast_in_stop:type_name -> GameEvent.BotTooFastInStop
	23,  // 19: GameEvent.bot_interfered_placement:type_name -> GameEvent.BotInterferedPlacement
	4,   // 20: GameEvent.possible_goal:type_name -> GameEvent.Goal
	4,   // 21: GameEvent.goal:type_name -> GameEvent.Goal
	4,   // 22: GameEvent.invalid_goal:type_name -> GameEvent.Goal
	20,  // 23: GameEvent.attacker_double_touched_ball:type_name -> GameEvent.AttackerDoubleTouchedBall
	33,  // 24: GameEvent.placement_succeeded:type_name -> GameEvent.PlacementSucceeded
	42,  // 25: GameEvent.penalty_kick_failed:type_name -> GameEvent.PenaltyKickFailed
	28,  // 26: GameEvent.no_progress_in_game:type_name -> GameEvent.NoProgressInGame
	29,  // 27: GameEvent.placement_failed:type_name -> GameEvent.PlacementFailed
	24,  // 28: GameEvent.multiple_cards:type_name -> GameEvent.MultipleCards
	25,  // 29: GameEvent.multiple_fouls:type_name -> GameEvent.MultipleFouls
	35,  // 30: GameEvent.bot_substitution:type_name -> GameEvent.BotSubstitution
	36,  // 31: GameEvent.excessive_bot_substitution:type_name -> GameEvent.ExcessiveBotSubstitution
	40,  // 32: GameEvent.too_many_robots:type_name -> GameEvent.TooManyRobots
	37,  // 33: GameEvent.challenge_flag:type_name -> GameEvent.ChallengeFlag
	38,  // 34: GameEvent.challenge_flag_handled:type_name -> GameEvent.ChallengeFlagHandled
	39,  // 35: GameEvent.emergency_stop:type_name -> GameEvent.EmergencyStop
	30,  // 36: GameEvent.unsporting_behavior_minor:type_name -> GameEvent.UnsportingBehaviorMinor
	31,  // 37: GameEvent.unsporting_behavior_major:type_name -> GameEvent.UnsportingBehaviorMajor
	34,  // 38: GameEvent.prepared:type_name -> GameEvent.Prepared
	5,   // 39: GameEvent.indirect_goal:type_name -> GameEvent.IndirectGoal
	6,   // 40: GameEvent.chipped_goal:type_name -> GameEvent.ChippedGoal
	27,  // 41: GameEvent.kick_timeout:type_name -> GameEvent.KickTimeout
	19,  // 42: GameEvent.attacker_touched_opponent_in_defense_area:type_name -> GameEvent.AttackerTouchedOpponentInDefenseArea
	19,  // 43: GameEvent.attacker_touched_opponent_in_defense_area_skipped:type_name -> GameEvent.AttackerTouchedOpponentInDefenseArea
	10,  // 44: GameEvent.bot_crash_unique_skipped:type_name -> GameEvent.BotCrashUnique
	11,  // 45: GameEvent.bot_pushed_bot_skipped:type_name -> GameEvent.BotPushedBot
	15,  // 46: GameEvent.defender_in_defense_area_partially:type_name -> GameEvent.DefenderInDefenseAreaPartially
	26,  // 47: GameEvent.multiple_placement_failures:type_name -> GameEvent.MultiplePlacementFailures
	43,  // 48: GameEvent.BallLeftField.by_team:type_name -> Team
	44,  // 49: GameEvent.BallLeftField.location:type_name -> Vector2
	43,  // 50: GameEvent.AimlessKick.by_team:type_name -> Team
	44,  // 51: GameEvent.AimlessKick.location:type_name -> Vector2
	44,  // 52: GameEvent.AimlessKick.kick_location:type_name -> Vector2
	43,  // 53: GameEvent.Goal.by_team:type_name -> Team
	43,  // 54: GameEvent.Goal.kicking_team:type_name -> Team
	44,  // 55: GameEvent.Goal.location:type_name -> Vector2
	44,  // 56: GameEvent.Goal.kick_location:type_name -> Vector2
	43,  // 57: GameEvent.IndirectGoal.by_team:type_name -> Team
	44,  // 58: GameEvent.IndirectGoal.location:type_name -> Vector2
	44,  // 59: GameEvent.IndirectGoal.kick_location:type_name -> Vector2
	43,  // 60: GameEvent.ChippedGoal.by_team:type_name -> Team
	44,  // 61: GameEvent.ChippedGoal.location:type_name -> Vector2
	44,  // 62: GameEvent.ChippedGoal.kick_location:type_name -> Vector2
	43,  // 63: GameEvent.BotTooFastInStop.by_team:type_name -> Team
	44,  // 64: GameEvent.BotTooFastInStop.location:type_name -> Vector2
	43,  // 65: GameEvent.DefenderTooCloseToKickPoint.by_team:type_name -> Team
	44,  // 66: GameEvent.DefenderTooCloseToKickPoint.location:type_name -> Vector2
	44,  // 67: GameEvent.BotCrashDrawn.location:type_name -> Vector2
	43,  // 68: GameEvent.BotCrashUnique.by_team:type_name -> Team
	44,  // 69: GameEvent.BotCrashUnique.location:type_name -> Vector2
	43,  // 70: GameEvent.BotPushedBot.by_team:type_name -> Team
	44,  // 71: GameEvent.BotPushedBot.location:type_name -> Vector2
	43,  // 72: GameEvent.BotTippedOver.by_team:type_name -> Team
	44,  // 73: GameEvent.BotTippedOver.location:type_name -> Vector2
	44,  // 74: GameEvent.BotTippedOver.ball_location:type_name -> Vector2
	43,  // 75: GameEvent.BotDroppedParts.by_team:type_name -> Team
	44,  // 76: GameEvent.BotDroppedParts.location:type_name -> Vector2
	44,  // 77: GameEvent.BotDroppedParts.ball_location:type_name -> Vector2
	43,  // 78: GameEvent.DefenderInDefenseArea.by_team:type_name -> Team
	44,  // 79: GameEvent.DefenderInDefenseArea.location:type_name -> Vector2
	43,  // 80: GameEvent.DefenderInDefenseAreaPartially.by_team:type_name -> Team
	44,  // 81: GameEvent.DefenderInDefenseAreaPartially.location:type_name -> Vector2
	44,  // 82: GameEvent.DefenderInDefenseAreaPartially.ball_location:type_name -> Vector2
	43,  // 83: GameEvent.AttackerTouchedBallInDefenseArea.by_team:type_name -> Team
	44,  // 84: GameEvent.AttackerTouchedBallInDefenseArea.location:type_name -> Vector2
	43,  // 85: GameEvent.BotKickedBallTooFast.by_team:type_name -> Team
	44,  // 86: GameEvent.BotKickedBallTooFast.location:type_name -> Vector2
	43,  // 87: GameEvent.BotDribbledBallTooFar.by_team:type_name -> Team
	44,  // 88: GameEvent.BotDribbledBallTooFar.start:type_name -> Vector2
	44,  // 89: GameEvent.BotDribbledBallTooFar.end:type_name -> Vector2
	43,  // 90: GameEvent.AttackerTouchedOpponentInDefenseArea.by_team:type_name -> Team
	44,  // 91: GameEvent.AttackerTouchedOpponentInDefenseArea.location:type_name -> Vector2
	43,  // 92: GameEvent.AttackerDoubleTouchedBall.by_team:type_name -> Team
	44,  // 93: GameEvent.AttackerDoubleTouchedBall.location:type_name -> Vector2
	43,  // 94: GameEvent.AttackerTooCloseToDefenseArea.by_team:type_name -> Team
	44,  // 95: GameEvent.AttackerTooCloseToDefenseArea.location:type_name -> Vector2
	44,  // 96: GameEvent.AttackerTooCloseToDefenseArea.ball_location:type_name -> Vector2
	43,  // 97: GameEvent.BotHeldBallDeliberately.by_team:type_name -> Team
	44,  // 98: GameEvent.BotHeldBallDeliberately.location:type_name -> Vector2
	43,  // 99: GameEvent.BotInterferedPlacement.by_team:type_name -> Team
	44,  // 100: GameEvent.BotInterferedPlacement.location:type_name -> Vector2
	43,  // 101: GameEvent.MultipleCards.by_team:type_name -> Team
	43,  // 102: GameEvent.MultipleFouls.by_team:type_name -> Team
	1,   // 103: GameEvent.MultipleFouls.caused_game_events:type_name -> GameEvent
	43,  // 104: GameEvent.MultiplePlacementFailures.by_team:type_name -> Team
	43,  // 105: GameEvent.KickTimeout.by_team:type_name -> Team
	44,  // 106: GameEvent.KickTimeout.location:type_name -> Vector2
	44,  // 107: GameEvent.NoProgressInGame.location:type_name -> Vector2
	43,  // 108: GameEvent.PlacementFailed.by_team:type_name -> Team
	43,  // 109: GameEvent.UnsportingBehaviorMinor.by_team:type_name -> Team
	43,  // 110: GameEvent.UnsportingBehaviorMajor.by_team:type_name -> Team
	43,  // 111: GameEvent.KeeperHeldBall.by_team:type_name -> Team
	44,  // 112: GameEvent.KeeperHeldBall.location:type_name -> Vector2
	43,  // 113: GameEvent.PlacementSucceeded.by_team:type_name -> Team
	43,  // 114: GameEvent.BotSubstitution.by_team:type_name -> Team
	43,  // 115: GameEvent.ExcessiveBotSubstitution.by_team:type_name -> Team
	43,  // 116: GameEvent.ChallengeFlag.by_team:type_name -> Team
	43,  // 117: GameEvent.ChallengeFlagHandled.by_team:type_name -> Team
	43,  // 118: GameEvent.EmergencyStop.by_team:type_name -> Team
	43,  // 119: GameEvent.TooManyRobots.by_team:type_name -> Team
	44,  // 120: GameEvent.TooManyRobots.ball_location:type_name -> Vector2
	43,  // 121: GameEvent.BoundaryCrossing.by_team:type_name -> Team
	44,  // 122: GameEvent.BoundaryCrossing.location:type_name -> Vector2
	43,  // 123: GameEvent.PenaltyKickFailed.by_team:type_name -> Team
	44,  // 124: GameEvent.PenaltyKickFailed.location:type_name -> Vector2
	125, // [125:125] is the sub-list for method output_type
	125, // [125:125] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_ssl_gc_game_event_proto_init() }
func file_ssl_gc_game_event_proto_init() {
	if File_ssl_gc_game_event_proto != nil {
		return
	}
	file_ssl_gc_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ssl_gc_game_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BallLeftField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_AimlessKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_Goal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_IndirectGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_ChippedGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotTooFastInStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_DefenderTooCloseToKickPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotCrashDrawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotCrashUnique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotPushedBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotTippedOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotDroppedParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_DefenderInDefenseArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_DefenderInDefenseAreaPartially); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_AttackerTouchedBallInDefenseArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotKickedBallTooFast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotDribbledBallTooFar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_AttackerTouchedOpponentInDefenseArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_AttackerDoubleTouchedBall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_AttackerTooCloseToDefenseArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotHeldBallDeliberately); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotInterferedPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_MultipleCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_MultipleFouls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_MultiplePlacementFailures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_KickTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_NoProgressInGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_PlacementFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_UnsportingBehaviorMinor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_UnsportingBehaviorMajor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_KeeperHeldBall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_PlacementSucceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_Prepared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BotSubstitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_ExcessiveBotSubstitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_ChallengeFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_ChallengeFlagHandled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_EmergencyStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_TooManyRobots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_BoundaryCrossing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_game_event_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent_PenaltyKickFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ssl_gc_game_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GameEvent_BallLeftFieldTouchLine)(nil),
		(*GameEvent_BallLeftFieldGoalLine)(nil),
		(*GameEvent_AimlessKick_)(nil),
		(*GameEvent_AttackerTooCloseToDefenseArea_)(nil),
		(*GameEvent_DefenderInDefenseArea_)(nil),
		(*GameEvent_BoundaryCrossing_)(nil),
		(*GameEvent_KeeperHeldBall_)(nil),
		(*GameEvent_BotDribbledBallTooFar_)(nil),
		(*GameEvent_BotPushedBot_)(nil),
		(*GameEvent_BotHeldBallDeliberately_)(nil),
		(*GameEvent_BotTippedOver_)(nil),
		(*GameEvent_BotDroppedParts_)(nil),
		(*GameEvent_AttackerTouchedBallInDefenseArea_)(nil),
		(*GameEvent_BotKickedBallTooFast_)(nil),
		(*GameEvent_BotCrashUnique_)(nil),
		(*GameEvent_BotCrashDrawn_)(nil),
		(*GameEvent_DefenderTooCloseToKickPoint_)(nil),
		(*GameEvent_BotTooFastInStop_)(nil),
		(*GameEvent_BotInterferedPlacement_)(nil),
		(*GameEvent_PossibleGoal)(nil),
		(*GameEvent_Goal_)(nil),
		(*GameEvent_InvalidGoal)(nil),
		(*GameEvent_AttackerDoubleTouchedBall_)(nil),
		(*GameEvent_PlacementSucceeded_)(nil),
		(*GameEvent_PenaltyKickFailed_)(nil),
		(*GameEvent_NoProgressInGame_)(nil),
		(*GameEvent_PlacementFailed_)(nil),
		(*GameEvent_MultipleCards_)(nil),
		(*GameEvent_MultipleFouls_)(nil),
		(*GameEvent_BotSubstitution_)(nil),
		(*GameEvent_ExcessiveBotSubstitution_)(nil),
		(*GameEvent_TooManyRobots_)(nil),
		(*GameEvent_ChallengeFlag_)(nil),
		(*GameEvent_ChallengeFlagHandled_)(nil),
		(*GameEvent_EmergencyStop_)(nil),
		(*GameEvent_UnsportingBehaviorMinor_)(nil),
		(*GameEvent_UnsportingBehaviorMajor_)(nil),
		(*GameEvent_Prepared_)(nil),
		(*GameEvent_IndirectGoal_)(nil),
		(*GameEvent_ChippedGoal_)(nil),
		(*GameEvent_KickTimeout_)(nil),
		(*GameEvent_AttackerTouchedOpponentInDefenseArea_)(nil),
		(*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped)(nil),
		(*GameEvent_BotCrashUniqueSkipped)(nil),
		(*GameEvent_BotPushedBotSkipped)(nil),
		(*GameEvent_DefenderInDefenseAreaPartially_)(nil),
		(*GameEvent_MultiplePlacementFailures_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_gc_game_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_gc_game_event_proto_goTypes,
		DependencyIndexes: file_ssl_gc_game_event_proto_depIdxs,
		EnumInfos:         file_ssl_gc_game_event_proto_enumTypes,
		MessageInfos:      file_ssl_gc_game_event_proto_msgTypes,
	}.Build()
	File_ssl_gc_game_event_proto = out.File
	file_ssl_gc_game_event_proto_rawDesc = nil
	file_ssl_gc_game_event_proto_goTypes = nil
	file_ssl_gc_game_event_proto_depIdxs = nil
}
