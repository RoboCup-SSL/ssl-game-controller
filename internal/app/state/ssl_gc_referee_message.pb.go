// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.3
// source: ssl_gc_referee_message.proto

package state

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MatchType is a meta information about the current match for easier log processing
type MatchType int32

const (
	// not set
	MatchType_UNKNOWN_MATCH MatchType = 0
	// match is part of the group phase
	MatchType_GROUP_PHASE MatchType = 1
	// match is part of the elimination phase
	MatchType_ELIMINATION_PHASE MatchType = 2
	// a friendly match, not part of a tournament
	MatchType_FRIENDLY MatchType = 3
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "UNKNOWN_MATCH",
		1: "GROUP_PHASE",
		2: "ELIMINATION_PHASE",
		3: "FRIENDLY",
	}
	MatchType_value = map[string]int32{
		"UNKNOWN_MATCH":     0,
		"GROUP_PHASE":       1,
		"ELIMINATION_PHASE": 2,
		"FRIENDLY":          3,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_referee_message_proto_enumTypes[0].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_ssl_gc_referee_message_proto_enumTypes[0]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MatchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MatchType(num)
	return nil
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{0}
}

// These are the "coarse" stages of the game.
type Referee_Stage int32

const (
	// The first half is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_NORMAL_FIRST_HALF_PRE Referee_Stage = 0
	// The first half of the normal game, before half time.
	Referee_NORMAL_FIRST_HALF Referee_Stage = 1
	// Half time between first and second halves.
	Referee_NORMAL_HALF_TIME Referee_Stage = 2
	// The second half is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_NORMAL_SECOND_HALF_PRE Referee_Stage = 3
	// The second half of the normal game, after half time.
	Referee_NORMAL_SECOND_HALF Referee_Stage = 4
	// The break before extra time.
	Referee_EXTRA_TIME_BREAK Referee_Stage = 5
	// The first half of extra time is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_EXTRA_FIRST_HALF_PRE Referee_Stage = 6
	// The first half of extra time.
	Referee_EXTRA_FIRST_HALF Referee_Stage = 7
	// Half time between first and second extra halves.
	Referee_EXTRA_HALF_TIME Referee_Stage = 8
	// The second half of extra time is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_EXTRA_SECOND_HALF_PRE Referee_Stage = 9
	// The second half of extra time.
	Referee_EXTRA_SECOND_HALF Referee_Stage = 10
	// The break before penalty shootout.
	Referee_PENALTY_SHOOTOUT_BREAK Referee_Stage = 11
	// The penalty shootout.
	Referee_PENALTY_SHOOTOUT Referee_Stage = 12
	// The game is over.
	Referee_POST_GAME Referee_Stage = 13
)

// Enum value maps for Referee_Stage.
var (
	Referee_Stage_name = map[int32]string{
		0:  "NORMAL_FIRST_HALF_PRE",
		1:  "NORMAL_FIRST_HALF",
		2:  "NORMAL_HALF_TIME",
		3:  "NORMAL_SECOND_HALF_PRE",
		4:  "NORMAL_SECOND_HALF",
		5:  "EXTRA_TIME_BREAK",
		6:  "EXTRA_FIRST_HALF_PRE",
		7:  "EXTRA_FIRST_HALF",
		8:  "EXTRA_HALF_TIME",
		9:  "EXTRA_SECOND_HALF_PRE",
		10: "EXTRA_SECOND_HALF",
		11: "PENALTY_SHOOTOUT_BREAK",
		12: "PENALTY_SHOOTOUT",
		13: "POST_GAME",
	}
	Referee_Stage_value = map[string]int32{
		"NORMAL_FIRST_HALF_PRE":  0,
		"NORMAL_FIRST_HALF":      1,
		"NORMAL_HALF_TIME":       2,
		"NORMAL_SECOND_HALF_PRE": 3,
		"NORMAL_SECOND_HALF":     4,
		"EXTRA_TIME_BREAK":       5,
		"EXTRA_FIRST_HALF_PRE":   6,
		"EXTRA_FIRST_HALF":       7,
		"EXTRA_HALF_TIME":        8,
		"EXTRA_SECOND_HALF_PRE":  9,
		"EXTRA_SECOND_HALF":      10,
		"PENALTY_SHOOTOUT_BREAK": 11,
		"PENALTY_SHOOTOUT":       12,
		"POST_GAME":              13,
	}
)

func (x Referee_Stage) Enum() *Referee_Stage {
	p := new(Referee_Stage)
	*p = x
	return p
}

func (x Referee_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referee_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_referee_message_proto_enumTypes[1].Descriptor()
}

func (Referee_Stage) Type() protoreflect.EnumType {
	return &file_ssl_gc_referee_message_proto_enumTypes[1]
}

func (x Referee_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Referee_Stage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Referee_Stage(num)
	return nil
}

// Deprecated: Use Referee_Stage.Descriptor instead.
func (Referee_Stage) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{0, 0}
}

// These are the "fine" states of play on the field.
type Referee_Command int32

const (
	// All robots should completely stop moving.
	Referee_HALT Referee_Command = 0
	// Robots must keep 50 cm from the ball.
	Referee_STOP Referee_Command = 1
	// A prepared kickoff or penalty may now be taken.
	Referee_NORMAL_START Referee_Command = 2
	// The ball is dropped and free for either team.
	Referee_FORCE_START Referee_Command = 3
	// The yellow team may move into kickoff position.
	Referee_PREPARE_KICKOFF_YELLOW Referee_Command = 4
	// The blue team may move into kickoff position.
	Referee_PREPARE_KICKOFF_BLUE Referee_Command = 5
	// The yellow team may move into penalty position.
	Referee_PREPARE_PENALTY_YELLOW Referee_Command = 6
	// The blue team may move into penalty position.
	Referee_PREPARE_PENALTY_BLUE Referee_Command = 7
	// The yellow team may take a direct free kick.
	Referee_DIRECT_FREE_YELLOW Referee_Command = 8
	// The blue team may take a direct free kick.
	Referee_DIRECT_FREE_BLUE Referee_Command = 9
	// The yellow team may take an indirect free kick.
	//
	// Deprecated: Marked as deprecated in ssl_gc_referee_message.proto.
	Referee_INDIRECT_FREE_YELLOW Referee_Command = 10
	// The blue team may take an indirect free kick.
	//
	// Deprecated: Marked as deprecated in ssl_gc_referee_message.proto.
	Referee_INDIRECT_FREE_BLUE Referee_Command = 11
	// The yellow team is currently in a timeout.
	Referee_TIMEOUT_YELLOW Referee_Command = 12
	// The blue team is currently in a timeout.
	Referee_TIMEOUT_BLUE Referee_Command = 13
	// The yellow team just scored a goal.
	// For information only.
	// Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
	//
	// Deprecated: Marked as deprecated in ssl_gc_referee_message.proto.
	Referee_GOAL_YELLOW Referee_Command = 14
	// The blue team just scored a goal. See also GOAL_YELLOW.
	//
	// Deprecated: Marked as deprecated in ssl_gc_referee_message.proto.
	Referee_GOAL_BLUE Referee_Command = 15
	// Equivalent to STOP, but the yellow team must pick up the ball and
	// drop it in the Designated Position.
	Referee_BALL_PLACEMENT_YELLOW Referee_Command = 16
	// Equivalent to STOP, but the blue team must pick up the ball and drop
	// it in the Designated Position.
	Referee_BALL_PLACEMENT_BLUE Referee_Command = 17
)

// Enum value maps for Referee_Command.
var (
	Referee_Command_name = map[int32]string{
		0:  "HALT",
		1:  "STOP",
		2:  "NORMAL_START",
		3:  "FORCE_START",
		4:  "PREPARE_KICKOFF_YELLOW",
		5:  "PREPARE_KICKOFF_BLUE",
		6:  "PREPARE_PENALTY_YELLOW",
		7:  "PREPARE_PENALTY_BLUE",
		8:  "DIRECT_FREE_YELLOW",
		9:  "DIRECT_FREE_BLUE",
		10: "INDIRECT_FREE_YELLOW",
		11: "INDIRECT_FREE_BLUE",
		12: "TIMEOUT_YELLOW",
		13: "TIMEOUT_BLUE",
		14: "GOAL_YELLOW",
		15: "GOAL_BLUE",
		16: "BALL_PLACEMENT_YELLOW",
		17: "BALL_PLACEMENT_BLUE",
	}
	Referee_Command_value = map[string]int32{
		"HALT":                   0,
		"STOP":                   1,
		"NORMAL_START":           2,
		"FORCE_START":            3,
		"PREPARE_KICKOFF_YELLOW": 4,
		"PREPARE_KICKOFF_BLUE":   5,
		"PREPARE_PENALTY_YELLOW": 6,
		"PREPARE_PENALTY_BLUE":   7,
		"DIRECT_FREE_YELLOW":     8,
		"DIRECT_FREE_BLUE":       9,
		"INDIRECT_FREE_YELLOW":   10,
		"INDIRECT_FREE_BLUE":     11,
		"TIMEOUT_YELLOW":         12,
		"TIMEOUT_BLUE":           13,
		"GOAL_YELLOW":            14,
		"GOAL_BLUE":              15,
		"BALL_PLACEMENT_YELLOW":  16,
		"BALL_PLACEMENT_BLUE":    17,
	}
)

func (x Referee_Command) Enum() *Referee_Command {
	p := new(Referee_Command)
	*p = x
	return p
}

func (x Referee_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referee_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_referee_message_proto_enumTypes[2].Descriptor()
}

func (Referee_Command) Type() protoreflect.EnumType {
	return &file_ssl_gc_referee_message_proto_enumTypes[2]
}

func (x Referee_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Referee_Command) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Referee_Command(num)
	return nil
}

// Deprecated: Use Referee_Command.Descriptor instead.
func (Referee_Command) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{0, 1}
}

// Each UDP packet contains one of these messages.
type Referee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A random UUID of the source that is kept constant at the source while running
	// If multiple sources are broadcasting to the same network, this id can be used to identify individual sources
	SourceIdentifier *string `protobuf:"bytes,18,opt,name=source_identifier,json=sourceIdentifier" json:"source_identifier,omitempty"`
	// The match type is a meta information about the current match that helps to process the logs after a competition
	MatchType *MatchType `protobuf:"varint,19,opt,name=match_type,json=matchType,enum=MatchType,def=0" json:"match_type,omitempty"`
	// The UNIX timestamp when the packet was sent, in microseconds.
	// Divide by 1,000,000 to get a time_t.
	PacketTimestamp *uint64        `protobuf:"varint,1,req,name=packet_timestamp,json=packetTimestamp" json:"packet_timestamp,omitempty"`
	Stage           *Referee_Stage `protobuf:"varint,2,req,name=stage,enum=Referee_Stage" json:"stage,omitempty"`
	// The number of microseconds left in the stage.
	// The following stages have this value; the rest do not:
	// NORMAL_FIRST_HALF
	// NORMAL_HALF_TIME
	// NORMAL_SECOND_HALF
	// EXTRA_TIME_BREAK
	// EXTRA_FIRST_HALF
	// EXTRA_HALF_TIME
	// EXTRA_SECOND_HALF
	// PENALTY_SHOOTOUT_BREAK
	//
	// If the stage runs over its specified time, this value
	// becomes negative.
	StageTimeLeft *int64           `protobuf:"zigzag64,3,opt,name=stage_time_left,json=stageTimeLeft" json:"stage_time_left,omitempty"`
	Command       *Referee_Command `protobuf:"varint,4,req,name=command,enum=Referee_Command" json:"command,omitempty"`
	// The number of commands issued since startup (mod 2^32).
	CommandCounter *uint32 `protobuf:"varint,5,req,name=command_counter,json=commandCounter" json:"command_counter,omitempty"`
	// The UNIX timestamp when the command was issued, in microseconds.
	// This value changes only when a new command is issued, not on each packet.
	CommandTimestamp *uint64 `protobuf:"varint,6,req,name=command_timestamp,json=commandTimestamp" json:"command_timestamp,omitempty"`
	// Information about the two teams.
	Yellow             *Referee_TeamInfo `protobuf:"bytes,7,req,name=yellow" json:"yellow,omitempty"`
	Blue               *Referee_TeamInfo `protobuf:"bytes,8,req,name=blue" json:"blue,omitempty"`
	DesignatedPosition *Referee_Point    `protobuf:"bytes,9,opt,name=designated_position,json=designatedPosition" json:"designated_position,omitempty"`
	// Information about the direction of play.
	// True, if the blue team will have it's goal on the positive x-axis of the ssl-vision coordinate system.
	// Obviously, the yellow team will play on the opposite half.
	BlueTeamOnPositiveHalf *bool `protobuf:"varint,10,opt,name=blue_team_on_positive_half,json=blueTeamOnPositiveHalf" json:"blue_team_on_positive_half,omitempty"`
	// The command that will be issued after the current stoppage and ball placement to continue the game.
	NextCommand        *Referee_Command          `protobuf:"varint,12,opt,name=next_command,json=nextCommand,enum=Referee_Command" json:"next_command,omitempty"`
	GameEvents         []*GameEvent              `protobuf:"bytes,16,rep,name=game_events,json=gameEvents" json:"game_events,omitempty"`
	GameEventProposals []*GameEventProposalGroup `protobuf:"bytes,17,rep,name=game_event_proposals,json=gameEventProposals" json:"game_event_proposals,omitempty"`
	// The time in microseconds that is remaining until the current action times out
	// The time will not be reset. It can get negative.
	// An autoRef would raise an appropriate event, if the time gets negative.
	// Possible actions where this time is relevant:
	//   - free kicks
	//   - kickoff, penalty kick, force start
	//   - ball placement
	CurrentActionTimeRemaining *int64 `protobuf:"varint,15,opt,name=current_action_time_remaining,json=currentActionTimeRemaining" json:"current_action_time_remaining,omitempty"`
	// A message that can be displayed to the spectators, like a reason for a stoppage.
	StatusMessage *string `protobuf:"bytes,20,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
}

// Default values for Referee fields.
const (
	Default_Referee_MatchType = MatchType_UNKNOWN_MATCH
)

func (x *Referee) Reset() {
	*x = Referee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_referee_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee) ProtoMessage() {}

func (x *Referee) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_referee_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee.ProtoReflect.Descriptor instead.
func (*Referee) Descriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{0}
}

func (x *Referee) GetSourceIdentifier() string {
	if x != nil && x.SourceIdentifier != nil {
		return *x.SourceIdentifier
	}
	return ""
}

func (x *Referee) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return Default_Referee_MatchType
}

func (x *Referee) GetPacketTimestamp() uint64 {
	if x != nil && x.PacketTimestamp != nil {
		return *x.PacketTimestamp
	}
	return 0
}

func (x *Referee) GetStage() Referee_Stage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Referee_NORMAL_FIRST_HALF_PRE
}

func (x *Referee) GetStageTimeLeft() int64 {
	if x != nil && x.StageTimeLeft != nil {
		return *x.StageTimeLeft
	}
	return 0
}

func (x *Referee) GetCommand() Referee_Command {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return Referee_HALT
}

func (x *Referee) GetCommandCounter() uint32 {
	if x != nil && x.CommandCounter != nil {
		return *x.CommandCounter
	}
	return 0
}

func (x *Referee) GetCommandTimestamp() uint64 {
	if x != nil && x.CommandTimestamp != nil {
		return *x.CommandTimestamp
	}
	return 0
}

func (x *Referee) GetYellow() *Referee_TeamInfo {
	if x != nil {
		return x.Yellow
	}
	return nil
}

func (x *Referee) GetBlue() *Referee_TeamInfo {
	if x != nil {
		return x.Blue
	}
	return nil
}

func (x *Referee) GetDesignatedPosition() *Referee_Point {
	if x != nil {
		return x.DesignatedPosition
	}
	return nil
}

func (x *Referee) GetBlueTeamOnPositiveHalf() bool {
	if x != nil && x.BlueTeamOnPositiveHalf != nil {
		return *x.BlueTeamOnPositiveHalf
	}
	return false
}

func (x *Referee) GetNextCommand() Referee_Command {
	if x != nil && x.NextCommand != nil {
		return *x.NextCommand
	}
	return Referee_HALT
}

func (x *Referee) GetGameEvents() []*GameEvent {
	if x != nil {
		return x.GameEvents
	}
	return nil
}

func (x *Referee) GetGameEventProposals() []*GameEventProposalGroup {
	if x != nil {
		return x.GameEventProposals
	}
	return nil
}

func (x *Referee) GetCurrentActionTimeRemaining() int64 {
	if x != nil && x.CurrentActionTimeRemaining != nil {
		return *x.CurrentActionTimeRemaining
	}
	return 0
}

func (x *Referee) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

// List of matching proposals
type GameEventProposalGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of this group
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The proposed game events
	GameEvents []*GameEvent `protobuf:"bytes,1,rep,name=game_events,json=gameEvents" json:"game_events,omitempty"`
	// Whether the proposal group was accepted
	Accepted *bool `protobuf:"varint,2,opt,name=accepted" json:"accepted,omitempty"`
}

func (x *GameEventProposalGroup) Reset() {
	*x = GameEventProposalGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_referee_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEventProposalGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEventProposalGroup) ProtoMessage() {}

func (x *GameEventProposalGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_referee_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEventProposalGroup.ProtoReflect.Descriptor instead.
func (*GameEventProposalGroup) Descriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{1}
}

func (x *GameEventProposalGroup) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GameEventProposalGroup) GetGameEvents() []*GameEvent {
	if x != nil {
		return x.GameEvents
	}
	return nil
}

func (x *GameEventProposalGroup) GetAccepted() bool {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return false
}

// Information about a single team.
type Referee_TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The team's name (empty string if operator has not typed anything).
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The number of goals scored by the team during normal play and overtime.
	Score *uint32 `protobuf:"varint,2,req,name=score" json:"score,omitempty"`
	// The number of red cards issued to the team since the beginning of the game.
	RedCards *uint32 `protobuf:"varint,3,req,name=red_cards,json=redCards" json:"red_cards,omitempty"`
	// The amount of time (in microseconds) left on each yellow card issued to the team.
	// If no yellow cards are issued, this array has no elements.
	// Otherwise, times are ordered from smallest to largest.
	YellowCardTimes []uint32 `protobuf:"varint,4,rep,packed,name=yellow_card_times,json=yellowCardTimes" json:"yellow_card_times,omitempty"`
	// The total number of yellow cards ever issued to the team.
	YellowCards *uint32 `protobuf:"varint,5,req,name=yellow_cards,json=yellowCards" json:"yellow_cards,omitempty"`
	// The number of timeouts this team can still call.
	// If in a timeout right now, that timeout is excluded.
	Timeouts *uint32 `protobuf:"varint,6,req,name=timeouts" json:"timeouts,omitempty"`
	// The number of microseconds of timeout this team can use.
	TimeoutTime *uint32 `protobuf:"varint,7,req,name=timeout_time,json=timeoutTime" json:"timeout_time,omitempty"`
	// The pattern number of this team's goalkeeper.
	Goalkeeper *uint32 `protobuf:"varint,8,req,name=goalkeeper" json:"goalkeeper,omitempty"`
	// The total number of countable fouls that act towards yellow cards
	FoulCounter *uint32 `protobuf:"varint,9,opt,name=foul_counter,json=foulCounter" json:"foul_counter,omitempty"`
	// The number of consecutive ball placement failures of this team
	BallPlacementFailures *uint32 `protobuf:"varint,10,opt,name=ball_placement_failures,json=ballPlacementFailures" json:"ball_placement_failures,omitempty"`
	// Indicate if the team is able and allowed to place the ball
	CanPlaceBall *bool `protobuf:"varint,12,opt,name=can_place_ball,json=canPlaceBall" json:"can_place_ball,omitempty"`
	// The maximum number of bots allowed on the field based on division and cards
	MaxAllowedBots *uint32 `protobuf:"varint,13,opt,name=max_allowed_bots,json=maxAllowedBots" json:"max_allowed_bots,omitempty"`
	// The team has submitted an intent to substitute one or more robots at the next chance
	BotSubstitutionIntent *bool `protobuf:"varint,14,opt,name=bot_substitution_intent,json=botSubstitutionIntent" json:"bot_substitution_intent,omitempty"`
	// Indicate if the team reached the maximum allowed ball placement failures and is thus not allowed to place the ball anymore
	BallPlacementFailuresReached *bool `protobuf:"varint,15,opt,name=ball_placement_failures_reached,json=ballPlacementFailuresReached" json:"ball_placement_failures_reached,omitempty"`
	// The team is allowed to substitute one or more robots currently
	BotSubstitutionAllowed *bool `protobuf:"varint,16,opt,name=bot_substitution_allowed,json=botSubstitutionAllowed" json:"bot_substitution_allowed,omitempty"`
}

func (x *Referee_TeamInfo) Reset() {
	*x = Referee_TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_referee_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referee_TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee_TeamInfo) ProtoMessage() {}

func (x *Referee_TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_referee_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee_TeamInfo.ProtoReflect.Descriptor instead.
func (*Referee_TeamInfo) Descriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Referee_TeamInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Referee_TeamInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *Referee_TeamInfo) GetRedCards() uint32 {
	if x != nil && x.RedCards != nil {
		return *x.RedCards
	}
	return 0
}

func (x *Referee_TeamInfo) GetYellowCardTimes() []uint32 {
	if x != nil {
		return x.YellowCardTimes
	}
	return nil
}

func (x *Referee_TeamInfo) GetYellowCards() uint32 {
	if x != nil && x.YellowCards != nil {
		return *x.YellowCards
	}
	return 0
}

func (x *Referee_TeamInfo) GetTimeouts() uint32 {
	if x != nil && x.Timeouts != nil {
		return *x.Timeouts
	}
	return 0
}

func (x *Referee_TeamInfo) GetTimeoutTime() uint32 {
	if x != nil && x.TimeoutTime != nil {
		return *x.TimeoutTime
	}
	return 0
}

func (x *Referee_TeamInfo) GetGoalkeeper() uint32 {
	if x != nil && x.Goalkeeper != nil {
		return *x.Goalkeeper
	}
	return 0
}

func (x *Referee_TeamInfo) GetFoulCounter() uint32 {
	if x != nil && x.FoulCounter != nil {
		return *x.FoulCounter
	}
	return 0
}

func (x *Referee_TeamInfo) GetBallPlacementFailures() uint32 {
	if x != nil && x.BallPlacementFailures != nil {
		return *x.BallPlacementFailures
	}
	return 0
}

func (x *Referee_TeamInfo) GetCanPlaceBall() bool {
	if x != nil && x.CanPlaceBall != nil {
		return *x.CanPlaceBall
	}
	return false
}

func (x *Referee_TeamInfo) GetMaxAllowedBots() uint32 {
	if x != nil && x.MaxAllowedBots != nil {
		return *x.MaxAllowedBots
	}
	return 0
}

func (x *Referee_TeamInfo) GetBotSubstitutionIntent() bool {
	if x != nil && x.BotSubstitutionIntent != nil {
		return *x.BotSubstitutionIntent
	}
	return false
}

func (x *Referee_TeamInfo) GetBallPlacementFailuresReached() bool {
	if x != nil && x.BallPlacementFailuresReached != nil {
		return *x.BallPlacementFailuresReached
	}
	return false
}

func (x *Referee_TeamInfo) GetBotSubstitutionAllowed() bool {
	if x != nil && x.BotSubstitutionAllowed != nil {
		return *x.BotSubstitutionAllowed
	}
	return false
}

// The coordinates of the Designated Position. These are measured in
// millimetres and correspond to SSL-Vision coordinates. These fields are
// always either both present (in the case of a ball placement command) or
// both absent (in the case of any other command).
type Referee_Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
}

func (x *Referee_Point) Reset() {
	*x = Referee_Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_referee_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referee_Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee_Point) ProtoMessage() {}

func (x *Referee_Point) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_referee_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee_Point.ProtoReflect.Descriptor instead.
func (*Referee_Point) Descriptor() ([]byte, []int) {
	return file_ssl_gc_referee_message_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Referee_Point) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Referee_Point) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

var File_ssl_gc_referee_message_proto protoreflect.FileDescriptor

var file_ssl_gc_referee_message_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x11, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x25, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x1a, 0x62, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x62, 0x6c,
	0x75, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x61, 0x6c, 0x66, 0x12, 0x33, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x67,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xe7, 0x04, 0x0a, 0x08,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x11, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x62,
	0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x62,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x62,
	0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x62,
	0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41,
	0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x4b, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46,
	0x5f, 0x50, 0x52, 0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x0a, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55,
	0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e,
	0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x10, 0x0c, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0d, 0x22, 0x96,
	0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46,
	0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x50,
	0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x14, 0x49,
	0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1a, 0x0a, 0x12, 0x49, 0x4e, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x0b, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x47,
	0x4f, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x11, 0x0a, 0x09, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0f, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08,
	0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x22, 0x71, 0x0a, 0x16, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x2a, 0x54, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59,
	0x10, 0x03, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x6f, 0x62, 0x6f, 0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c,
	0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65,
}

var (
	file_ssl_gc_referee_message_proto_rawDescOnce sync.Once
	file_ssl_gc_referee_message_proto_rawDescData = file_ssl_gc_referee_message_proto_rawDesc
)

func file_ssl_gc_referee_message_proto_rawDescGZIP() []byte {
	file_ssl_gc_referee_message_proto_rawDescOnce.Do(func() {
		file_ssl_gc_referee_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_gc_referee_message_proto_rawDescData)
	})
	return file_ssl_gc_referee_message_proto_rawDescData
}

var file_ssl_gc_referee_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ssl_gc_referee_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ssl_gc_referee_message_proto_goTypes = []interface{}{
	(MatchType)(0),                 // 0: MatchType
	(Referee_Stage)(0),             // 1: Referee.Stage
	(Referee_Command)(0),           // 2: Referee.Command
	(*Referee)(nil),                // 3: Referee
	(*GameEventProposalGroup)(nil), // 4: GameEventProposalGroup
	(*Referee_TeamInfo)(nil),       // 5: Referee.TeamInfo
	(*Referee_Point)(nil),          // 6: Referee.Point
	(*GameEvent)(nil),              // 7: GameEvent
}
var file_ssl_gc_referee_message_proto_depIdxs = []int32{
	0,  // 0: Referee.match_type:type_name -> MatchType
	1,  // 1: Referee.stage:type_name -> Referee.Stage
	2,  // 2: Referee.command:type_name -> Referee.Command
	5,  // 3: Referee.yellow:type_name -> Referee.TeamInfo
	5,  // 4: Referee.blue:type_name -> Referee.TeamInfo
	6,  // 5: Referee.designated_position:type_name -> Referee.Point
	2,  // 6: Referee.next_command:type_name -> Referee.Command
	7,  // 7: Referee.game_events:type_name -> GameEvent
	4,  // 8: Referee.game_event_proposals:type_name -> GameEventProposalGroup
	7,  // 9: GameEventProposalGroup.game_events:type_name -> GameEvent
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ssl_gc_referee_message_proto_init() }
func file_ssl_gc_referee_message_proto_init() {
	if File_ssl_gc_referee_message_proto != nil {
		return
	}
	file_ssl_gc_game_event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ssl_gc_referee_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_referee_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEventProposalGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_referee_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referee_TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_referee_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referee_Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_gc_referee_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_gc_referee_message_proto_goTypes,
		DependencyIndexes: file_ssl_gc_referee_message_proto_depIdxs,
		EnumInfos:         file_ssl_gc_referee_message_proto_enumTypes,
		MessageInfos:      file_ssl_gc_referee_message_proto_msgTypes,
	}.Build()
	File_ssl_gc_referee_message_proto = out.File
	file_ssl_gc_referee_message_proto_rawDesc = nil
	file_ssl_gc_referee_message_proto_goTypes = nil
	file_ssl_gc_referee_message_proto_depIdxs = nil
}
