// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file engine/ssl_gc_engine.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Vector2, Vector2Json, Vector3, Vector3Json } from "../geom/ssl_gc_geometry_pb";
import { file_geom_ssl_gc_geometry } from "../geom/ssl_gc_geometry_pb";
import type { RobotId, RobotIdJson, Team, TeamJson } from "../state/ssl_gc_common_pb";
import { file_state_ssl_gc_common } from "../state/ssl_gc_common_pb";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file engine/ssl_gc_engine.proto.
 */
export const file_engine_ssl_gc_engine: GenFile = /*@__PURE__*/
  fileDesc("ChplbmdpbmUvc3NsX2djX2VuZ2luZS5wcm90byKdAwoHR2NTdGF0ZRIrCgp0ZWFtX3N0YXRlGAEgAygLMhcuR2NTdGF0ZS5UZWFtU3RhdGVFbnRyeRIyCg5hdXRvX3JlZl9zdGF0ZRgCIAMoCzIaLkdjU3RhdGUuQXV0b1JlZlN0YXRlRW50cnkSKAoIdHJhY2tlcnMYAyADKAsyFi5HY1N0YXRlLlRyYWNrZXJzRW50cnkSKQoQY29udGludWVfYWN0aW9ucxgEIAMoCzIPLkNvbnRpbnVlQWN0aW9uEiUKDmNvbnRpbnVlX2hpbnRzGAUgAygLMg0uQ29udGludWVIaW50Gj4KDlRlYW1TdGF0ZUVudHJ5EgsKA2tleRgBIAEoCRIbCgV2YWx1ZRgCIAEoCzIMLkdjU3RhdGVUZWFtOgI4ARpEChFBdXRvUmVmU3RhdGVFbnRyeRILCgNrZXkYASABKAkSHgoFdmFsdWUYAiABKAsyDy5HY1N0YXRlQXV0b1JlZjoCOAEaLwoNVHJhY2tlcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIrsBCgtHY1N0YXRlVGVhbRIRCgljb25uZWN0ZWQYASABKAgSGwoTY29ubmVjdGlvbl92ZXJpZmllZBgCIAEoCBIgChhyZW1vdGVfY29udHJvbF9jb25uZWN0ZWQYAyABKAgSKgoicmVtb3RlX2NvbnRyb2xfY29ubmVjdGlvbl92ZXJpZmllZBgEIAEoCBIuChBhZHZhbnRhZ2VfY2hvaWNlGAUgASgLMhQuVGVhbUFkdmFudGFnZUNob2ljZSJ2ChNUZWFtQWR2YW50YWdlQ2hvaWNlEjQKBmNob2ljZRgBIAEoDjIkLlRlYW1BZHZhbnRhZ2VDaG9pY2UuQWR2YW50YWdlQ2hvaWNlIikKD0FkdmFudGFnZUNob2ljZRIICgRTVE9QEAASDAoIQ09OVElOVUUQASItCg5HY1N0YXRlQXV0b1JlZhIbChNjb25uZWN0aW9uX3ZlcmlmaWVkGAEgASgIImAKDkdjU3RhdGVUcmFja2VyEhMKC3NvdXJjZV9uYW1lGAEgASgJEgwKBHV1aWQYBCABKAkSEwoEYmFsbBgCIAEoCzIFLkJhbGwSFgoGcm9ib3RzGAMgAygLMgYuUm9ib3QiNAoEQmFsbBIVCgNwb3MYASABKAsyCC5WZWN0b3IzEhUKA3ZlbBgCIAEoCzIILlZlY3RvcjMiNAoFUm9ib3QSFAoCaWQYASABKAsyCC5Sb2JvdElkEhUKA3BvcxgCIAEoCzIILlZlY3RvcjIixAUKDkNvbnRpbnVlQWN0aW9uEiIKBHR5cGUYASACKA4yFC5Db250aW51ZUFjdGlvbi5UeXBlEhcKCGZvcl90ZWFtGAIgAigOMgUuVGVhbRIbChNjb250aW51YXRpb25faXNzdWVzGAMgAygJEiwKCHJlYWR5X2F0GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIkCgVzdGF0ZRgFIAEoDjIVLkNvbnRpbnVlQWN0aW9uLlN0YXRlIp0DCgRUeXBlEhAKDFRZUEVfVU5LTk9XThAAEggKBEhBTFQQARIUChBSRVNVTUVfRlJPTV9IQUxUEAoSDQoJU1RPUF9HQU1FEAISDwoLRk9SQ0VfU1RBUlQQCxINCglGUkVFX0tJQ0sQERIQCgxORVhUX0NPTU1BTkQQAxIYChRCQUxMX1BMQUNFTUVOVF9TVEFSVBAEEhkKFUJBTExfUExBQ0VNRU5UX0NBTkNFTBAJEhsKF0JBTExfUExBQ0VNRU5UX0NPTVBMRVRFEA4SFwoTQkFMTF9QTEFDRU1FTlRfRkFJTBAPEhEKDVRJTUVPVVRfU1RBUlQQBRIQCgxUSU1FT1VUX1NUT1AQBhIUChBCT1RfU1VCU1RJVFVUSU9OEAcSDgoKTkVYVF9TVEFHRRAIEgwKCEVORF9HQU1FEBASDwoLQUNDRVBUX0dPQUwQDBIPCgtSRUpFQ1RfR09BTBAUEhAKDE5PUk1BTF9TVEFSVBANEhQKEENIQUxMRU5HRV9BQ0NFUFQQEhIUChBDSEFMTEVOR0VfUkVKRUNUEBMiZAoFU3RhdGUSEQoNU1RBVEVfVU5LTk9XThAAEgsKB0JMT0NLRUQQARILCgdXQUlUSU5HEAISDgoKUkVBRFlfQVVUTxADEhAKDFJFQURZX01BTlVBTBAEEgwKCERJU0FCTEVEEAUiHwoMQ29udGludWVIaW50Eg8KB21lc3NhZ2UYASACKAlCVEIQU3NsR2NFbmdpbmVQcm90b1ABWj5naXRodWIuY29tL1JvYm9DdXAtU1NML3NzbC1nYW1lLWNvbnRyb2xsZXIvaW50ZXJuYWwvYXBwL2VuZ2luZQ", [file_geom_ssl_gc_geometry, file_state_ssl_gc_common, file_google_protobuf_timestamp]);

/**
 * The GC state contains settings and state independent of the match state
 *
 * @generated from message GcState
 */
export type GcState = Message<"GcState"> & {
  /**
   * the state of each team
   *
   * @generated from field: map<string, GcStateTeam> team_state = 1;
   */
  teamState: { [key: string]: GcStateTeam };

  /**
   * the states of the auto referees
   *
   * @generated from field: map<string, GcStateAutoRef> auto_ref_state = 2;
   */
  autoRefState: { [key: string]: GcStateAutoRef };

  /**
   * the attached trackers (uuid -> source_name)
   *
   * @generated from field: map<string, string> trackers = 3;
   */
  trackers: { [key: string]: string };

  /**
   * the next actions that can be executed when continuing
   *
   * @generated from field: repeated ContinueAction continue_actions = 4;
   */
  continueActions: ContinueAction[];

  /**
   * the next actions that can be executed when continuing
   *
   * @generated from field: repeated ContinueHint continue_hints = 5;
   */
  continueHints: ContinueHint[];
};

/**
 * The GC state contains settings and state independent of the match state
 *
 * @generated from message GcState
 */
export type GcStateJson = {
  /**
   * the state of each team
   *
   * @generated from field: map<string, GcStateTeam> team_state = 1;
   */
  teamState?: { [key: string]: GcStateTeamJson };

  /**
   * the states of the auto referees
   *
   * @generated from field: map<string, GcStateAutoRef> auto_ref_state = 2;
   */
  autoRefState?: { [key: string]: GcStateAutoRefJson };

  /**
   * the attached trackers (uuid -> source_name)
   *
   * @generated from field: map<string, string> trackers = 3;
   */
  trackers?: { [key: string]: string };

  /**
   * the next actions that can be executed when continuing
   *
   * @generated from field: repeated ContinueAction continue_actions = 4;
   */
  continueActions?: ContinueActionJson[];

  /**
   * the next actions that can be executed when continuing
   *
   * @generated from field: repeated ContinueHint continue_hints = 5;
   */
  continueHints?: ContinueHintJson[];
};

/**
 * Describes the message GcState.
 * Use `create(GcStateSchema)` to create a new message.
 */
export const GcStateSchema: GenMessage<GcState, GcStateJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 0);

/**
 * The GC state for a single team
 *
 * @generated from message GcStateTeam
 */
export type GcStateTeam = Message<"GcStateTeam"> & {
  /**
   * true: The team is connected
   *
   * @generated from field: optional bool connected = 1;
   */
  connected: boolean;

  /**
   * true: The team connected via TLS with a verified certificate
   *
   * @generated from field: optional bool connection_verified = 2;
   */
  connectionVerified: boolean;

  /**
   * true: The remote control for the team is connected
   *
   * @generated from field: optional bool remote_control_connected = 3;
   */
  remoteControlConnected: boolean;

  /**
   * true: The remote control for the team connected via TLS with a verified certificate
   *
   * @generated from field: optional bool remote_control_connection_verified = 4;
   */
  remoteControlConnectionVerified: boolean;

  /**
   * the advantage choice of the team
   *
   * @generated from field: optional TeamAdvantageChoice advantage_choice = 5;
   */
  advantageChoice?: TeamAdvantageChoice;
};

/**
 * The GC state for a single team
 *
 * @generated from message GcStateTeam
 */
export type GcStateTeamJson = {
  /**
   * true: The team is connected
   *
   * @generated from field: optional bool connected = 1;
   */
  connected?: boolean;

  /**
   * true: The team connected via TLS with a verified certificate
   *
   * @generated from field: optional bool connection_verified = 2;
   */
  connectionVerified?: boolean;

  /**
   * true: The remote control for the team is connected
   *
   * @generated from field: optional bool remote_control_connected = 3;
   */
  remoteControlConnected?: boolean;

  /**
   * true: The remote control for the team connected via TLS with a verified certificate
   *
   * @generated from field: optional bool remote_control_connection_verified = 4;
   */
  remoteControlConnectionVerified?: boolean;

  /**
   * the advantage choice of the team
   *
   * @generated from field: optional TeamAdvantageChoice advantage_choice = 5;
   */
  advantageChoice?: TeamAdvantageChoiceJson;
};

/**
 * Describes the message GcStateTeam.
 * Use `create(GcStateTeamSchema)` to create a new message.
 */
export const GcStateTeamSchema: GenMessage<GcStateTeam, GcStateTeamJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 1);

/**
 * The choice from a team regarding the advantage rule
 *
 * @generated from message TeamAdvantageChoice
 */
export type TeamAdvantageChoice = Message<"TeamAdvantageChoice"> & {
  /**
   * the choice of the team
   *
   * @generated from field: optional TeamAdvantageChoice.AdvantageChoice choice = 1;
   */
  choice: TeamAdvantageChoice_AdvantageChoice;
};

/**
 * The choice from a team regarding the advantage rule
 *
 * @generated from message TeamAdvantageChoice
 */
export type TeamAdvantageChoiceJson = {
  /**
   * the choice of the team
   *
   * @generated from field: optional TeamAdvantageChoice.AdvantageChoice choice = 1;
   */
  choice?: TeamAdvantageChoice_AdvantageChoiceJson;
};

/**
 * Describes the message TeamAdvantageChoice.
 * Use `create(TeamAdvantageChoiceSchema)` to create a new message.
 */
export const TeamAdvantageChoiceSchema: GenMessage<TeamAdvantageChoice, TeamAdvantageChoiceJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 2);

/**
 * possible advantage choices
 *
 * @generated from enum TeamAdvantageChoice.AdvantageChoice
 */
export enum TeamAdvantageChoice_AdvantageChoice {
  /**
   * stop the game
   *
   * @generated from enum value: STOP = 0;
   */
  STOP = 0,

  /**
   * keep the match running
   *
   * @generated from enum value: CONTINUE = 1;
   */
  CONTINUE = 1,
}

/**
 * possible advantage choices
 *
 * @generated from enum TeamAdvantageChoice.AdvantageChoice
 */
export type TeamAdvantageChoice_AdvantageChoiceJson = "STOP" | "CONTINUE";

/**
 * Describes the enum TeamAdvantageChoice.AdvantageChoice.
 */
export const TeamAdvantageChoice_AdvantageChoiceSchema: GenEnum<TeamAdvantageChoice_AdvantageChoice, TeamAdvantageChoice_AdvantageChoiceJson> = /*@__PURE__*/
  enumDesc(file_engine_ssl_gc_engine, 2, 0);

/**
 * The GC state of an auto referee
 *
 * @generated from message GcStateAutoRef
 */
export type GcStateAutoRef = Message<"GcStateAutoRef"> & {
  /**
   * true: The autoRef connected via TLS with a verified certificate
   *
   * @generated from field: optional bool connection_verified = 1;
   */
  connectionVerified: boolean;
};

/**
 * The GC state of an auto referee
 *
 * @generated from message GcStateAutoRef
 */
export type GcStateAutoRefJson = {
  /**
   * true: The autoRef connected via TLS with a verified certificate
   *
   * @generated from field: optional bool connection_verified = 1;
   */
  connectionVerified?: boolean;
};

/**
 * Describes the message GcStateAutoRef.
 * Use `create(GcStateAutoRefSchema)` to create a new message.
 */
export const GcStateAutoRefSchema: GenMessage<GcStateAutoRef, GcStateAutoRefJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 3);

/**
 * GC state of a tracker
 *
 * @generated from message GcStateTracker
 */
export type GcStateTracker = Message<"GcStateTracker"> & {
  /**
   * Name of the source
   *
   * @generated from field: optional string source_name = 1;
   */
  sourceName: string;

  /**
   * UUID of the source
   *
   * @generated from field: optional string uuid = 4;
   */
  uuid: string;

  /**
   * Current ball
   *
   * @generated from field: optional Ball ball = 2;
   */
  ball?: Ball;

  /**
   * Current robots
   *
   * @generated from field: repeated Robot robots = 3;
   */
  robots: Robot[];
};

/**
 * GC state of a tracker
 *
 * @generated from message GcStateTracker
 */
export type GcStateTrackerJson = {
  /**
   * Name of the source
   *
   * @generated from field: optional string source_name = 1;
   */
  sourceName?: string;

  /**
   * UUID of the source
   *
   * @generated from field: optional string uuid = 4;
   */
  uuid?: string;

  /**
   * Current ball
   *
   * @generated from field: optional Ball ball = 2;
   */
  ball?: BallJson;

  /**
   * Current robots
   *
   * @generated from field: repeated Robot robots = 3;
   */
  robots?: RobotJson[];
};

/**
 * Describes the message GcStateTracker.
 * Use `create(GcStateTrackerSchema)` to create a new message.
 */
export const GcStateTrackerSchema: GenMessage<GcStateTracker, GcStateTrackerJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 4);

/**
 * The ball state
 *
 * @generated from message Ball
 */
export type Ball = Message<"Ball"> & {
  /**
   * ball position [m]
   *
   * @generated from field: optional Vector3 pos = 1;
   */
  pos?: Vector3;

  /**
   * ball velocity [m/s]
   *
   * @generated from field: optional Vector3 vel = 2;
   */
  vel?: Vector3;
};

/**
 * The ball state
 *
 * @generated from message Ball
 */
export type BallJson = {
  /**
   * ball position [m]
   *
   * @generated from field: optional Vector3 pos = 1;
   */
  pos?: Vector3Json;

  /**
   * ball velocity [m/s]
   *
   * @generated from field: optional Vector3 vel = 2;
   */
  vel?: Vector3Json;
};

/**
 * Describes the message Ball.
 * Use `create(BallSchema)` to create a new message.
 */
export const BallSchema: GenMessage<Ball, BallJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 5);

/**
 * The robot state
 *
 * @generated from message Robot
 */
export type Robot = Message<"Robot"> & {
  /**
   * robot id and team
   *
   * @generated from field: optional RobotId id = 1;
   */
  id?: RobotId;

  /**
   * robot position [m]
   *
   * @generated from field: optional Vector2 pos = 2;
   */
  pos?: Vector2;
};

/**
 * The robot state
 *
 * @generated from message Robot
 */
export type RobotJson = {
  /**
   * robot id and team
   *
   * @generated from field: optional RobotId id = 1;
   */
  id?: RobotIdJson;

  /**
   * robot position [m]
   *
   * @generated from field: optional Vector2 pos = 2;
   */
  pos?: Vector2Json;
};

/**
 * Describes the message Robot.
 * Use `create(RobotSchema)` to create a new message.
 */
export const RobotSchema: GenMessage<Robot, RobotJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 6);

/**
 * @generated from message ContinueAction
 */
export type ContinueAction = Message<"ContinueAction"> & {
  /**
   * type of action that will be performed next
   *
   * @generated from field: required ContinueAction.Type type = 1;
   */
  type: ContinueAction_Type;

  /**
   * for which team (if team specific)
   *
   * @generated from field: required Team for_team = 2;
   */
  forTeam: Team;

  /**
   * list of issues that hinders the game from continuing
   *
   * @generated from field: repeated string continuation_issues = 3;
   */
  continuationIssues: string[];

  /**
   * timestamp at which the action will be ready (to give some preparation time)
   *
   * @generated from field: optional google.protobuf.Timestamp ready_at = 4;
   */
  readyAt?: Timestamp;

  /**
   * state of the action
   *
   * @generated from field: optional ContinueAction.State state = 5;
   */
  state: ContinueAction_State;
};

/**
 * @generated from message ContinueAction
 */
export type ContinueActionJson = {
  /**
   * type of action that will be performed next
   *
   * @generated from field: required ContinueAction.Type type = 1;
   */
  type?: ContinueAction_TypeJson;

  /**
   * for which team (if team specific)
   *
   * @generated from field: required Team for_team = 2;
   */
  forTeam?: TeamJson;

  /**
   * list of issues that hinders the game from continuing
   *
   * @generated from field: repeated string continuation_issues = 3;
   */
  continuationIssues?: string[];

  /**
   * timestamp at which the action will be ready (to give some preparation time)
   *
   * @generated from field: optional google.protobuf.Timestamp ready_at = 4;
   */
  readyAt?: TimestampJson;

  /**
   * state of the action
   *
   * @generated from field: optional ContinueAction.State state = 5;
   */
  state?: ContinueAction_StateJson;
};

/**
 * Describes the message ContinueAction.
 * Use `create(ContinueActionSchema)` to create a new message.
 */
export const ContinueActionSchema: GenMessage<ContinueAction, ContinueActionJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 7);

/**
 * @generated from enum ContinueAction.Type
 */
export enum ContinueAction_Type {
  /**
   * @generated from enum value: TYPE_UNKNOWN = 0;
   */
  TYPE_UNKNOWN = 0,

  /**
   * @generated from enum value: HALT = 1;
   */
  HALT = 1,

  /**
   * @generated from enum value: RESUME_FROM_HALT = 10;
   */
  RESUME_FROM_HALT = 10,

  /**
   * @generated from enum value: STOP_GAME = 2;
   */
  STOP_GAME = 2,

  /**
   * @generated from enum value: FORCE_START = 11;
   */
  FORCE_START = 11,

  /**
   * @generated from enum value: FREE_KICK = 17;
   */
  FREE_KICK = 17,

  /**
   * @generated from enum value: NEXT_COMMAND = 3;
   */
  NEXT_COMMAND = 3,

  /**
   * @generated from enum value: BALL_PLACEMENT_START = 4;
   */
  BALL_PLACEMENT_START = 4,

  /**
   * @generated from enum value: BALL_PLACEMENT_CANCEL = 9;
   */
  BALL_PLACEMENT_CANCEL = 9,

  /**
   * @generated from enum value: BALL_PLACEMENT_COMPLETE = 14;
   */
  BALL_PLACEMENT_COMPLETE = 14,

  /**
   * @generated from enum value: BALL_PLACEMENT_FAIL = 15;
   */
  BALL_PLACEMENT_FAIL = 15,

  /**
   * @generated from enum value: TIMEOUT_START = 5;
   */
  TIMEOUT_START = 5,

  /**
   * @generated from enum value: TIMEOUT_STOP = 6;
   */
  TIMEOUT_STOP = 6,

  /**
   * @generated from enum value: BOT_SUBSTITUTION = 7;
   */
  BOT_SUBSTITUTION = 7,

  /**
   * @generated from enum value: NEXT_STAGE = 8;
   */
  NEXT_STAGE = 8,

  /**
   * @generated from enum value: END_GAME = 16;
   */
  END_GAME = 16,

  /**
   * @generated from enum value: ACCEPT_GOAL = 12;
   */
  ACCEPT_GOAL = 12,

  /**
   * @generated from enum value: REJECT_GOAL = 20;
   */
  REJECT_GOAL = 20,

  /**
   * @generated from enum value: NORMAL_START = 13;
   */
  NORMAL_START = 13,

  /**
   * @generated from enum value: CHALLENGE_ACCEPT = 18;
   */
  CHALLENGE_ACCEPT = 18,

  /**
   * @generated from enum value: CHALLENGE_REJECT = 19;
   */
  CHALLENGE_REJECT = 19,
}

/**
 * @generated from enum ContinueAction.Type
 */
export type ContinueAction_TypeJson = "TYPE_UNKNOWN" | "HALT" | "RESUME_FROM_HALT" | "STOP_GAME" | "FORCE_START" | "FREE_KICK" | "NEXT_COMMAND" | "BALL_PLACEMENT_START" | "BALL_PLACEMENT_CANCEL" | "BALL_PLACEMENT_COMPLETE" | "BALL_PLACEMENT_FAIL" | "TIMEOUT_START" | "TIMEOUT_STOP" | "BOT_SUBSTITUTION" | "NEXT_STAGE" | "END_GAME" | "ACCEPT_GOAL" | "REJECT_GOAL" | "NORMAL_START" | "CHALLENGE_ACCEPT" | "CHALLENGE_REJECT";

/**
 * Describes the enum ContinueAction.Type.
 */
export const ContinueAction_TypeSchema: GenEnum<ContinueAction_Type, ContinueAction_TypeJson> = /*@__PURE__*/
  enumDesc(file_engine_ssl_gc_engine, 7, 0);

/**
 * @generated from enum ContinueAction.State
 */
export enum ContinueAction_State {
  /**
   * @generated from enum value: STATE_UNKNOWN = 0;
   */
  STATE_UNKNOWN = 0,

  /**
   * @generated from enum value: BLOCKED = 1;
   */
  BLOCKED = 1,

  /**
   * @generated from enum value: WAITING = 2;
   */
  WAITING = 2,

  /**
   * @generated from enum value: READY_AUTO = 3;
   */
  READY_AUTO = 3,

  /**
   * @generated from enum value: READY_MANUAL = 4;
   */
  READY_MANUAL = 4,

  /**
   * @generated from enum value: DISABLED = 5;
   */
  DISABLED = 5,
}

/**
 * @generated from enum ContinueAction.State
 */
export type ContinueAction_StateJson = "STATE_UNKNOWN" | "BLOCKED" | "WAITING" | "READY_AUTO" | "READY_MANUAL" | "DISABLED";

/**
 * Describes the enum ContinueAction.State.
 */
export const ContinueAction_StateSchema: GenEnum<ContinueAction_State, ContinueAction_StateJson> = /*@__PURE__*/
  enumDesc(file_engine_ssl_gc_engine, 7, 1);

/**
 * @generated from message ContinueHint
 */
export type ContinueHint = Message<"ContinueHint"> & {
  /**
   * @generated from field: required string message = 1;
   */
  message: string;
};

/**
 * @generated from message ContinueHint
 */
export type ContinueHintJson = {
  /**
   * @generated from field: required string message = 1;
   */
  message?: string;
};

/**
 * Describes the message ContinueHint.
 * Use `create(ContinueHintSchema)` to create a new message.
 */
export const ContinueHintSchema: GenMessage<ContinueHint, ContinueHintJson> = /*@__PURE__*/
  messageDesc(file_engine_ssl_gc_engine, 8);

