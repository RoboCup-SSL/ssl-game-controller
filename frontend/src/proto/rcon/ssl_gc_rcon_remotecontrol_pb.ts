// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file rcon/ssl_gc_rcon_remotecontrol.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Team, TeamJson } from "../state/ssl_gc_common_pb";
import { file_state_ssl_gc_common } from "../state/ssl_gc_common_pb";
import type { ControllerReply, ControllerReplyJson, Signature, SignatureJson } from "./ssl_gc_rcon_pb";
import { file_rcon_ssl_gc_rcon } from "./ssl_gc_rcon_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file rcon/ssl_gc_rcon_remotecontrol.proto.
 */
export const file_rcon_ssl_gc_rcon_remotecontrol: GenFile = /*@__PURE__*/
  fileDesc("CiRyY29uL3NzbF9nY19yY29uX3JlbW90ZWNvbnRyb2wucHJvdG8iTwoZUmVtb3RlQ29udHJvbFJlZ2lzdHJhdGlvbhITCgR0ZWFtGAEgAigOMgUuVGVhbRIdCglzaWduYXR1cmUYAiABKAsyCi5TaWduYXR1cmUi1QIKGVJlbW90ZUNvbnRyb2xUb0NvbnRyb2xsZXISHQoJc2lnbmF0dXJlGAEgASgLMgouU2lnbmF0dXJlEjUKB3JlcXVlc3QYAiABKA4yIi5SZW1vdGVDb250cm9sVG9Db250cm9sbGVyLlJlcXVlc3RIABIYCg5kZXNpcmVkX2tlZXBlchgDIAEoBUgAEiQKGnJlcXVlc3Rfcm9ib3Rfc3Vic3RpdHV0aW9uGAQgASgISAASGQoPcmVxdWVzdF90aW1lb3V0GAUgASgISAASIAoWcmVxdWVzdF9lbWVyZ2VuY3lfc3RvcBgGIAEoCEgAIl4KB1JlcXVlc3QSCwoHVU5LTk9XThAAEggKBFBJTkcQARISCg5DSEFMTEVOR0VfRkxBRxACEhAKDFNUT1BfVElNRU9VVBADEhYKEkZBSUxfQkFMTFBMQUNFTUVOVBAEQgUKA21zZyJvChlDb250cm9sbGVyVG9SZW1vdGVDb250cm9sEioKEGNvbnRyb2xsZXJfcmVwbHkYASABKAsyEC5Db250cm9sbGVyUmVwbHkSJgoFc3RhdGUYAiABKAsyFy5SZW1vdGVDb250cm9sVGVhbVN0YXRlIr8DChZSZW1vdGVDb250cm9sVGVhbVN0YXRlEhMKBHRlYW0YDCABKA4yBS5UZWFtEjUKEmF2YWlsYWJsZV9yZXF1ZXN0cxgBIAMoDjIZLlJlbW90ZUNvbnRyb2xSZXF1ZXN0VHlwZRIyCg9hY3RpdmVfcmVxdWVzdHMYAiADKA4yGS5SZW1vdGVDb250cm9sUmVxdWVzdFR5cGUSEQoJa2VlcGVyX2lkGAMgASgFEhkKEWVtZXJnZW5jeV9zdG9wX2luGAQgASgCEhUKDXRpbWVvdXRzX2xlZnQYBSABKAUSGQoRdGltZW91dF90aW1lX2xlZnQYCiABKAISHAoUY2hhbGxlbmdlX2ZsYWdzX2xlZnQYBiABKAUSEgoKbWF4X3JvYm90cxgHIAEoBRIXCg9yb2JvdHNfb25fZmllbGQYCSABKAUSGAoQeWVsbG93X2NhcmRzX2R1ZRgIIAMoAhIcChRjYW5fc3Vic3RpdHV0ZV9yb2JvdBgLIAEoCBIeChZib3Rfc3Vic3RpdHV0aW9uc19sZWZ0GA0gASgNEiIKGmJvdF9zdWJzdGl0dXRpb25fdGltZV9sZWZ0GA4gASgCKsEBChhSZW1vdGVDb250cm9sUmVxdWVzdFR5cGUSGAoUVU5LTk9XTl9SRVFVRVNUX1RZUEUQABISCg5FTUVSR0VOQ1lfU1RPUBABEhYKElJPQk9UX1NVQlNUSVRVVElPThACEgsKB1RJTUVPVVQQAxISCg5DSEFMTEVOR0VfRkxBRxAEEhQKEENIQU5HRV9LRUVQRVJfSUQQBRIQCgxTVE9QX1RJTUVPVVQQBhIWChJGQUlMX0JBTExQTEFDRU1FTlQQB0JdQhtTc2xHY1Jjb25SZW1vdGVjb250cm9sUHJvdG9QAVo8Z2l0aHViLmNvbS9Sb2JvQ3VwLVNTTC9zc2wtZ2FtZS1jb250cm9sbGVyL2ludGVybmFsL2FwcC9yY29u", [file_state_ssl_gc_common, file_rcon_ssl_gc_rcon]);

/**
 * a registration that must be send by the remote control to the controller as the very first message
 *
 * @generated from message RemoteControlRegistration
 */
export type RemoteControlRegistration = Message<"RemoteControlRegistration"> & {
  /**
   * the team to be controlled
   *
   * @generated from field: required Team team = 1;
   */
  team: Team;

  /**
   * signature can optionally be specified to enable secure communication
   *
   * @generated from field: optional Signature signature = 2;
   */
  signature?: Signature;
};

/**
 * a registration that must be send by the remote control to the controller as the very first message
 *
 * @generated from message RemoteControlRegistration
 */
export type RemoteControlRegistrationJson = {
  /**
   * the team to be controlled
   *
   * @generated from field: required Team team = 1;
   */
  team?: TeamJson;

  /**
   * signature can optionally be specified to enable secure communication
   *
   * @generated from field: optional Signature signature = 2;
   */
  signature?: SignatureJson;
};

/**
 * Describes the message RemoteControlRegistration.
 * Use `create(RemoteControlRegistrationSchema)` to create a new message.
 */
export const RemoteControlRegistrationSchema: GenMessage<RemoteControlRegistration, RemoteControlRegistrationJson> = /*@__PURE__*/
  messageDesc(file_rcon_ssl_gc_rcon_remotecontrol, 0);

/**
 * wrapper for all messages from the remote control to the controller
 *
 * @generated from message RemoteControlToController
 */
export type RemoteControlToController = Message<"RemoteControlToController"> & {
  /**
   * signature can optionally be specified to enable secure communication
   *
   * @generated from field: optional Signature signature = 1;
   */
  signature?: Signature;

  /**
   * @generated from oneof RemoteControlToController.msg
   */
  msg: {
    /**
     * send a request to the GC
     *
     * @generated from field: RemoteControlToController.Request request = 2;
     */
    value: RemoteControlToController_Request;
    case: "request";
  } | {
    /**
     * request a new desired keeper id
     *
     * @generated from field: int32 desired_keeper = 3;
     */
    value: number;
    case: "desiredKeeper";
  } | {
    /**
     * true: request to substitute a robot at the next possibility
     * false: cancel request
     *
     * @generated from field: bool request_robot_substitution = 4;
     */
    value: boolean;
    case: "requestRobotSubstitution";
  } | {
    /**
     * true: request a timeout with the next stoppage
     * false: cancel the request
     *
     * @generated from field: bool request_timeout = 5;
     */
    value: boolean;
    case: "requestTimeout";
  } | {
    /**
     * true: initiate an emergency stop
     * false: cancel the request
     *
     * @generated from field: bool request_emergency_stop = 6;
     */
    value: boolean;
    case: "requestEmergencyStop";
  } | { case: undefined; value?: undefined };
};

/**
 * wrapper for all messages from the remote control to the controller
 *
 * @generated from message RemoteControlToController
 */
export type RemoteControlToControllerJson = {
  /**
   * signature can optionally be specified to enable secure communication
   *
   * @generated from field: optional Signature signature = 1;
   */
  signature?: SignatureJson;

  /**
   * send a request to the GC
   *
   * @generated from field: RemoteControlToController.Request request = 2;
   */
  request?: RemoteControlToController_RequestJson;

  /**
   * request a new desired keeper id
   *
   * @generated from field: int32 desired_keeper = 3;
   */
  desiredKeeper?: number;

  /**
   * true: request to substitute a robot at the next possibility
   * false: cancel request
   *
   * @generated from field: bool request_robot_substitution = 4;
   */
  requestRobotSubstitution?: boolean;

  /**
   * true: request a timeout with the next stoppage
   * false: cancel the request
   *
   * @generated from field: bool request_timeout = 5;
   */
  requestTimeout?: boolean;

  /**
   * true: initiate an emergency stop
   * false: cancel the request
   *
   * @generated from field: bool request_emergency_stop = 6;
   */
  requestEmergencyStop?: boolean;
};

/**
 * Describes the message RemoteControlToController.
 * Use `create(RemoteControlToControllerSchema)` to create a new message.
 */
export const RemoteControlToControllerSchema: GenMessage<RemoteControlToController, RemoteControlToControllerJson> = /*@__PURE__*/
  messageDesc(file_rcon_ssl_gc_rcon_remotecontrol, 1);

/**
 * @generated from enum RemoteControlToController.Request
 */
export enum RemoteControlToController_Request {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Ping the GC to test the connection. The GC will respond with OK and the current team state
   *
   * @generated from enum value: PING = 1;
   */
  PING = 1,

  /**
   * Raise a challenge flag (this is not revocable)
   *
   * @generated from enum value: CHALLENGE_FLAG = 2;
   */
  CHALLENGE_FLAG = 2,

  /**
   * Stop an ongoing timeout
   *
   * @generated from enum value: STOP_TIMEOUT = 3;
   */
  STOP_TIMEOUT = 3,

  /**
   * Fail a ball placement
   *
   * @generated from enum value: FAIL_BALLPLACEMENT = 4;
   */
  FAIL_BALLPLACEMENT = 4,
}

/**
 * @generated from enum RemoteControlToController.Request
 */
export type RemoteControlToController_RequestJson = "UNKNOWN" | "PING" | "CHALLENGE_FLAG" | "STOP_TIMEOUT" | "FAIL_BALLPLACEMENT";

/**
 * Describes the enum RemoteControlToController.Request.
 */
export const RemoteControlToController_RequestSchema: GenEnum<RemoteControlToController_Request, RemoteControlToController_RequestJson> = /*@__PURE__*/
  enumDesc(file_rcon_ssl_gc_rcon_remotecontrol, 1, 0);

/**
 * wrapper for all messages from controller to a team's computer
 *
 * @generated from message ControllerToRemoteControl
 */
export type ControllerToRemoteControl = Message<"ControllerToRemoteControl"> & {
  /**
   * a reply from the controller
   *
   * @generated from field: optional ControllerReply controller_reply = 1;
   */
  controllerReply?: ControllerReply;

  /**
   * current team state
   *
   * @generated from field: optional RemoteControlTeamState state = 2;
   */
  state?: RemoteControlTeamState;
};

/**
 * wrapper for all messages from controller to a team's computer
 *
 * @generated from message ControllerToRemoteControl
 */
export type ControllerToRemoteControlJson = {
  /**
   * a reply from the controller
   *
   * @generated from field: optional ControllerReply controller_reply = 1;
   */
  controllerReply?: ControllerReplyJson;

  /**
   * current team state
   *
   * @generated from field: optional RemoteControlTeamState state = 2;
   */
  state?: RemoteControlTeamStateJson;
};

/**
 * Describes the message ControllerToRemoteControl.
 * Use `create(ControllerToRemoteControlSchema)` to create a new message.
 */
export const ControllerToRemoteControlSchema: GenMessage<ControllerToRemoteControl, ControllerToRemoteControlJson> = /*@__PURE__*/
  messageDesc(file_rcon_ssl_gc_rcon_remotecontrol, 2);

/**
 * Current team state from Controller for remote control
 *
 * @generated from message RemoteControlTeamState
 */
export type RemoteControlTeamState = Message<"RemoteControlTeamState"> & {
  /**
   * the team that is controlled
   *
   * @generated from field: optional Team team = 12;
   */
  team: Team;

  /**
   * list of all currently available request types that can be made
   *
   * @generated from field: repeated RemoteControlRequestType available_requests = 1;
   */
  availableRequests: RemoteControlRequestType[];

  /**
   * list of all currently active request types that are pending
   *
   * @generated from field: repeated RemoteControlRequestType active_requests = 2;
   */
  activeRequests: RemoteControlRequestType[];

  /**
   * currently set keeper id
   *
   * @generated from field: optional int32 keeper_id = 3;
   */
  keeperId: number;

  /**
   * number of seconds till emergency stop is executed
   * zero, if no emergency stop requested
   *
   * @generated from field: optional float emergency_stop_in = 4;
   */
  emergencyStopIn: number;

  /**
   * number of timeouts left for the team
   *
   * @generated from field: optional int32 timeouts_left = 5;
   */
  timeoutsLeft: number;

  /**
   * number of seconds left for timeout for the team
   *
   * @generated from field: optional float timeout_time_left = 10;
   */
  timeoutTimeLeft: number;

  /**
   * number of challenge flags left for the team
   *
   * @generated from field: optional int32 challenge_flags_left = 6;
   */
  challengeFlagsLeft: number;

  /**
   * max number of robots currently allowed
   *
   * @generated from field: optional int32 max_robots = 7;
   */
  maxRobots: number;

  /**
   * current number of robots visible on field
   *
   * @generated from field: optional int32 robots_on_field = 9;
   */
  robotsOnField: number;

  /**
   * list of due times for each active yellow card (in seconds)
   *
   * @generated from field: repeated float yellow_cards_due = 8;
   */
  yellowCardsDue: number[];

  /**
   * if true, team is allowed to substitute robots
   *
   * @generated from field: optional bool can_substitute_robot = 11;
   */
  canSubstituteRobot: boolean;

  /**
   * number of bot substitutions left by the team in this halftime
   *
   * @generated from field: optional uint32 bot_substitutions_left = 13;
   */
  botSubstitutionsLeft: number;

  /**
   * number of seconds left for current bot substitution
   *
   * @generated from field: optional float bot_substitution_time_left = 14;
   */
  botSubstitutionTimeLeft: number;
};

/**
 * Current team state from Controller for remote control
 *
 * @generated from message RemoteControlTeamState
 */
export type RemoteControlTeamStateJson = {
  /**
   * the team that is controlled
   *
   * @generated from field: optional Team team = 12;
   */
  team?: TeamJson;

  /**
   * list of all currently available request types that can be made
   *
   * @generated from field: repeated RemoteControlRequestType available_requests = 1;
   */
  availableRequests?: RemoteControlRequestTypeJson[];

  /**
   * list of all currently active request types that are pending
   *
   * @generated from field: repeated RemoteControlRequestType active_requests = 2;
   */
  activeRequests?: RemoteControlRequestTypeJson[];

  /**
   * currently set keeper id
   *
   * @generated from field: optional int32 keeper_id = 3;
   */
  keeperId?: number;

  /**
   * number of seconds till emergency stop is executed
   * zero, if no emergency stop requested
   *
   * @generated from field: optional float emergency_stop_in = 4;
   */
  emergencyStopIn?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * number of timeouts left for the team
   *
   * @generated from field: optional int32 timeouts_left = 5;
   */
  timeoutsLeft?: number;

  /**
   * number of seconds left for timeout for the team
   *
   * @generated from field: optional float timeout_time_left = 10;
   */
  timeoutTimeLeft?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * number of challenge flags left for the team
   *
   * @generated from field: optional int32 challenge_flags_left = 6;
   */
  challengeFlagsLeft?: number;

  /**
   * max number of robots currently allowed
   *
   * @generated from field: optional int32 max_robots = 7;
   */
  maxRobots?: number;

  /**
   * current number of robots visible on field
   *
   * @generated from field: optional int32 robots_on_field = 9;
   */
  robotsOnField?: number;

  /**
   * list of due times for each active yellow card (in seconds)
   *
   * @generated from field: repeated float yellow_cards_due = 8;
   */
  yellowCardsDue?: (number | "NaN" | "Infinity" | "-Infinity")[];

  /**
   * if true, team is allowed to substitute robots
   *
   * @generated from field: optional bool can_substitute_robot = 11;
   */
  canSubstituteRobot?: boolean;

  /**
   * number of bot substitutions left by the team in this halftime
   *
   * @generated from field: optional uint32 bot_substitutions_left = 13;
   */
  botSubstitutionsLeft?: number;

  /**
   * number of seconds left for current bot substitution
   *
   * @generated from field: optional float bot_substitution_time_left = 14;
   */
  botSubstitutionTimeLeft?: number | "NaN" | "Infinity" | "-Infinity";
};

/**
 * Describes the message RemoteControlTeamState.
 * Use `create(RemoteControlTeamStateSchema)` to create a new message.
 */
export const RemoteControlTeamStateSchema: GenMessage<RemoteControlTeamState, RemoteControlTeamStateJson> = /*@__PURE__*/
  messageDesc(file_rcon_ssl_gc_rcon_remotecontrol, 3);

/**
 * All possible request types that the remote control can make
 *
 * @generated from enum RemoteControlRequestType
 */
export enum RemoteControlRequestType {
  /**
   * @generated from enum value: UNKNOWN_REQUEST_TYPE = 0;
   */
  UNKNOWN_REQUEST_TYPE = 0,

  /**
   * @generated from enum value: EMERGENCY_STOP = 1;
   */
  EMERGENCY_STOP = 1,

  /**
   * @generated from enum value: ROBOT_SUBSTITUTION = 2;
   */
  ROBOT_SUBSTITUTION = 2,

  /**
   * @generated from enum value: TIMEOUT = 3;
   */
  TIMEOUT = 3,

  /**
   * @generated from enum value: CHALLENGE_FLAG = 4;
   */
  CHALLENGE_FLAG = 4,

  /**
   * @generated from enum value: CHANGE_KEEPER_ID = 5;
   */
  CHANGE_KEEPER_ID = 5,

  /**
   * @generated from enum value: STOP_TIMEOUT = 6;
   */
  STOP_TIMEOUT = 6,

  /**
   * @generated from enum value: FAIL_BALLPLACEMENT = 7;
   */
  FAIL_BALLPLACEMENT = 7,
}

/**
 * All possible request types that the remote control can make
 *
 * @generated from enum RemoteControlRequestType
 */
export type RemoteControlRequestTypeJson = "UNKNOWN_REQUEST_TYPE" | "EMERGENCY_STOP" | "ROBOT_SUBSTITUTION" | "TIMEOUT" | "CHALLENGE_FLAG" | "CHANGE_KEEPER_ID" | "STOP_TIMEOUT" | "FAIL_BALLPLACEMENT";

/**
 * Describes the enum RemoteControlRequestType.
 */
export const RemoteControlRequestTypeSchema: GenEnum<RemoteControlRequestType, RemoteControlRequestTypeJson> = /*@__PURE__*/
  enumDesc(file_rcon_ssl_gc_rcon_remotecontrol, 0);

