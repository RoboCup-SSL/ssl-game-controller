// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file ci/autoref/ssl_autoref_ci.proto (syntax proto2)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { TrackerWrapperPacket, TrackerWrapperPacketJson } from "../../tracker/ssl_vision_wrapper_tracked_pb";
import { file_tracker_ssl_vision_wrapper_tracked } from "../../tracker/ssl_vision_wrapper_tracked_pb";
import type { SSL_DetectionFrame, SSL_DetectionFrameJson } from "../../vision/ssl_vision_detection_pb";
import { file_vision_ssl_vision_detection } from "../../vision/ssl_vision_detection_pb";
import type { SSL_GeometryData, SSL_GeometryDataJson } from "../../vision/ssl_vision_geometry_pb";
import { file_vision_ssl_vision_geometry } from "../../vision/ssl_vision_geometry_pb";
import type { Referee, RefereeJson } from "../../state/ssl_gc_referee_message_pb";
import { file_state_ssl_gc_referee_message } from "../../state/ssl_gc_referee_message_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ci/autoref/ssl_autoref_ci.proto.
 */
export const file_ci_autoref_ssl_autoref_ci: GenFile = /*@__PURE__*/
  fileDesc("Ch9jaS9hdXRvcmVmL3NzbF9hdXRvcmVmX2NpLnByb3RvIrcBCg5BdXRvUmVmQ2lJbnB1dBIhCg9yZWZlcmVlX21lc3NhZ2UYASABKAsyCC5SZWZlcmVlEjUKFnRyYWNrZXJfd3JhcHBlcl9wYWNrZXQYAiABKAsyFS5UcmFja2VyV3JhcHBlclBhY2tldBImCglkZXRlY3Rpb24YAyADKAsyEy5TU0xfRGV0ZWN0aW9uRnJhbWUSIwoIZ2VvbWV0cnkYBCABKAsyES5TU0xfR2VvbWV0cnlEYXRhIkgKD0F1dG9SZWZDaU91dHB1dBI1ChZ0cmFja2VyX3dyYXBwZXJfcGFja2V0GAEgASgLMhUuVHJhY2tlcldyYXBwZXJQYWNrZXRCWUIRU3NsQXV0b3JlZkNpUHJvdG9QAVpCZ2l0aHViLmNvbS9Sb2JvQ3VwLVNTTC9zc2wtZ2FtZS1jb250cm9sbGVyL2ludGVybmFsL2FwcC9jaS9hdXRvcmVm", [file_tracker_ssl_vision_wrapper_tracked, file_vision_ssl_vision_detection, file_vision_ssl_vision_geometry, file_state_ssl_gc_referee_message]);

/**
 * The AutoRefCiInput contains all packets/messages that would otherwise be received through multicast by the auto-referee
 * It may contain either a raw or a tracked SSL-vision packet. If both are given, the implementation may choose either one.
 *
 * @generated from message AutoRefCiInput
 */
export type AutoRefCiInput = Message<"AutoRefCiInput"> & {
  /**
   * Latest referee message
   *
   * @generated from field: optional Referee referee_message = 1;
   */
  refereeMessage?: Referee;

  /**
   * A tracked SSL-Vision packet to be processed without filtering
   *
   * @generated from field: optional TrackerWrapperPacket tracker_wrapper_packet = 2;
   */
  trackerWrapperPacket?: TrackerWrapperPacket;

  /**
   * A list of unfiltered SSL-Vision packets (for multiple cameras) to be filtered and processed
   *
   * @generated from field: repeated SSL_DetectionFrame detection = 3;
   */
  detection: SSL_DetectionFrame[];

  /**
   * Current geometry data, to be sent at least once at the beginning of the connection
   *
   * @generated from field: optional SSL_GeometryData geometry = 4;
   */
  geometry?: SSL_GeometryData;
};

/**
 * The AutoRefCiInput contains all packets/messages that would otherwise be received through multicast by the auto-referee
 * It may contain either a raw or a tracked SSL-vision packet. If both are given, the implementation may choose either one.
 *
 * @generated from message AutoRefCiInput
 */
export type AutoRefCiInputJson = {
  /**
   * Latest referee message
   *
   * @generated from field: optional Referee referee_message = 1;
   */
  refereeMessage?: RefereeJson;

  /**
   * A tracked SSL-Vision packet to be processed without filtering
   *
   * @generated from field: optional TrackerWrapperPacket tracker_wrapper_packet = 2;
   */
  trackerWrapperPacket?: TrackerWrapperPacketJson;

  /**
   * A list of unfiltered SSL-Vision packets (for multiple cameras) to be filtered and processed
   *
   * @generated from field: repeated SSL_DetectionFrame detection = 3;
   */
  detection?: SSL_DetectionFrameJson[];

  /**
   * Current geometry data, to be sent at least once at the beginning of the connection
   *
   * @generated from field: optional SSL_GeometryData geometry = 4;
   */
  geometry?: SSL_GeometryDataJson;
};

/**
 * Describes the message AutoRefCiInput.
 * Use `create(AutoRefCiInputSchema)` to create a new message.
 */
export const AutoRefCiInputSchema: GenMessage<AutoRefCiInput, AutoRefCiInputJson> = /*@__PURE__*/
  messageDesc(file_ci_autoref_ssl_autoref_ci, 0);

/**
 * The AutoRefCiOutput contains any new data created by the auto-referee for further processing
 *
 * @generated from message AutoRefCiOutput
 */
export type AutoRefCiOutput = Message<"AutoRefCiOutput"> & {
  /**
   * A resulting tracked SSL-Vision packet for input into the ssl-game-controller.
   * The auto-referee will either generate it from the unfiltered SSL-Vision packets
   * or simply return the tracked packet from the input.
   *
   * @generated from field: optional TrackerWrapperPacket tracker_wrapper_packet = 1;
   */
  trackerWrapperPacket?: TrackerWrapperPacket;
};

/**
 * The AutoRefCiOutput contains any new data created by the auto-referee for further processing
 *
 * @generated from message AutoRefCiOutput
 */
export type AutoRefCiOutputJson = {
  /**
   * A resulting tracked SSL-Vision packet for input into the ssl-game-controller.
   * The auto-referee will either generate it from the unfiltered SSL-Vision packets
   * or simply return the tracked packet from the input.
   *
   * @generated from field: optional TrackerWrapperPacket tracker_wrapper_packet = 1;
   */
  trackerWrapperPacket?: TrackerWrapperPacketJson;
};

/**
 * Describes the message AutoRefCiOutput.
 * Use `create(AutoRefCiOutputSchema)` to create a new message.
 */
export const AutoRefCiOutputSchema: GenMessage<AutoRefCiOutput, AutoRefCiOutputJson> = /*@__PURE__*/
  messageDesc(file_ci_autoref_ssl_autoref_ci, 1);

