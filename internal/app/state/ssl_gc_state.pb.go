// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.3
// source: ssl_gc_state.proto

package state

import (
	geom "github.com/RoboCup-SSL/ssl-game-controller/internal/app/geom"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Command_Type int32

const (
	Command_UNKNOWN        Command_Type = 0
	Command_HALT           Command_Type = 1
	Command_STOP           Command_Type = 2
	Command_NORMAL_START   Command_Type = 3
	Command_FORCE_START    Command_Type = 4
	Command_DIRECT         Command_Type = 5
	Command_KICKOFF        Command_Type = 7
	Command_PENALTY        Command_Type = 8
	Command_TIMEOUT        Command_Type = 9
	Command_BALL_PLACEMENT Command_Type = 10
)

// Enum value maps for Command_Type.
var (
	Command_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "HALT",
		2:  "STOP",
		3:  "NORMAL_START",
		4:  "FORCE_START",
		5:  "DIRECT",
		7:  "KICKOFF",
		8:  "PENALTY",
		9:  "TIMEOUT",
		10: "BALL_PLACEMENT",
	}
	Command_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"HALT":           1,
		"STOP":           2,
		"NORMAL_START":   3,
		"FORCE_START":    4,
		"DIRECT":         5,
		"KICKOFF":        7,
		"PENALTY":        8,
		"TIMEOUT":        9,
		"BALL_PLACEMENT": 10,
	}
)

func (x Command_Type) Enum() *Command_Type {
	p := new(Command_Type)
	*p = x
	return p
}

func (x Command_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_state_proto_enumTypes[0].Descriptor()
}

func (Command_Type) Type() protoreflect.EnumType {
	return &file_ssl_gc_state_proto_enumTypes[0]
}

func (x Command_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Command_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Command_Type(num)
	return nil
}

// Deprecated: Use Command_Type.Descriptor instead.
func (Command_Type) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{3, 0}
}

type GameState_Type int32

const (
	GameState_UNKNOWN        GameState_Type = 0
	GameState_HALT           GameState_Type = 1
	GameState_STOP           GameState_Type = 2
	GameState_RUNNING        GameState_Type = 3
	GameState_FREE_KICK      GameState_Type = 4
	GameState_KICKOFF        GameState_Type = 5
	GameState_PENALTY        GameState_Type = 6
	GameState_TIMEOUT        GameState_Type = 7
	GameState_BALL_PLACEMENT GameState_Type = 8
)

// Enum value maps for GameState_Type.
var (
	GameState_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "HALT",
		2: "STOP",
		3: "RUNNING",
		4: "FREE_KICK",
		5: "KICKOFF",
		6: "PENALTY",
		7: "TIMEOUT",
		8: "BALL_PLACEMENT",
	}
	GameState_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"HALT":           1,
		"STOP":           2,
		"RUNNING":        3,
		"FREE_KICK":      4,
		"KICKOFF":        5,
		"PENALTY":        6,
		"TIMEOUT":        7,
		"BALL_PLACEMENT": 8,
	}
)

func (x GameState_Type) Enum() *GameState_Type {
	p := new(GameState_Type)
	*p = x
	return p
}

func (x GameState_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_state_proto_enumTypes[1].Descriptor()
}

func (GameState_Type) Type() protoreflect.EnumType {
	return &file_ssl_gc_state_proto_enumTypes[1]
}

func (x GameState_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GameState_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GameState_Type(num)
	return nil
}

// Deprecated: Use GameState_Type.Descriptor instead.
func (GameState_Type) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{4, 0}
}

type YellowCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CausedByGameEvent *GameEvent           `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
	TimeRemaining     *durationpb.Duration `protobuf:"bytes,3,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
}

func (x *YellowCard) Reset() {
	*x = YellowCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YellowCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YellowCard) ProtoMessage() {}

func (x *YellowCard) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YellowCard.ProtoReflect.Descriptor instead.
func (*YellowCard) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{0}
}

func (x *YellowCard) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *YellowCard) GetCausedByGameEvent() *GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

func (x *YellowCard) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

type RedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CausedByGameEvent *GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
}

func (x *RedCard) Reset() {
	*x = RedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedCard) ProtoMessage() {}

func (x *RedCard) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedCard.ProtoReflect.Descriptor instead.
func (*RedCard) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{1}
}

func (x *RedCard) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RedCard) GetCausedByGameEvent() *GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

type Foul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CausedByGameEvent *GameEvent             `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *Foul) Reset() {
	*x = Foul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Foul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foul) ProtoMessage() {}

func (x *Foul) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foul.ProtoReflect.Descriptor instead.
func (*Foul) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{2}
}

func (x *Foul) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Foul) GetCausedByGameEvent() *GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

func (x *Foul) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *Command_Type `protobuf:"varint,1,req,name=type,enum=Command_Type" json:"type,omitempty"`
	ForTeam *Team         `protobuf:"varint,2,req,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{3}
}

func (x *Command) GetType() Command_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Command_UNKNOWN
}

func (x *Command) GetForTeam() Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return Team_UNKNOWN
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *GameState_Type `protobuf:"varint,1,req,name=type,enum=GameState_Type" json:"type,omitempty"`
	ForTeam *Team           `protobuf:"varint,2,opt,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{4}
}

func (x *GameState) GetType() GameState_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GameState_UNKNOWN
}

func (x *GameState) GetForTeam() Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return Team_UNKNOWN
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp when the game event proposal occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The proposed game event.
	GameEvent *GameEvent `protobuf:"bytes,2,opt,name=game_event,json=gameEvent" json:"game_event,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{5}
}

func (x *Proposal) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Proposal) GetGameEvent() *GameEvent {
	if x != nil {
		return x.GameEvent
	}
	return nil
}

type ProposalGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of this group
	Id *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	// The proposals in this group
	Proposals []*Proposal `protobuf:"bytes,1,rep,name=proposals" json:"proposals,omitempty"`
	// Whether the proposal group was accepted
	Accepted *bool `protobuf:"varint,2,opt,name=accepted" json:"accepted,omitempty"`
}

func (x *ProposalGroup) Reset() {
	*x = ProposalGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalGroup) ProtoMessage() {}

func (x *ProposalGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalGroup.ProtoReflect.Descriptor instead.
func (*ProposalGroup) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{6}
}

func (x *ProposalGroup) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ProposalGroup) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *ProposalGroup) GetAccepted() bool {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return false
}

type TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                         *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Goals                        *int32                 `protobuf:"varint,2,opt,name=goals" json:"goals,omitempty"`
	Goalkeeper                   *int32                 `protobuf:"varint,3,opt,name=goalkeeper" json:"goalkeeper,omitempty"`
	YellowCards                  []*YellowCard          `protobuf:"bytes,4,rep,name=yellow_cards,json=yellowCards" json:"yellow_cards,omitempty"`
	RedCards                     []*RedCard             `protobuf:"bytes,5,rep,name=red_cards,json=redCards" json:"red_cards,omitempty"`
	TimeoutsLeft                 *int32                 `protobuf:"varint,6,opt,name=timeouts_left,json=timeoutsLeft" json:"timeouts_left,omitempty"`
	TimeoutTimeLeft              *durationpb.Duration   `protobuf:"bytes,7,opt,name=timeout_time_left,json=timeoutTimeLeft" json:"timeout_time_left,omitempty"`
	OnPositiveHalf               *bool                  `protobuf:"varint,8,opt,name=on_positive_half,json=onPositiveHalf" json:"on_positive_half,omitempty"`
	Fouls                        []*Foul                `protobuf:"bytes,9,rep,name=fouls" json:"fouls,omitempty"`
	BallPlacementFailures        *int32                 `protobuf:"varint,10,opt,name=ball_placement_failures,json=ballPlacementFailures" json:"ball_placement_failures,omitempty"`
	BallPlacementFailuresReached *bool                  `protobuf:"varint,11,opt,name=ball_placement_failures_reached,json=ballPlacementFailuresReached" json:"ball_placement_failures_reached,omitempty"`
	CanPlaceBall                 *bool                  `protobuf:"varint,12,opt,name=can_place_ball,json=canPlaceBall" json:"can_place_ball,omitempty"`
	MaxAllowedBots               *int32                 `protobuf:"varint,13,opt,name=max_allowed_bots,json=maxAllowedBots" json:"max_allowed_bots,omitempty"`
	RequestsBotSubstitutionSince *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=requests_bot_substitution_since,json=requestsBotSubstitutionSince" json:"requests_bot_substitution_since,omitempty"`
	RequestsTimeoutSince         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=requests_timeout_since,json=requestsTimeoutSince" json:"requests_timeout_since,omitempty"`
	RequestsEmergencyStopSince   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=requests_emergency_stop_since,json=requestsEmergencyStopSince" json:"requests_emergency_stop_since,omitempty"`
	ChallengeFlags               *int32                 `protobuf:"varint,17,opt,name=challenge_flags,json=challengeFlags" json:"challenge_flags,omitempty"`
	BotSubstitutionAllowed       *bool                  `protobuf:"varint,18,opt,name=bot_substitution_allowed,json=botSubstitutionAllowed" json:"bot_substitution_allowed,omitempty"`
}

func (x *TeamInfo) Reset() {
	*x = TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfo) ProtoMessage() {}

func (x *TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfo.ProtoReflect.Descriptor instead.
func (*TeamInfo) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{7}
}

func (x *TeamInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamInfo) GetGoals() int32 {
	if x != nil && x.Goals != nil {
		return *x.Goals
	}
	return 0
}

func (x *TeamInfo) GetGoalkeeper() int32 {
	if x != nil && x.Goalkeeper != nil {
		return *x.Goalkeeper
	}
	return 0
}

func (x *TeamInfo) GetYellowCards() []*YellowCard {
	if x != nil {
		return x.YellowCards
	}
	return nil
}

func (x *TeamInfo) GetRedCards() []*RedCard {
	if x != nil {
		return x.RedCards
	}
	return nil
}

func (x *TeamInfo) GetTimeoutsLeft() int32 {
	if x != nil && x.TimeoutsLeft != nil {
		return *x.TimeoutsLeft
	}
	return 0
}

func (x *TeamInfo) GetTimeoutTimeLeft() *durationpb.Duration {
	if x != nil {
		return x.TimeoutTimeLeft
	}
	return nil
}

func (x *TeamInfo) GetOnPositiveHalf() bool {
	if x != nil && x.OnPositiveHalf != nil {
		return *x.OnPositiveHalf
	}
	return false
}

func (x *TeamInfo) GetFouls() []*Foul {
	if x != nil {
		return x.Fouls
	}
	return nil
}

func (x *TeamInfo) GetBallPlacementFailures() int32 {
	if x != nil && x.BallPlacementFailures != nil {
		return *x.BallPlacementFailures
	}
	return 0
}

func (x *TeamInfo) GetBallPlacementFailuresReached() bool {
	if x != nil && x.BallPlacementFailuresReached != nil {
		return *x.BallPlacementFailuresReached
	}
	return false
}

func (x *TeamInfo) GetCanPlaceBall() bool {
	if x != nil && x.CanPlaceBall != nil {
		return *x.CanPlaceBall
	}
	return false
}

func (x *TeamInfo) GetMaxAllowedBots() int32 {
	if x != nil && x.MaxAllowedBots != nil {
		return *x.MaxAllowedBots
	}
	return 0
}

func (x *TeamInfo) GetRequestsBotSubstitutionSince() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestsBotSubstitutionSince
	}
	return nil
}

func (x *TeamInfo) GetRequestsTimeoutSince() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestsTimeoutSince
	}
	return nil
}

func (x *TeamInfo) GetRequestsEmergencyStopSince() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestsEmergencyStopSince
	}
	return nil
}

func (x *TeamInfo) GetChallengeFlags() int32 {
	if x != nil && x.ChallengeFlags != nil {
		return *x.ChallengeFlags
	}
	return 0
}

func (x *TeamInfo) GetBotSubstitutionAllowed() bool {
	if x != nil && x.BotSubstitutionAllowed != nil {
		return *x.BotSubstitutionAllowed
	}
	return false
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage                      *Referee_Stage         `protobuf:"varint,1,opt,name=stage,enum=Referee_Stage" json:"stage,omitempty"`
	Command                    *Command               `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	GameState                  *GameState             `protobuf:"bytes,19,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	StageTimeElapsed           *durationpb.Duration   `protobuf:"bytes,4,opt,name=stage_time_elapsed,json=stageTimeElapsed" json:"stage_time_elapsed,omitempty"`
	StageTimeLeft              *durationpb.Duration   `protobuf:"bytes,5,opt,name=stage_time_left,json=stageTimeLeft" json:"stage_time_left,omitempty"`
	MatchTimeStart             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=match_time_start,json=matchTimeStart" json:"match_time_start,omitempty"`
	TeamState                  map[string]*TeamInfo   `protobuf:"bytes,8,rep,name=team_state,json=teamState" json:"team_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PlacementPos               *geom.Vector2          `protobuf:"bytes,9,opt,name=placement_pos,json=placementPos" json:"placement_pos,omitempty"`
	NextCommand                *Command               `protobuf:"bytes,10,opt,name=next_command,json=nextCommand" json:"next_command,omitempty"`
	CurrentActionTimeRemaining *durationpb.Duration   `protobuf:"bytes,12,opt,name=current_action_time_remaining,json=currentActionTimeRemaining" json:"current_action_time_remaining,omitempty"`
	GameEvents                 []*GameEvent           `protobuf:"bytes,13,rep,name=game_events,json=gameEvents" json:"game_events,omitempty"`
	ProposalGroups             []*ProposalGroup       `protobuf:"bytes,14,rep,name=proposal_groups,json=proposalGroups" json:"proposal_groups,omitempty"`
	Division                   *Division              `protobuf:"varint,15,opt,name=division,enum=Division" json:"division,omitempty"`
	FirstKickoffTeam           *Team                  `protobuf:"varint,17,opt,name=first_kickoff_team,json=firstKickoffTeam,enum=Team" json:"first_kickoff_team,omitempty"`
	MatchType                  *MatchType             `protobuf:"varint,18,opt,name=match_type,json=matchType,enum=MatchType" json:"match_type,omitempty"`
	ReadyContinueTime          *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=ready_continue_time,json=readyContinueTime" json:"ready_continue_time,omitempty"`
	ShootoutState              *ShootoutState         `protobuf:"bytes,21,opt,name=shootout_state,json=shootoutState" json:"shootout_state,omitempty"`
	StatusMessage              *string                `protobuf:"bytes,22,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{8}
}

func (x *State) GetStage() Referee_Stage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Referee_NORMAL_FIRST_HALF_PRE
}

func (x *State) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *State) GetGameState() *GameState {
	if x != nil {
		return x.GameState
	}
	return nil
}

func (x *State) GetStageTimeElapsed() *durationpb.Duration {
	if x != nil {
		return x.StageTimeElapsed
	}
	return nil
}

func (x *State) GetStageTimeLeft() *durationpb.Duration {
	if x != nil {
		return x.StageTimeLeft
	}
	return nil
}

func (x *State) GetMatchTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchTimeStart
	}
	return nil
}

func (x *State) GetTeamState() map[string]*TeamInfo {
	if x != nil {
		return x.TeamState
	}
	return nil
}

func (x *State) GetPlacementPos() *geom.Vector2 {
	if x != nil {
		return x.PlacementPos
	}
	return nil
}

func (x *State) GetNextCommand() *Command {
	if x != nil {
		return x.NextCommand
	}
	return nil
}

func (x *State) GetCurrentActionTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.CurrentActionTimeRemaining
	}
	return nil
}

func (x *State) GetGameEvents() []*GameEvent {
	if x != nil {
		return x.GameEvents
	}
	return nil
}

func (x *State) GetProposalGroups() []*ProposalGroup {
	if x != nil {
		return x.ProposalGroups
	}
	return nil
}

func (x *State) GetDivision() Division {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return Division_DIV_UNKNOWN
}

func (x *State) GetFirstKickoffTeam() Team {
	if x != nil && x.FirstKickoffTeam != nil {
		return *x.FirstKickoffTeam
	}
	return Team_UNKNOWN
}

func (x *State) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return MatchType_UNKNOWN_MATCH
}

func (x *State) GetReadyContinueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadyContinueTime
	}
	return nil
}

func (x *State) GetShootoutState() *ShootoutState {
	if x != nil {
		return x.ShootoutState
	}
	return nil
}

func (x *State) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

type ShootoutState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextTeam         *Team            `protobuf:"varint,1,opt,name=next_team,json=nextTeam,enum=Team" json:"next_team,omitempty"`
	NumberOfAttempts map[string]int32 `protobuf:"bytes,2,rep,name=number_of_attempts,json=numberOfAttempts" json:"number_of_attempts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *ShootoutState) Reset() {
	*x = ShootoutState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShootoutState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShootoutState) ProtoMessage() {}

func (x *ShootoutState) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShootoutState.ProtoReflect.Descriptor instead.
func (*ShootoutState) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{9}
}

func (x *ShootoutState) GetNextTeam() Team {
	if x != nil && x.NextTeam != nil {
		return *x.NextTeam
	}
	return Team_UNKNOWN
}

func (x *ShootoutState) GetNumberOfAttempts() map[string]int32 {
	if x != nil {
		return x.NumberOfAttempts
	}
	return nil
}

var File_ssl_gc_state_proto protoreflect.FileDescriptor

var file_ssl_gc_state_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8d,
	0x01, 0x0a, 0x04, 0x46, 0x6f, 0x75, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe8,
	0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22,
	0x97, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x43, 0x4b,
	0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x0a, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x7e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41,
	0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x22, 0x6f,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x6a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xa4, 0x07, 0x0a, 0x08,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x6f, 0x61,
	0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x45,
	0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x12,
	0x1b, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x46, 0x6f, 0x75, 0x6c, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x62,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x62,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x6c,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x1f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x50,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x6f, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x62, 0x6f, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x22, 0xa4, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x44, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0e,
	0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x47, 0x0a, 0x0e, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x53, 0x68,
	0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x52, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x68,
	0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f, 0x43, 0x75, 0x70, 0x2d, 0x53,
	0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
}

var (
	file_ssl_gc_state_proto_rawDescOnce sync.Once
	file_ssl_gc_state_proto_rawDescData = file_ssl_gc_state_proto_rawDesc
)

func file_ssl_gc_state_proto_rawDescGZIP() []byte {
	file_ssl_gc_state_proto_rawDescOnce.Do(func() {
		file_ssl_gc_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_gc_state_proto_rawDescData)
	})
	return file_ssl_gc_state_proto_rawDescData
}

var file_ssl_gc_state_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ssl_gc_state_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ssl_gc_state_proto_goTypes = []interface{}{
	(Command_Type)(0),             // 0: Command.Type
	(GameState_Type)(0),           // 1: GameState.Type
	(*YellowCard)(nil),            // 2: YellowCard
	(*RedCard)(nil),               // 3: RedCard
	(*Foul)(nil),                  // 4: Foul
	(*Command)(nil),               // 5: Command
	(*GameState)(nil),             // 6: GameState
	(*Proposal)(nil),              // 7: Proposal
	(*ProposalGroup)(nil),         // 8: ProposalGroup
	(*TeamInfo)(nil),              // 9: TeamInfo
	(*State)(nil),                 // 10: State
	(*ShootoutState)(nil),         // 11: ShootoutState
	nil,                           // 12: State.TeamStateEntry
	nil,                           // 13: ShootoutState.NumberOfAttemptsEntry
	(*GameEvent)(nil),             // 14: GameEvent
	(*durationpb.Duration)(nil),   // 15: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(Team)(0),                     // 17: Team
	(Referee_Stage)(0),            // 18: Referee.Stage
	(*geom.Vector2)(nil),          // 19: Vector2
	(Division)(0),                 // 20: Division
	(MatchType)(0),                // 21: MatchType
}
var file_ssl_gc_state_proto_depIdxs = []int32{
	14, // 0: YellowCard.caused_by_game_event:type_name -> GameEvent
	15, // 1: YellowCard.time_remaining:type_name -> google.protobuf.Duration
	14, // 2: RedCard.caused_by_game_event:type_name -> GameEvent
	14, // 3: Foul.caused_by_game_event:type_name -> GameEvent
	16, // 4: Foul.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 5: Command.type:type_name -> Command.Type
	17, // 6: Command.for_team:type_name -> Team
	1,  // 7: GameState.type:type_name -> GameState.Type
	17, // 8: GameState.for_team:type_name -> Team
	16, // 9: Proposal.timestamp:type_name -> google.protobuf.Timestamp
	14, // 10: Proposal.game_event:type_name -> GameEvent
	7,  // 11: ProposalGroup.proposals:type_name -> Proposal
	2,  // 12: TeamInfo.yellow_cards:type_name -> YellowCard
	3,  // 13: TeamInfo.red_cards:type_name -> RedCard
	15, // 14: TeamInfo.timeout_time_left:type_name -> google.protobuf.Duration
	4,  // 15: TeamInfo.fouls:type_name -> Foul
	16, // 16: TeamInfo.requests_bot_substitution_since:type_name -> google.protobuf.Timestamp
	16, // 17: TeamInfo.requests_timeout_since:type_name -> google.protobuf.Timestamp
	16, // 18: TeamInfo.requests_emergency_stop_since:type_name -> google.protobuf.Timestamp
	18, // 19: State.stage:type_name -> Referee.Stage
	5,  // 20: State.command:type_name -> Command
	6,  // 21: State.game_state:type_name -> GameState
	15, // 22: State.stage_time_elapsed:type_name -> google.protobuf.Duration
	15, // 23: State.stage_time_left:type_name -> google.protobuf.Duration
	16, // 24: State.match_time_start:type_name -> google.protobuf.Timestamp
	12, // 25: State.team_state:type_name -> State.TeamStateEntry
	19, // 26: State.placement_pos:type_name -> Vector2
	5,  // 27: State.next_command:type_name -> Command
	15, // 28: State.current_action_time_remaining:type_name -> google.protobuf.Duration
	14, // 29: State.game_events:type_name -> GameEvent
	8,  // 30: State.proposal_groups:type_name -> ProposalGroup
	20, // 31: State.division:type_name -> Division
	17, // 32: State.first_kickoff_team:type_name -> Team
	21, // 33: State.match_type:type_name -> MatchType
	16, // 34: State.ready_continue_time:type_name -> google.protobuf.Timestamp
	11, // 35: State.shootout_state:type_name -> ShootoutState
	17, // 36: ShootoutState.next_team:type_name -> Team
	13, // 37: ShootoutState.number_of_attempts:type_name -> ShootoutState.NumberOfAttemptsEntry
	9,  // 38: State.TeamStateEntry.value:type_name -> TeamInfo
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_ssl_gc_state_proto_init() }
func file_ssl_gc_state_proto_init() {
	if File_ssl_gc_state_proto != nil {
		return
	}
	file_ssl_gc_common_proto_init()
	file_ssl_gc_game_event_proto_init()
	file_ssl_gc_referee_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ssl_gc_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YellowCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Foul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShootoutState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_gc_state_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_gc_state_proto_goTypes,
		DependencyIndexes: file_ssl_gc_state_proto_depIdxs,
		EnumInfos:         file_ssl_gc_state_proto_enumTypes,
		MessageInfos:      file_ssl_gc_state_proto_msgTypes,
	}.Build()
	File_ssl_gc_state_proto = out.File
	file_ssl_gc_state_proto_rawDesc = nil
	file_ssl_gc_state_proto_goTypes = nil
	file_ssl_gc_state_proto_depIdxs = nil
}
